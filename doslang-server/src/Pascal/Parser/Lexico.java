/* The following code was generated by JFlex 1.6.1 */

package Pascal.Parser;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexico.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TAG = 2;
  public static final int ATTR = 4;
  public static final int DOC = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\11\1\16\1\16\1\15\22\0\1\5\1\0\1\13"+
    "\1\22\1\21\1\35\1\0\1\10\1\27\1\30\1\20\1\23\1\26"+
    "\1\33\1\3\1\34\12\2\1\25\1\24\1\43\1\52\1\44\2\0"+
    "\1\46\1\64\1\56\1\54\1\42\1\45\1\60\1\66\1\63\1\6"+
    "\1\74\1\47\1\61\1\53\1\55\1\57\1\72\1\40\1\51\1\37"+
    "\1\41\1\70\1\65\1\6\1\67\1\71\1\31\1\12\1\32\1\36"+
    "\1\7\1\0\1\46\1\64\1\56\1\54\1\42\1\45\1\60\1\66"+
    "\1\63\1\6\1\74\1\47\1\61\1\53\1\55\1\57\1\72\1\40"+
    "\1\51\1\37\1\41\1\70\1\65\1\6\1\67\1\71\1\14\1\4"+
    "\1\17\7\0\1\16\252\0\2\62\115\0\1\50\u1ea8\0\1\16\1\16"+
    "\u0100\0\1\73\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\4\5\1\24"+
    "\1\25\3\5\1\1\1\5\1\26\6\5\1\1\4\5"+
    "\2\0\1\27\3\0\1\30\3\0\1\5\1\31\10\5"+
    "\1\32\1\33\1\34\6\5\2\0\4\5\1\0\2\5"+
    "\1\35\1\36\1\37\5\5\1\40\1\0\1\40\7\5"+
    "\1\41\1\27\1\30\2\2\4\0\12\5\1\0\1\5"+
    "\1\42\3\5\1\43\1\5\1\44\1\5\2\0\3\5"+
    "\1\45\1\46\2\47\2\5\1\0\5\5\1\0\3\5"+
    "\1\0\2\5\1\0\1\5\1\50\2\0\1\2\1\0"+
    "\1\51\3\5\1\52\1\53\1\54\1\55\4\5\1\0"+
    "\1\5\2\56\2\5\1\0\3\5\2\0\2\5\1\57"+
    "\2\5\2\60\1\0\1\5\1\27\3\5\1\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\61\1\0\1\5\1\0"+
    "\3\2\2\62\5\5\1\63\2\64\2\5\2\65\1\66"+
    "\1\5\2\0\4\5\2\67\4\5\1\0\1\5\2\70"+
    "\1\5\2\71\2\72\1\2\1\0\2\5\1\73\1\74"+
    "\1\5\2\75\1\0\1\5\1\76\1\77\1\100\1\77"+
    "\1\100\1\5\1\101\1\102\2\5\1\103\1\0\2\5"+
    "\1\0\3\5\1\104\1\0\1\5\1\105\1\5\1\106"+
    "\2\107\1\110\2\111\2\5\2\112\3\5\1\113\1\0"+
    "\1\5\1\0\1\5\2\114\2\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\75\0\172\0\267\0\75\0\364\0\u0131"+
    "\0\75\0\u016e\0\u01ab\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\75\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726"+
    "\0\u0131\0\75\0\u0763\0\u016e\0\u07a0\0\75\0\u07dd\0\u081a"+
    "\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\75\0\75\0\75\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\364\0\364"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\75\0\u0ff7\0\364"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u0726"+
    "\0\u0131\0\u016e\0\75\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3"+
    "\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb"+
    "\0\u14f8\0\u1535\0\u1572\0\u15af\0\364\0\u15ec\0\u1629\0\u1666"+
    "\0\364\0\u16a3\0\364\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4"+
    "\0\u1811\0\364\0\364\0\75\0\364\0\u184e\0\u188b\0\u18c8"+
    "\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0"+
    "\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\364\0\u1c5b"+
    "\0\u1c98\0\u1cd5\0\u1d12\0\364\0\u1d4f\0\u1d8c\0\u1dc9\0\364"+
    "\0\364\0\364\0\364\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa"+
    "\0\u1f37\0\75\0\364\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068"+
    "\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\364\0\u21d6\0\u2213"+
    "\0\75\0\364\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381"+
    "\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\364"+
    "\0\u2569\0\u25a6\0\u25e3\0\u1259\0\u2620\0\u1296\0\75\0\364"+
    "\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\364\0\75\0\364"+
    "\0\u278e\0\u27cb\0\75\0\364\0\364\0\u2808\0\u2845\0\u2882"+
    "\0\u28bf\0\u28fc\0\u2939\0\u2976\0\75\0\364\0\u29b3\0\u29f0"+
    "\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\75\0\364\0\u2b21\0\u2b5e"+
    "\0\u2b9b\0\75\0\364\0\u1c98\0\u2bd8\0\u2c15\0\u2c52\0\364"+
    "\0\364\0\u2c8f\0\75\0\364\0\u2ccc\0\u2d09\0\364\0\75"+
    "\0\75\0\364\0\364\0\u2d46\0\364\0\364\0\u2d83\0\u2dc0"+
    "\0\364\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b"+
    "\0\364\0\u2fa8\0\u2fe5\0\364\0\u3022\0\364\0\75\0\364"+
    "\0\364\0\75\0\364\0\u305f\0\u309c\0\75\0\364\0\u30d9"+
    "\0\u3116\0\u3153\0\364\0\u3190\0\u31cd\0\u320a\0\u3247\0\75"+
    "\0\364\0\75\0\364";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\4\1\7\1\3"+
    "\1\10\1\11\1\3\1\12\1\13\1\4\1\0\1\3"+
    "\1\14\2\3\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\7"+
    "\1\52\1\53\1\54\1\55\1\56\2\7\1\57\2\7"+
    "\1\3\1\7\76\0\1\4\3\0\1\4\7\0\1\4"+
    "\61\0\1\5\1\60\73\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\1\7\10\61\1\62\1\0"+
    "\1\63\62\61\11\64\1\0\1\65\1\66\61\64\11\67"+
    "\1\0\3\67\2\0\1\70\1\71\54\67\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\1\7\1\72\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\2\7\1\73\4\7"+
    "\1\0\3\7\1\74\1\75\3\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\3\7\1\76"+
    "\2\0\3\7\1\0\1\7\1\0\2\7\1\77\4\7"+
    "\1\0\10\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\100\6\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\2\7\1\101\1\0\1\7\1\0\1\102\6\7\1\0"+
    "\7\7\1\103\1\0\1\7\44\0\1\104\5\0\1\105"+
    "\74\0\1\106\24\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\2\7\1\107\1\7\2\0\1\7\1\110\1\7"+
    "\1\0\1\7\1\0\2\7\1\111\4\7\1\0\10\7"+
    "\1\0\1\7\2\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\1\7\1\112\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\113\6\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\3\7\1\114"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\1\7\37\0\1\115\22\0\2\116\13\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\1\117\3\7\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\116\1\120\7\7"+
    "\1\0\1\7\2\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\4\7\2\0\1\7\1\121\1\7\1\0\1\7"+
    "\1\0\2\7\1\122\4\7\1\123\1\124\7\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\3\7\1\125\2\0\3\7\1\0\1\7\1\0\2\7"+
    "\1\126\4\7\1\0\10\7\1\0\1\7\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\1\7\1\127\2\7"+
    "\2\0\1\130\2\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\1\7\1\131\1\7\1\0"+
    "\1\7\1\0\2\7\1\132\4\7\1\0\3\7\1\133"+
    "\4\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\1\7\1\134\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\1\7\1\135\1\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\1\7\45\0\1\136\5\0\1\137\23\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\1\140\2\7\1\0\1\7\1\0\1\141\6\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\3\7\1\142\2\0\3\7\1\0\1\7"+
    "\1\0\2\7\1\143\4\7\1\0\10\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\1\7"+
    "\1\144\2\7\2\0\3\7\1\0\1\7\1\0\2\7"+
    "\1\145\4\7\1\0\3\7\1\146\4\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\4\7"+
    "\2\0\1\7\1\147\1\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\1\7\2\0\1\150\1\0\2\150"+
    "\67\0\10\61\1\151\1\0\1\63\62\61\11\64\1\0"+
    "\1\65\1\152\61\64\11\67\1\0\3\67\2\0\1\70"+
    "\66\67\1\153\3\67\1\154\1\0\1\70\55\67\11\155"+
    "\1\156\2\155\1\71\2\156\1\157\1\160\1\67\53\155"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\2\7"+
    "\1\161\1\7\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\2\7\1\162\1\7\2\0\2\7"+
    "\1\163\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\3\7\1\164\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\4\7\1\165\2\7\1\0\10\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\4\7"+
    "\2\0\1\7\1\166\1\7\1\0\1\7\1\0\3\7"+
    "\1\167\1\170\2\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\2\7\1\171"+
    "\1\7\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\1\172\3\7\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\1\7\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\4\7\2\0\3\7"+
    "\1\173\1\174\1\0\7\7\1\0\10\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\4\7"+
    "\2\0\3\7\1\0\1\7\1\0\1\7\1\175\5\7"+
    "\1\0\10\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\2\7\1\176\1\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\4\7"+
    "\2\0\3\7\1\0\1\7\1\0\1\177\6\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\2\7\1\200\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\1\7\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\1\7\1\201\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\1\7\2\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\1\7\1\202\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\1\7\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\203\5\7\1\0\10\7"+
    "\1\0\1\7\2\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\4\7\2\0\3\7\1\0\1\7\1\0\1\204"+
    "\6\7\1\0\10\7\1\0\1\7\40\0\1\205\125\0"+
    "\1\206\5\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\1\7\1\207\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\6\7\1\210\1\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\1\211\6\7"+
    "\1\0\10\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\1\212\1\213\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\1\7"+
    "\47\0\1\214\27\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\4\7\2\0\2\7\1\215\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\1\216\2\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\4\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\2\7"+
    "\1\217\5\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\4\7\2\0\3\7\1\220\1\221"+
    "\1\0\7\7\1\0\10\7\1\0\1\7\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\222\6\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\1\7\1\223\1\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\224\4\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\2\7\1\225\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\1\7\37\0\1\226\37\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\1\227\3\7\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\5\7\1\230"+
    "\1\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\231\4\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\7\7\1\232"+
    "\1\233\7\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\1\7\1\234\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\4\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\235\1\236"+
    "\7\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\1\7\1\237\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\1\7\11\0"+
    "\1\153\63\0\11\67\1\0\2\67\1\240\2\0\1\70"+
    "\55\67\14\0\1\241\60\0\11\67\1\153\2\67\1\240"+
    "\1\154\1\0\1\70\55\67\11\240\1\241\3\240\2\241"+
    "\1\242\1\243\1\240\1\67\52\240\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\3\7\1\244\2\0\3\7"+
    "\1\0\1\7\1\0\1\245\6\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\4\7\1\246"+
    "\2\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\247\4\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\1\250\6\7"+
    "\1\0\10\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\3\7\1\251\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\2\7\1\252\1\0\1\7\1\0\1\7\1\253\5\7"+
    "\1\0\10\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\2\7\1\254\4\7\1\0\10\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\3\7"+
    "\1\255\2\0\2\7\1\256\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\257\6\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\260\1\261\7\7"+
    "\1\0\1\7\42\0\1\262\34\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\3\7\1\263\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\1\7\1\264\1\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\3\7\1\265\3\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\3\7\1\266\1\267\1\0\7\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\1\7\1\270\1\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\5\7\1\271\1\7\1\0\10\7\1\0"+
    "\1\7\62\0\2\272\53\0\1\273\34\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\272\1\274\7\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\3\7"+
    "\1\275\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\1\7\1\276\5\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\1\7\1\277\1\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\1\300\6\7\1\0\10\7\1\0\1\7\42\0\1\301"+
    "\34\0\1\7\3\0\2\7\23\0\1\7\3\0\3\7"+
    "\1\302\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\3\7\1\303\1\304\1\0"+
    "\7\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\1\7\1\305\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\3\7\1\306"+
    "\1\7\1\307\1\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\2\7\1\310\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\1\7\42\0\1\311\34\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\3\7\1\312\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\313\1\314\7\7"+
    "\1\0\1\7\2\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\4\7\2\0\2\7\1\315\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\1\7\37\0\1\316\37\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\1\317\3\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\1\7\2\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\4\7\2\0\3\7\1\0\1\7\1\0\1\7"+
    "\1\320\5\7\1\0\10\7\1\0\1\7\47\0\1\321"+
    "\27\0\1\7\3\0\2\7\23\0\1\7\3\0\4\7"+
    "\2\0\2\7\1\322\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\1\7\11\155\1\156\3\155\2\156\1\157"+
    "\1\160\1\67\53\155\20\156\1\323\1\0\53\156\11\155"+
    "\1\324\3\155\1\325\1\156\1\157\1\160\1\67\64\155"+
    "\1\156\3\155\2\156\1\326\1\160\1\67\53\155\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\10\7\1\327"+
    "\1\330\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\4\7\1\331"+
    "\2\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\2\7\1\332\5\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\1\7\1\333\2\7\2\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\1\7\1\334"+
    "\1\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\1\7\1\335\1\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\336\5\7\1\0\10\7\1\0"+
    "\1\7\47\0\1\337\27\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\2\7\1\340\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\1\7\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\4\7\2\0\2\7"+
    "\1\341\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\1\342\3\7\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\1\7\42\0\1\343\34\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\3\7\1\344\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\345\3\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\1\346\3\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\1\7"+
    "\53\0\1\347\76\0\1\350\21\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\351\6\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\2\7\1\352\4\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\2\7\1\353\1\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\1\354\3\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\1\7\37\0\1\355\37\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\1\356\3\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\1\7\1\357\1\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\3\7\1\360\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\1\7\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\1\7\1\361\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\1\7\2\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\4\7\2\0\3\7\1\0\1\7\1\0\2\7"+
    "\1\362\4\7\1\0\10\7\1\0\1\7\60\0\1\363"+
    "\16\0\1\7\3\0\2\7\23\0\1\7\3\0\4\7"+
    "\2\0\3\7\1\0\1\7\1\0\5\7\1\364\1\7"+
    "\1\0\10\7\1\0\1\7\53\0\1\365\23\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\366\6\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\3\7\1\367\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\1\7\42\0\1\370\34\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\3\7\1\371\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\1\7\42\0\1\372\34\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\3\7\1\373\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\1\7\17\241\1\374"+
    "\1\375\1\241\1\0\52\241\11\0\1\153\2\0\1\241"+
    "\62\0\1\7\3\0\2\7\23\0\1\7\3\0\3\7"+
    "\1\376\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\3\7\1\377\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\1\7\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\u0100\5\7\1\0\10\7"+
    "\1\0\1\7\2\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\1\u0101\3\7\2\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\3\7\1\u0102\3\7\1\0\10\7\1\0"+
    "\1\7\2\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\3\7\1\u0103\1\u0104\1\0\7\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\u0105\1\u0106\7\7\1\0\1\7\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\3\7\1\u0107\4\7"+
    "\1\0\1\7\60\0\1\u0108\61\0\1\u0109\31\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\5\7\1\u010a\1\7\1\0\10\7"+
    "\1\0\1\7\2\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\4\7\2\0\1\u010b\2\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\2\7\1\u010c"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\4\7"+
    "\2\0\3\7\1\0\1\7\1\0\2\7\1\u010d\4\7"+
    "\1\0\10\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\1\u010e\3\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\1\7\1\u010f\5\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\1\7\1\u0110\1\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\3\7\1\u0111\3\7\1\0"+
    "\10\7\1\0\1\7\42\0\1\u0112\34\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\3\7\1\u0113\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\4\7"+
    "\2\0\1\7\1\u0114\1\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\1\7\47\0\1\u0115\27\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\4\7\2\0\2\7"+
    "\1\u0116\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\1\7\17\156\1\324\1\323\1\0\53\156\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\1\7\1\u0117\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\1\7\2\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\1\7\1\u0118\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\1\7\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\3\7\1\u0119\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\1\7\55\0\1\u011a\21\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\2\7\1\u011b\4\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\1\u011c\3\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\1\7\2\0\1\7\3\0\2\7\23\0\1\7"+
    "\3\0\2\7\1\u011d\1\7\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\1\7\2\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\6\7\1\u011e\1\0\10\7\1\0"+
    "\1\7\40\0\1\u011f\36\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\1\7\1\u0120\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\1\u0121\6\7\1\0\10\7"+
    "\1\0\1\7\53\0\1\u0122\23\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\u0123\6\7\1\0\10\7\1\0\1\7\2\0"+
    "\1\7\3\0\2\7\23\0\1\7\3\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\3\7\1\u0124\3\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\3\7\1\u0125\3\7\1\0\10\7\1\0\1\7\53\0"+
    "\1\u0126\23\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\1\u0127\6\7"+
    "\1\0\10\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\1\7\1\u0128\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\4\7"+
    "\2\0\1\7\1\u0129\1\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\1\7\2\0\1\7\3\0\2\7"+
    "\23\0\1\7\3\0\4\7\2\0\1\7\1\u012a\1\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\1\7"+
    "\2\0\1\7\3\0\2\7\23\0\1\7\3\0\3\7"+
    "\1\u012b\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\1\7\2\0\1\7\3\0\2\7\23\0"+
    "\1\7\3\0\4\7\2\0\3\7\1\u012c\1\u012d\1\0"+
    "\7\7\1\0\10\7\1\0\1\7\2\0\1\7\3\0"+
    "\2\7\23\0\1\7\3\0\4\7\2\0\3\7\1\u012e"+
    "\1\u012f\1\0\7\7\1\0\10\7\1\0\1\7\42\0"+
    "\1\u0130\34\0\1\7\3\0\2\7\23\0\1\7\3\0"+
    "\3\7\1\u0131\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\1\7\42\0\1\u0132\34\0\1\7"+
    "\3\0\2\7\23\0\1\7\3\0\3\7\1\u0133\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12932];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\2\1\1\11\2\1\1\11\2\1"+
    "\15\11\13\1\1\11\13\1\2\0\1\11\3\0\1\11"+
    "\3\0\12\1\3\11\6\1\2\0\4\1\1\0\12\1"+
    "\1\11\1\0\13\1\1\11\1\1\4\0\12\1\1\0"+
    "\11\1\2\0\5\1\1\11\3\1\1\0\5\1\1\0"+
    "\3\1\1\0\2\1\1\0\2\1\2\0\1\1\1\0"+
    "\14\1\1\0\1\1\1\11\3\1\1\0\3\1\2\0"+
    "\5\1\1\11\1\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\3\1\1\11"+
    "\7\1\1\11\3\1\1\11\3\1\2\0\4\1\1\11"+
    "\5\1\1\0\1\1\1\11\4\1\1\11\2\1\1\0"+
    "\5\1\1\11\1\1\1\0\2\1\2\11\10\1\1\0"+
    "\2\1\1\0\4\1\1\0\4\1\1\11\2\1\1\11"+
    "\3\1\1\11\5\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
  	yyline=1;
	yychar=1;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 238) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            }
          case 78: break;
          case 2: 
            { 
            }
          case 79: break;
          case 3: 
            { return new Symbol(sym.ENTERO,yyline,yychar, yytext());
            }
          case 80: break;
          case 4: 
            { return new Symbol(sym.PNT,yyline,yychar, yytext());
            }
          case 81: break;
          case 5: 
            { return new Symbol(sym.ID,yyline,yychar, yytext());
            }
          case 82: break;
          case 6: 
            { yychar=1;
            }
          case 83: break;
          case 7: 
            { return new Symbol(sym.POR,yyline,yychar, yytext());
            }
          case 84: break;
          case 8: 
            { return new Symbol(sym.MAS,yyline,yychar, yytext());
            }
          case 85: break;
          case 9: 
            { return new Symbol(sym.PNTCOMA,yyline,yychar, yytext());
            }
          case 86: break;
          case 10: 
            { return new Symbol(sym.DSPUNTOS,yyline,yychar, yytext());
            }
          case 87: break;
          case 11: 
            { return new Symbol(sym.COMA,yyline,yychar, yytext());
            }
          case 88: break;
          case 12: 
            { return new Symbol(sym.PARIZQ,yyline,yychar, yytext());
            }
          case 89: break;
          case 13: 
            { return new Symbol(sym.PARDER,yyline,yychar, yytext());
            }
          case 90: break;
          case 14: 
            { return new Symbol(sym.LLAVEIZQ,yyline,yychar, yytext());
            }
          case 91: break;
          case 15: 
            { return new Symbol(sym.LLAVEDER,yyline,yychar, yytext());
            }
          case 92: break;
          case 16: 
            { return new Symbol(sym.MENOS,yyline,yychar, yytext());
            }
          case 93: break;
          case 17: 
            { return new Symbol(sym.DIVIDIDO,yyline,yychar, yytext());
            }
          case 94: break;
          case 18: 
            { return new Symbol(sym.MODULO,yyline,yychar, yytext());
            }
          case 95: break;
          case 19: 
            { return new Symbol(sym.POTENCIA,yyline,yychar, yytext());
            }
          case 96: break;
          case 20: 
            { return new Symbol(sym.MENOR,yyline,yychar, yytext());
            }
          case 97: break;
          case 21: 
            { return new Symbol(sym.MAYOR,yyline,yychar, yytext());
            }
          case 98: break;
          case 22: 
            { return new Symbol(sym.IGUAL,yyline,yychar, yytext());
            }
          case 99: break;
          case 23: 
            { return new Symbol(sym.CHAR,yyline,yychar, yytext());
            }
          case 100: break;
          case 24: 
            { return new Symbol(sym.CADENA,yyline,yychar, yytext());
            }
          case 101: break;
          case 25: 
            { return new Symbol(sym.TO,yyline,yychar, yytext());
            }
          case 102: break;
          case 26: 
            { return new Symbol(sym.DIFERENTE,yyline,yychar, yytext());
            }
          case 103: break;
          case 27: 
            { return new Symbol(sym.MENORIGUAL,yyline,yychar, yytext());
            }
          case 104: break;
          case 28: 
            { return new Symbol(sym.MAYORIGUAL,yyline,yychar, yytext());
            }
          case 105: break;
          case 29: 
            { return new Symbol(sym.DO,yyline,yychar, yytext());
            }
          case 106: break;
          case 30: 
            { return new Symbol(sym.OR,yyline,yychar, yytext());
            }
          case 107: break;
          case 31: 
            { return new Symbol(sym.OF,yyline,yychar, yytext());
            }
          case 108: break;
          case 32: 
            { return new Symbol(sym.IF,yyline,yychar, yytext());
            }
          case 109: break;
          case 33: 
            { return new Symbol(sym.DECIMAL,yyline,yychar, yytext());
            }
          case 110: break;
          case 34: 
            { return new Symbol(sym.END,yyline,yychar, yytext());
            }
          case 111: break;
          case 35: 
            { return new Symbol(sym.FOR,yyline,yychar, yytext());
            }
          case 112: break;
          case 36: 
            { return new Symbol(sym.AND,yyline,yychar, yytext());
            }
          case 113: break;
          case 37: 
            { return new Symbol(sym.NOT,yyline,yychar, yytext());
            }
          case 114: break;
          case 38: 
            { return new Symbol(sym.NOR,yyline,yychar, yytext());
            }
          case 115: break;
          case 39: 
            { return new Symbol(sym.NIL,yyline,yychar, yytext());
            }
          case 116: break;
          case 40: 
            { return new Symbol(sym.VAR,yyline,yychar, yytext());
            }
          case 117: break;
          case 41: 
            { return new Symbol(sym.TRUE,yyline,yychar, yytext());
            }
          case 118: break;
          case 42: 
            { return new Symbol(sym.THEN,yyline,yychar, yytext());
            }
          case 119: break;
          case 43: 
            { return new Symbol(sym.TYPE,yyline,yychar, yytext());
            }
          case 120: break;
          case 44: 
            { return new Symbol(sym.REAL,yyline,yychar, yytext());
            }
          case 121: break;
          case 45: 
            { return new Symbol(sym.READ,yyline,yychar, yytext());
            }
          case 122: break;
          case 46: 
            { return new Symbol(sym.ELSE,yyline,yychar, yytext());
            }
          case 123: break;
          case 47: 
            { return new Symbol(sym.NAND,yyline,yychar, yytext());
            }
          case 124: break;
          case 48: 
            { return new Symbol(sym.CASE,yyline,yychar, yytext());
            }
          case 125: break;
          case 49: 
            { return new Symbol(sym.WORD,yyline,yychar, yytext());
            }
          case 126: break;
          case 50: 
            { return new Symbol(sym.TRUNK,yyline,yychar, yytext());
            }
          case 127: break;
          case 51: 
            { return new Symbol(sym.ROUND,yyline,yychar, yytext());
            }
          case 128: break;
          case 52: 
            { return new Symbol(sym.UNTIL,yyline,yychar, yytext());
            }
          case 129: break;
          case 53: 
            { return new Symbol(sym.FALSE,yyline,yychar, yytext());
            }
          case 130: break;
          case 54: 
            { return new Symbol(sym.ARRAY,yyline,yychar, yytext());
            }
          case 131: break;
          case 55: 
            { return new Symbol(sym.CONST,yyline,yychar, yytext());
            }
          case 132: break;
          case 56: 
            { return new Symbol(sym.BEGIN,yyline,yychar, yytext());
            }
          case 133: break;
          case 57: 
            { return new Symbol(sym.WRITE,yyline,yychar, yytext());
            }
          case 134: break;
          case 58: 
            { return new Symbol(sym.WHILE,yyline,yychar, yytext());
            }
          case 135: break;
          case 59: 
            { return new Symbol(sym.RECORD,yyline,yychar, yytext());
            }
          case 136: break;
          case 60: 
            { return new Symbol(sym.REPEAT,yyline,yychar, yytext());
            }
          case 137: break;
          case 61: 
            { return new Symbol(sym.EQUALS,yyline,yychar, yytext());
            }
          case 138: break;
          case 62: 
            { return new Symbol(sym.LENGTH,yyline,yychar, yytext());
            }
          case 139: break;
          case 63: 
            { return new Symbol(sym.STRING,yyline,yychar, yytext());
            }
          case 140: break;
          case 64: 
            { return new Symbol(sym.SIZEOF,yyline,yychar, yytext());
            }
          case 141: break;
          case 65: 
            { return new Symbol(sym.DOWNTO,yyline,yychar, yytext());
            }
          case 142: break;
          case 66: 
            { return new Symbol(sym.CHARAT,yyline,yychar, yytext());
            }
          case 143: break;
          case 67: 
            { return new Symbol(sym.MALLOC,yyline,yychar, yytext());
            }
          case 144: break;
          case 68: 
            { return new Symbol(sym.REPLACE,yyline,yychar, yytext());
            }
          case 145: break;
          case 69: 
            { return new Symbol(sym.DEFAULT,yyline,yychar, yytext());
            }
          case 146: break;
          case 70: 
            { return new Symbol(sym.PROGRAM,yyline,yychar, yytext());
            }
          case 147: break;
          case 71: 
            { return new Symbol(sym.INTEGER,yyline,yychar, yytext());
            }
          case 148: break;
          case 72: 
            { return new Symbol(sym.BOOLEAN,yyline,yychar, yytext());
            }
          case 149: break;
          case 73: 
            { return new Symbol(sym.WRITELN,yyline,yychar, yytext());
            }
          case 150: break;
          case 74: 
            { return new Symbol(sym.FUNCTION,yyline,yychar, yytext());
            }
          case 151: break;
          case 75: 
            { return new Symbol(sym.PROCEDURE,yyline,yychar, yytext());
            }
          case 152: break;
          case 76: 
            { return new Symbol(sym.TOUPPERCASE,yyline,yychar, yytext());
            }
          case 153: break;
          case 77: 
            { return new Symbol(sym.TOLOWERCASE,yyline,yychar, yytext());
            }
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
