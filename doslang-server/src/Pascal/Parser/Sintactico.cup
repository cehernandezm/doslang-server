package Pascal.Parser;

import java_cup.runtime.*;
import Pascal.Analisis.*;
import Pascal.Analisis.TipoDato.*;
import Pascal.Componentes.*;
import java.util.LinkedList;

parser code
{:

	public static LinkedList<Instruccion> lista;

	

	public  void setLista(LinkedList<Instruccion> listaG){
		lista = listaG;
	}

	public  LinkedList<Instruccion> getLista(){
		return lista;
	}
	
	public static int cont=0;
	public void syntax_error(Symbol s){
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
	}

	 public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }
:}

terminal UMENOS;
terminal MAS,MENOS,POR,DIVIDIDO,MODULO,POTENCIA;
terminal SALUDO,ID,ENTERO,DECIMAL;
terminal PARIZQ,PARDER,PNTCOMA,DSPUNTOS,COMA;

terminal CHAR,CADENA,TRUE,FALSE;

terminal MAYOR,MENOR,MAYORIGUAL,MENORIGUAL, IGUAL, DIFERENTE;
terminal AND, OR, NAND, NOR,NOT;
terminal RNOT;

terminal PROGRAM,CONST;

terminal INTEGER,BOOLEAN,REAL,STRING,WORD;



non terminal LinkedList<Instruccion> inicio;

non terminal Expresion expresion;

non terminal insNombrePrograma;

non terminal Tipo tipoDato;
non terminal LinkedList<String> listaID;

//------------------------------------------------------------ NO TERMINALES PARA CONSTANTES ---------------------------------------
non terminal LinkedList<Declaracion> listaDeclaracionConstantes;
non terminal Declaracion declaracionConstante;
non terminal LinkedList<Declaracion> insConstantes;


//----------------------------------------------------------------------- PRECEDENCIA RELACIONALES ----------------------------------------------------
precedence left OR;
precedence left NAND, NOR;
precedence left AND;
precedence right RNOT;
precedence left MAYOR,MENOR,MAYORIGUAL,MENORIGUAL, IGUAL,DIFERENTE;

//----------------------------------------------------------------------- PRECEDENCIA OPERADORES ------------------------------------------------------
precedence left MAS,MENOS;
precedence left POR,DIVIDIDO,MODULO;
precedence left POTENCIA;
precedence right UMENOS;


start with inicio;


inicio ::= insNombrePrograma insConstantes:a										{: RESULT = new LinkedList<Instruccion>(); RESULT.addAll(a); setLista(RESULT); :}
          ;




//------------------------------------------------------------ NOMBRE DE UN PROGRAMA ---------------------------------------------------------
insNombrePrograma ::= PROGRAM ID PNTCOMA
                    ;

//--------------------------------------------------------- CONSTANTE | FUNCIONES ---------------------------------------------------------
insConstantes ::= CONST listaDeclaracionConstantes:a 					{:	RESULT = a; :}			 
				| error PNTCOMA 										{:  RESULT = new LinkedList<Declaracion>(); :}
				;


listaDeclaracionConstantes ::= listaDeclaracionConstantes:a declaracionConstante:b          {: RESULT = a; RESULT.addLast(b); :} 
						     | declaracionConstante:a 									    {: RESULT = new LinkedList<Declaracion>(); RESULT.addLast(a);  :}
						     ;


declaracionConstante ::= listaID:a DSPUNTOS tipoDato:b IGUAL expresion:c PNTCOMA   			{: RESULT = new Declaracion(c,bleft,bright,true,b,a); :} 					
					   ;


//---------------------------------------------- TIPOS DE DATOS -------------------------------------------------------------------------
tipoDato ::= INTEGER 								{: RESULT = Tipo.INT; :}
		   | BOOLEAN 								{: RESULT = Tipo.BOOLEAN; :}
		   | REAL 									{: RESULT = Tipo.DOUBLE; :}
		   | CHAR 									{: RESULT = Tipo.CHAR; :}
		   | WORD 									{: RESULT = Tipo.WORD; :}
		   | STRING 								{: RESULT = Tipo.STRING; :}

		   ;

//------------------------------------------------ LISTAS DE ID -------------------------------------------------------------------------
listaID ::= listaID:a COMA ID:b 						{: RESULT = a; RESULT.addLast(b.toString()); :}
	      | ID:a 									    {: RESULT = new LinkedList<String>(); RESULT.addLast(a.toString()); :}
	      ;


expresion ::= expresion:a MAS expresion:b 											 {: RESULT = new Expresion(a,b,Operacion.SUMA,aleft,aright);  :} 
			| expresion:a MENOS expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.RESTA,aleft,aright); :}
			| expresion:a POR expresion:b 										     {: RESULT = new Expresion(a,b,Operacion.MULTIPLICACION,aleft,aright); :}
			| expresion:a DIVIDIDO expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.DIVISION,aleft,aright); :}	 
			| expresion:a MODULO expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.MODULO,aleft,aright); :}
			| expresion:a POTENCIA expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.POTENCIA,aleft,aright); :}
			| expresion:a MAYOR expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.MAYOR,aleft,aright); :}
			| expresion:a MENOR expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.MENOR,aleft,aright); :}
			| expresion:a MAYORIGUAL expresion:b 								     {: RESULT = new Expresion(a,b,Operacion.MAYORIGUAL,aleft,aright); :}
			| expresion:a MENORIGUAL expresion:b 								     {: RESULT = new Expresion(a,b,Operacion.MENORIGUAL,aleft,aright); :}
			| expresion:a IGUAL expresion:b 								         {: RESULT = new Expresion(a,b,Operacion.IGUAL,aleft,aright); :}
			| expresion:a DIFERENTE expresion:b 								     {: RESULT = new Expresion(a,b,Operacion.DIFERENTE,aleft,aright); :}
			| expresion:a AND expresion:b 		  	 							     {: RESULT = new Expresion(a,b,Operacion.AND,aleft,aright); :}
			| expresion:a OR expresion:b 		  	 							     {: RESULT = new Expresion(a,b,Operacion.OR,aleft,aright); :}
			| expresion:a NAND expresion:b 		  	 							     {: RESULT = new Expresion(a,b,Operacion.NAND,aleft,aright); :}
			| expresion:a NOR expresion:b 		  	 							     {: RESULT = new Expresion(a,b,Operacion.NOR,aleft,aright); :}
		    |             NOT expresion:a 											 {: RESULT = new Expresion(a,null,Operacion.NOT,aleft,aright); :} %prec RNOT
		    | PARIZQ expresion:a PARDER                                              {: RESULT = a; :}
			| ENTERO:a 																 {: RESULT = new Expresion(a,Tipo.INT,aleft,aright); :}
			| DECIMAL:a 															 {: RESULT = new Expresion(a,Tipo.DOUBLE,aleft,aright); :}
			| CHAR:a 																 {: RESULT = new Expresion(a,Tipo.CHAR,aleft,aright); :}
			| CADENA:a 															     {: RESULT = new Expresion(a,Tipo.STRING,aleft,aright); :}
			| TRUE:a															     {: RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); :}
			| FALSE:a 															     {: RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); :}
			;


