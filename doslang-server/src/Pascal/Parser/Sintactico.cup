package Pascal.Parser;

import java_cup.runtime.*;
import Pascal.Analisis.*;
import Pascal.Analisis.TipoDato.*;
import Pascal.Componentes.*;
import Pascal.Componentes.UserTypes.*;
import Pascal.Componentes.Arreglos.*;
import Pascal.Componentes.Registros.*;
import java.util.LinkedList;

parser code
{:

	public static LinkedList<Instruccion> lista;

	

	public  void setLista(LinkedList<Instruccion> listaG){
		lista = listaG;
	}

	public  LinkedList<Instruccion> getLista(){
		return lista;
	}
	
	public static int cont=0;
	public void syntax_error(Symbol s){
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
	}

	 public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }
:}

terminal UMENOS;
terminal MAS,MENOS,POR,DIVIDIDO,MODULO,POTENCIA,PNT;
terminal SALUDO,ID,ENTERO,DECIMAL,NIL;
terminal PARIZQ,PARDER,PNTCOMA,DSPUNTOS,COMA;
terminal LLAVEIZQ,LLAVEDER;

terminal CHAR,CADENA,TRUE,FALSE;

terminal MAYOR,MENOR,MAYORIGUAL,MENORIGUAL, IGUAL, DIFERENTE;
terminal AND, OR, NAND, NOR,NOT;
terminal RNOT;

terminal PROGRAM,CONST,TYPE,VAR,BEGIN,END;

terminal INTEGER,BOOLEAN,REAL,STRING,WORD,NILL;

terminal WRITELN,WRITE;

terminal CHARAT,LENGTH,REPLACE,TOLOWERCASE;

terminal ARRAY,OF;

terminal RECORD,SIZEOF,MALLOC;


non terminal LinkedList<Instruccion> inicio;

non terminal Expresion expresion;

non terminal insNombrePrograma;

non terminal Type tipoDato;
non terminal LinkedList<String> listaID;

//------------------------------------------------------------ NO TERMINALES PARA CONSTANTES ---------------------------------------
non terminal LinkedList<Instruccion> listaDeclaracionConstantes;
non terminal Instruccion declaracionConstante;
non terminal LinkedList<Instruccion> insConstantes;
//------------------------------------------------------------ NO TERMINALES PARA USERTYPES --------------------------------------------
non terminal LinkedList<Instruccion> insType;
non terminal TypeDeclaration equivalencia;
non terminal LinkedList<Instruccion> listaType;
//----------------------------------------------------------- NO TERMINALES PARA VARIABLES -------------------------------------
non terminal LinkedList<Instruccion> insVar;
non terminal LinkedList<Instruccion> listaDeclaracionVariables;
non terminal Instruccion declaracionVariable;

//------------------------------------------------------------ NO TERMINALES PARA CUERPO DE PROGRAMA -----------------------------
non terminal LinkedList<Instruccion> instruccionesPrincipal;
non terminal Instruccion instruccionPrincipal;
non terminal LinkedList<Instruccion> cuerpoPrincipal;

//---------------------------------------------------------- NO TERMINALES PARA WRITELN -----------------------------------------------
non terminal Writeln insWrite;
non terminal Expresion listaExpresiones;

//---------------------------------------------------------- NO TERMINALES PARA ASIGNACION ---------------------------------------------
non terminal Instruccion insAsignacion;

//--------------------------------------------------------- NO TERMINALES PARA ARREGLOS -----------------------------------------------
non terminal Type insArray;
non terminal LinkedList<Dimension> dimensionList;
non terminal Dimension dimension;
non terminal LinkedList<Expresion> listaAcceso;

//--------------------------------------------------------- NO TERMINALES PARA REGISTROS ----------------------------------------------
non terminal Type insRegistro;
non terminal LinkedList<Atributo> listaAtributos;

//----------------------------------------------------------------------- PRECEDENCIA RELACIONALES ----------------------------------------------------
precedence left OR;
precedence left NAND, NOR;
precedence left AND;
precedence right RNOT;
precedence left MAYOR,MENOR,MAYORIGUAL,MENORIGUAL, IGUAL,DIFERENTE;

//----------------------------------------------------------------------- PRECEDENCIA OPERADORES ------------------------------------------------------
precedence left MAS,MENOS;
precedence left POR,DIVIDIDO,MODULO;
precedence left POTENCIA;
precedence left PNT;
precedence right UMENOS;



start with inicio;


inicio ::= insNombrePrograma insType:a										{: RESULT = new LinkedList<Instruccion>(); RESULT.addAll(a); setLista(RESULT); :}
          ;




//------------------------------------------------------------ NOMBRE DE UN PROGRAMA ---------------------------------------------------------
insNombrePrograma ::= PROGRAM ID PNTCOMA
                    ;

//--------------------------------------------------------- CONSTANTE | CONSTANTE VAR ---------------------------------------------------------
insConstantes ::= CONST listaDeclaracionConstantes:a 					{: RESULT = a; :}
				| CONST listaDeclaracionConstantes:a insVar:b 			{: RESULT = a; RESULT.addAll(b); :}
				| insVar:a 							                    {: RESULT = a; :}
				;

listaDeclaracionConstantes ::= listaDeclaracionConstantes:a declaracionConstante:b          {: RESULT = a; RESULT.addLast(b); :} 
						     | declaracionConstante:a 									    {: RESULT = new LinkedList<Instruccion>(); RESULT.addLast(a);  :}
						     ;


declaracionConstante ::= listaID:a DSPUNTOS tipoDato:b IGUAL expresion:c PNTCOMA   			{: RESULT = new Declaracion(c,bleft,bright,true,b,a); :}
					   | listaID:a DSPUNTOS tipoDato:b PNTCOMA   			                {: RESULT = new Declaracion(null,bleft,bright,true,b,a); :}
					   | ID:a IGUAL PARIZQ listaID:b PARDER PNTCOMA  						{: RESULT = new Enumerador(a.toString(),b,aleft,aright,true); :} 					
					   ;

//--------------------------------------------------------- VAR | VAR CUERPO ----------------------------------------------------------------

insVar ::= VAR listaDeclaracionVariables:a 							{: RESULT = a; :}
		 | VAR listaDeclaracionVariables:a cuerpoPrincipal:b        {: RESULT = a; RESULT.addAll(b); :}
		 | cuerpoPrincipal:a 									    {: RESULT = a; :}
		 ;

listaDeclaracionVariables ::= listaDeclaracionVariables:a declaracionVariable:b          	{: RESULT = a; RESULT.addLast(b); :} 
						    | declaracionVariable:a 									    {: RESULT = new LinkedList<Instruccion>(); RESULT.addLast(a);  :}
						    ;


declaracionVariable ::= listaID:a DSPUNTOS tipoDato:b IGUAL expresion:c PNTCOMA   			{: RESULT = new Declaracion(c,bleft,bright,false,b,a); :}
					  | listaID:a DSPUNTOS tipoDato:b PNTCOMA  								{: RESULT = new Declaracion(null,bleft,bright,false,b,a); :}
					  | ID:a IGUAL PARIZQ listaID:b PARDER PNTCOMA  						{: RESULT = new Enumerador(a.toString(),b,aleft,aright,false); :} 					
				
					  ;
//--------------------------------------------------------- TYPE | TYPE CONSTANTES ---------------------------------------------------------------
insType ::= TYPE listaType:a 										{: RESULT = a; :}
		  | TYPE listaType:a insConstantes:b 				        {: RESULT = a; RESULT.addAll(b); :}
		  | insConstantes:a 				                        {: RESULT = a; :}
		  | error PNTCOMA 											{: RESULT = new LinkedList<Instruccion>(); :}
          ;				

listaType ::= listaType:a equivalencia:b 							{: RESULT = a; RESULT.addLast(b); :}
			| equivalencia:a 										{: RESULT = new LinkedList<>(); RESULT.addLast(a); :}
			;  								   

equivalencia ::= listaID:a IGUAL tipoDato:b PNTCOMA 					{: RESULT = new TypeDeclaration(a,aleft,aright,b); :}
			   | listaID:a PNTCOMA									    {: RESULT = new TypeDeclaration(a,aleft,aright,null); :}
			   ;





//---------------------------------------------- TIPOS DE DATOS -------------------------------------------------------------------------
tipoDato ::= INTEGER:a 									{: RESULT = new Type(a.toString(),Tipo.INT); :}
		   | BOOLEAN:a 									{: RESULT = new Type(a.toString(),Tipo.BOOLEAN); :}
		   | REAL:a 									{: RESULT = new Type(a.toString(),Tipo.DOUBLE); :}
		   | CHAR:a 									{: RESULT = new Type(a.toString(),Tipo.CHAR); :}
		   | WORD:a 									{: RESULT = new Type(a.toString(),Tipo.WORD); :}
		   | STRING:a 									{: RESULT = new Type(a.toString(),Tipo.STRING); :}
		   | ID:a 										{: RESULT = new Type(a.toString(),Tipo.ID); :}
		   | insArray:a 								{: RESULT = a; :}
		   | insRegistro:a 								{: RESULT = a; :}
		   ;

//------------------------------------------- ARREGLOS -----------------------------------------------------------------------------------

insArray ::= ARRAY LLAVEIZQ dimensionList:a LLAVEDER OF tipoDato:b
			{:

				if(b.getTipo() == Tipo.ARRAY){
					Arreglo temp = (Arreglo)b.getValor();
					LinkedList<Dimension> lista = temp.getDimensiones();
					a.addAll(lista);
					
					Type type = new Type(Tipo.ARRAY,b.getTipoArray());
					type.setValor(new Arreglo(a,aleft,aright,b.getTipoArray())); 
					RESULT = type;
				}
				else {
					Type type = new Type(Tipo.ARRAY,b.getTipo());
					type.setValor(new Arreglo(a,aleft,aright,b.getTipo())); 
					RESULT = type;
				}

			:}
		   ;

dimensionList ::= dimensionList:a COMA dimension:b                  {: RESULT = a; RESULT.addLast(b); :} 
			    | dimension:a 										{: RESULT = new LinkedList<>(); RESULT.addLast(a);	:}
			    ;

dimension ::= expresion:a PNT PNT  expresion:b 						{: RESULT = new Dimension(a,b,aleft,aright); :} 
			| ID:a 													{: RESULT = new Dimension(a.toString(),aleft,aright); :} 
			;

//---------------------------------------------- REGISTROS ------------------------------------------------------------------------------
insRegistro ::= RECORD listaAtributos:a END PNTCOMA 				{: RESULT = new Type("",Tipo.REGISTRO); RESULT.setValor(new Registro(a,aleft,aright)); :}
			   ;

listaAtributos ::= listaAtributos:a ID:b DSPUNTOS tipoDato:c PNTCOMA			{: RESULT = a; RESULT.addLast(new Atributo(b.toString(),c)); :}
				 | ID:a DSPUNTOS tipoDato:b PNTCOMA						        {: RESULT = new LinkedList<>(); RESULT.addLast(new Atributo(a.toString(),b)); :}
				 ; 
//------------------------------------------------ LISTAS DE ID -------------------------------------------------------------------------
listaID ::= listaID:a COMA ID:b 						{: RESULT = a; RESULT.addLast(b.toString().toLowerCase()); :}
	      | ID:a 									    {: RESULT = new LinkedList<String>(); RESULT.addLast(a.toString()); :}
	      ;


expresion ::= expresion:a MAS expresion:b 											 {: RESULT = new Expresion(a,b,Operacion.SUMA,aleft,aright);  :} 
			| expresion:a MENOS expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.RESTA,aleft,aright); :}
			| expresion:a POR expresion:b 										     {: RESULT = new Expresion(a,b,Operacion.MULTIPLICACION,aleft,aright); :}
			| expresion:a DIVIDIDO expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.DIVISION,aleft,aright); :}	 
			| expresion:a MODULO expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.MODULO,aleft,aright); :}
			| expresion:a POTENCIA expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.POTENCIA,aleft,aright); :}
			| expresion:a MAYOR expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.MAYOR,aleft,aright); :}
			| expresion:a MENOR expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.MENOR,aleft,aright); :}
			| expresion:a MAYORIGUAL expresion:b 								     {: RESULT = new Expresion(a,b,Operacion.MAYORIGUAL,aleft,aright); :}
			| expresion:a MENORIGUAL expresion:b 								     {: RESULT = new Expresion(a,b,Operacion.MENORIGUAL,aleft,aright); :}
			| expresion:a IGUAL expresion:b 								         {: RESULT = new Expresion(a,b,Operacion.IGUAL,aleft,aright); :}
			| expresion:a DIFERENTE expresion:b 								     {: RESULT = new Expresion(a,b,Operacion.DIFERENTE,aleft,aright); :}
			| expresion:a AND expresion:b 		  	 							     {: RESULT = new Expresion(a,b,Operacion.AND,aleft,aright); :}
			| expresion:a OR expresion:b 		  	 							     {: RESULT = new Expresion(a,b,Operacion.OR,aleft,aright); :}
			| expresion:a NAND expresion:b 		  	 							     {: RESULT = new Expresion(a,b,Operacion.NAND,aleft,aright); :}
			| expresion:a NOR expresion:b 		  	 							     {: RESULT = new Expresion(a,b,Operacion.NOR,aleft,aright); :}
		    |             NOT expresion:a 											 {: RESULT = new Expresion(a,null,Operacion.NOT,aleft,aright); :} %prec RNOT
		    | PARIZQ expresion:a PARDER                                              {: RESULT = a; :}
			| ID:a LLAVEIZQ listaAcceso:b LLAVEDER 								     {: RESULT = new Expresion(Operacion.ACCESOARRAY,aleft,aright,a.toString(),b); :}
			| SIZEOF PARIZQ ID:a PARDER 											 {: RESULT = new Expresion(Operacion.SIZEOF,aleft,aright,a.toString(),null); :}
			| MALLOC PARIZQ expresion:a PARDER 										 {: LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.MALLOC,aleft,aright,"",lista); :}
			| LENGTH PARIZQ expresion:a PARDER 					 					 {: LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.LENGTH,aleft,aright,"",lista); :}
			| TOLOWERCASE PARIZQ expresion:a PARDER 					 			 {: LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TOLOWERCASE,aleft,aright,"",lista); :}
			| REPLACE PARIZQ expresion:a COMA expresion:b PARDER 				     {: RESULT = new Expresion(a,b,Operacion.REPLACE,aleft,aright); :}
			| ENTERO:a 																 {: RESULT = new Expresion(a,Tipo.INT,aleft,aright); :}
			| DECIMAL:a 															 {: RESULT = new Expresion(a,Tipo.DOUBLE,aleft,aright); :}
			| CHAR:a 																 {: RESULT = new Expresion(a,Tipo.CHAR,aleft,aright); :}
			| CADENA:a 															     {: RESULT = new Expresion(a,Tipo.STRING,aleft,aright); :}
			| TRUE:a															     {: RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); :}
			| FALSE:a 															     {: RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); :}
			| ID:a 															         {: RESULT = new Expresion(a,Tipo.ID,aleft,aright); :}
			| NIL:a 															     {: RESULT = new Expresion(a,Tipo.NULL,aleft,aright); :}
			| CHARAT PARIZQ expresion:a COMA expresion:b PARDER 					 {: RESULT = new Expresion(a,b,Operacion.CHARAT,aleft,aright); :}
			| expresion:a PNT ID:b 													 {: RESULT = new Expresion(a,null,Operacion.ACCESOID,aleft,aright,b.toString()); :}
			;


//----------------------------------------------------- INSTRUCCIONES DEL CUERPO PRINCIPAL --------------------------------------------------

cuerpoPrincipal ::= BEGIN instruccionesPrincipal:a END PNT                   {: RESULT = a; :}
				  | BEGIN END PNT 											 {: RESULT = new LinkedList<>(); :}
				  ;

instruccionesPrincipal ::= instruccionesPrincipal:a instruccionPrincipal:b       {: RESULT = a; RESULT.addLast(b);  :}
						 | instruccionPrincipal:a 								 {: RESULT = new LinkedList<>(); RESULT.addLast(a); :}
						 ;

instruccionPrincipal ::= insWrite:a PNTCOMA 										{: RESULT = a; :}
					   | insAsignacion:a PNTCOMA 								    {: RESULT = a; :}
 					   ;
					   


//---------------------------------------------------------------- WRITE -----------------------------------------------------------------------

insWrite ::= WRITELN PARIZQ listaExpresiones:a PARDER 							{: RESULT = new Writeln(a,true); :}
		   | WRITE PARIZQ listaExpresiones:a PARDER 							{: RESULT = new Writeln(a,false); :}
		   ;

listaExpresiones ::= listaExpresiones:a COMA expresion:b  				{: RESULT = new Expresion(a,b,Operacion.SUMA,aleft,aright);	:}
				   | expresion:a 										{: RESULT = a; :}
				   ;


//--------------------------------------------------------------- ASIGNACION -------------------------------------------------------------------

insAsignacion ::= ID:a DSPUNTOS IGUAL expresion:b 										            {: RESULT = new Asignacion(a.toString(),b,aleft,aright); :}
			    | ID:a LLAVEIZQ listaAcceso:b LLAVEDER DSPUNTOS IGUAL expresion:c 					{: RESULT = new AccesoArreglo(a.toString(),c,b,aleft,aright); :}
			    | expresion:a PNT ID:b DSPUNTOS IGUAL expresion:c 									{: RESULT = new AccesoRegistro(a,c,b.toString(),aleft,aright); :}
                ;

listaAcceso ::= listaAcceso:a COMA expresion:b  				    {: RESULT = a; RESULT.addLast(b); :}
			  | expresion:a 										{: RESULT = new LinkedList<>(); RESULT.addLast(a); :}
			  ;