package Pascal.Parser;

import java_cup.runtime.*;
import Pascal.Analisis.*;
import Pascal.Analisis.TipoDato.*;
import Pascal.Componentes.*;
import java.util.LinkedList;

parser code
{:

	public static LinkedList<Instruccion> lista;

	

	public  void setLista(LinkedList<Instruccion> listaG){
		lista = listaG;
	}

	public  LinkedList<Instruccion> getLista(){
		return lista;
	}
	
	public static int cont=0;
	public void syntax_error(Symbol s){
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
	}

	 public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }
:}

terminal UMENOS;
terminal MAS,MENOS,POR,DIVIDIDO,MODULO,POTENCIA;
terminal SALUDO,ID,ENTERO,DECIMAL;
terminal PARIZQ,PARDER;

terminal CHAR,CADENA,TRUE,FALSE;

terminal MAYOR,MENOR,MAYORIGUAL,MENORIGUAL, IGUAL, DIFERENTE;
terminal AND, OR, NAND, NOR,NOT;
terminal RNOT;

non terminal inicio;

non terminal Expresion expresion;


//----------------------------------------------------------------------- PRECEDENCIA RELACIONALES ----------------------------------------------------
precedence left OR;
precedence left NAND, NOR;
precedence left AND;
precedence right RNOT;
precedence left MAYOR,MENOR,MAYORIGUAL,MENORIGUAL, IGUAL,DIFERENTE;

//----------------------------------------------------------------------- PRECEDENCIA OPERADORES ------------------------------------------------------
precedence left MAS,MENOS;
precedence left POR,DIVIDIDO,MODULO;
precedence left POTENCIA;
precedence right UMENOS;


start with inicio;


inicio ::=  expresion : a 													{: 
																				LinkedList<Instruccion> ins = new LinkedList<Instruccion>();
																				ins.addLast(a);	
																				parser.lista = ins; 
																			:} 
		  	;


expresion ::= expresion:a MAS expresion:b 											 {: RESULT = new Expresion(a,b,Operacion.SUMA,aleft,aright);  :} 
			| expresion:a MENOS expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.RESTA,aleft,aright); :}
			| expresion:a POR expresion:b 										     {: RESULT = new Expresion(a,b,Operacion.MULTIPLICACION,aleft,aright); :}
			| expresion:a DIVIDIDO expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.DIVISION,aleft,aright); :}	 
			| expresion:a MODULO expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.MODULO,aleft,aright); :}
			| expresion:a POTENCIA expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.POTENCIA,aleft,aright); :}
			| expresion:a MAYOR expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.MAYOR,aleft,aright); :}
			| expresion:a MENOR expresion:b 										 {: RESULT = new Expresion(a,b,Operacion.MENOR,aleft,aright); :}
			| expresion:a MAYORIGUAL expresion:b 								     {: RESULT = new Expresion(a,b,Operacion.MAYORIGUAL,aleft,aright); :}
			| expresion:a MENORIGUAL expresion:b 								     {: RESULT = new Expresion(a,b,Operacion.MENORIGUAL,aleft,aright); :}
			| expresion:a IGUAL expresion:b 								         {: RESULT = new Expresion(a,b,Operacion.IGUAL,aleft,aright); :}
			| expresion:a DIFERENTE expresion:b 								     {: RESULT = new Expresion(a,b,Operacion.DIFERENTE,aleft,aright); :}
			| expresion:a AND expresion:b 		  	 							     {: RESULT = new Expresion(a,b,Operacion.AND,aleft,aright); :}
			| expresion:a OR expresion:b 		  	 							     {: RESULT = new Expresion(a,b,Operacion.OR,aleft,aright); :}
			| expresion:a NAND expresion:b 		  	 							     {: RESULT = new Expresion(a,b,Operacion.NAND,aleft,aright); :}
			| expresion:a NOR expresion:b 		  	 							     {: RESULT = new Expresion(a,b,Operacion.NOR,aleft,aright); :}
		    |             NOT expresion:a 											 {: RESULT = new Expresion(a,null,Operacion.NOT,aleft,aright); :} %prec RNOT
		    | PARIZQ expresion:a PARDER                                              {: RESULT = a; :}
			| ENTERO:a 																 {: RESULT = new Expresion(a,Tipo.INT,aleft,aright); :}
			| DECIMAL:a 															 {: RESULT = new Expresion(a,Tipo.DOUBLE,aleft,aright); :}
			| CHAR:a 																 {: RESULT = new Expresion(a,Tipo.CHAR,aleft,aright); :}
			| CADENA:a 															     {: RESULT = new Expresion(a,Tipo.STRING,aleft,aright); :}
			| TRUE:a															     {: RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); :}
			| FALSE:a 															     {: RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); :}
			;


