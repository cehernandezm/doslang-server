/* The following code was generated by JFlex 1.6.1 */

package Pascal.Parser;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexico.flex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TAG = 2;
  public static final int ATTR = 4;
  public static final int DOC = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\11\1\16\1\16\1\15\22\0\1\5\1\0\1\13"+
    "\2\0\1\33\1\0\1\10\1\14\1\17\1\21\1\24\1\27\1\32"+
    "\1\3\1\22\12\2\1\26\1\25\1\41\1\50\1\42\2\0\1\44"+
    "\1\62\1\54\1\52\1\40\1\43\1\56\1\64\1\61\1\6\1\72"+
    "\1\45\1\57\1\51\1\53\1\55\1\70\1\36\1\47\1\35\1\37"+
    "\1\66\1\63\1\73\1\65\1\67\1\30\1\12\1\31\1\34\1\7"+
    "\1\0\1\44\1\62\1\54\1\52\1\40\1\43\1\56\1\64\1\61"+
    "\1\6\1\72\1\45\1\57\1\51\1\53\1\55\1\70\1\36\1\47"+
    "\1\35\1\37\1\66\1\63\1\73\1\65\1\67\1\20\1\4\1\23"+
    "\7\0\1\16\252\0\2\60\115\0\1\46\u1ea8\0\1\16\1\16\u0100\0"+
    "\1\71\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\1\1\7\1\10\1\1\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\4\5"+
    "\1\24\1\25\3\5\1\1\1\5\1\26\6\5\1\1"+
    "\4\5\2\0\1\27\3\0\1\30\3\0\1\5\1\31"+
    "\11\5\1\32\1\33\1\34\6\5\2\0\4\5\1\0"+
    "\2\5\1\35\1\36\1\37\5\5\1\40\1\0\1\40"+
    "\10\5\1\41\1\27\1\30\2\2\3\0\12\5\1\0"+
    "\1\5\1\42\1\5\1\0\3\5\1\43\1\5\1\44"+
    "\1\5\2\0\3\5\1\45\1\46\2\47\2\5\1\0"+
    "\5\5\1\0\4\5\1\0\2\5\1\0\1\5\1\50"+
    "\1\0\1\51\3\5\1\52\1\53\1\54\1\55\4\5"+
    "\1\0\1\5\2\56\1\5\2\57\1\5\1\0\3\5"+
    "\2\0\2\5\1\60\2\5\2\61\1\5\1\0\1\5"+
    "\1\62\3\5\1\0\2\5\1\0\2\5\1\0\1\5"+
    "\1\63\1\0\1\5\1\2\2\64\5\5\1\65\2\66"+
    "\2\5\2\67\1\70\1\5\2\0\4\5\1\0\1\5"+
    "\2\71\4\5\1\0\1\5\2\72\2\73\1\5\2\74"+
    "\2\75\2\5\1\76\1\77\1\5\2\100\1\0\1\5"+
    "\1\101\1\102\1\103\1\102\1\103\1\5\1\104\1\0"+
    "\1\5\1\105\2\5\1\106\1\0\2\5\1\0\3\5"+
    "\1\107\1\0\1\5\1\110\1\0\2\5\1\111\2\112"+
    "\1\113\2\114\2\5\2\115\2\116\3\5\1\117\1\0"+
    "\1\5\1\0\1\5\2\120\2\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\74\0\170\0\264\0\74\0\360\0\u012c"+
    "\0\74\0\u0168\0\u01a4\0\74\0\u01e0\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0"+
    "\0\u03fc\0\u0438\0\u0474\0\74\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744"+
    "\0\u012c\0\74\0\u0780\0\u0168\0\u07bc\0\74\0\u01a4\0\u07f8"+
    "\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\74\0\74\0\74\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4"+
    "\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\360"+
    "\0\360\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\74\0\u0ff0"+
    "\0\360\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u0744\0\u012c\0\u0168\0\74\0\u120c\0\u1248\0\u1284"+
    "\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464"+
    "\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\360\0\u15cc\0\u1608"+
    "\0\u1644\0\u1680\0\u16bc\0\360\0\u16f8\0\360\0\u1734\0\u1770"+
    "\0\u17ac\0\u17e8\0\u1824\0\u1860\0\360\0\360\0\74\0\360"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\360\0\u1cd4\0\360\0\u1d10\0\u1d4c\0\u1d88"+
    "\0\360\0\360\0\360\0\360\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78"+
    "\0\u1eb4\0\u1ef0\0\74\0\360\0\u1f2c\0\74\0\360\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148"+
    "\0\360\0\u2184\0\u21c0\0\74\0\360\0\u21fc\0\u2238\0\u2274"+
    "\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454"+
    "\0\u2490\0\u24cc\0\u2508\0\u2544\0\360\0\u2580\0\u25bc\0\u1248"+
    "\0\74\0\360\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\360"+
    "\0\74\0\360\0\u2724\0\u2760\0\74\0\360\0\360\0\u279c"+
    "\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\74\0\360\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4"+
    "\0\74\0\360\0\74\0\360\0\u2b20\0\u2b5c\0\u2b98\0\74"+
    "\0\360\0\u2bd4\0\u2c10\0\360\0\360\0\u2c4c\0\74\0\360"+
    "\0\u2c88\0\u2cc4\0\360\0\74\0\74\0\360\0\360\0\u2d00"+
    "\0\360\0\u2d3c\0\u2d78\0\360\0\u2db4\0\u2df0\0\360\0\u2e2c"+
    "\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\360\0\u2fd0"+
    "\0\u300c\0\360\0\u3048\0\u3084\0\u30c0\0\360\0\74\0\360"+
    "\0\360\0\74\0\360\0\u30fc\0\u3138\0\74\0\360\0\74"+
    "\0\360\0\u3174\0\u31b0\0\u31ec\0\360\0\u3228\0\u3264\0\u32a0"+
    "\0\u32dc\0\74\0\360\0\74\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\3\1\4\1\7\1\3"+
    "\1\10\1\11\1\3\1\12\1\13\1\4\1\0\1\14"+
    "\1\15\1\16\1\17\1\3\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\7\1\52"+
    "\1\53\1\54\1\55\1\56\2\7\1\57\2\7\1\3"+
    "\2\7\75\0\1\4\3\0\1\4\7\0\1\4\60\0"+
    "\1\5\1\60\72\0\1\7\3\0\2\7\25\0\4\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\2\7\10\61\1\62\1\0\1\63\61\61\11\64"+
    "\1\0\1\65\1\66\60\64\11\67\1\0\3\67\2\0"+
    "\1\70\54\67\21\0\1\71\54\0\1\7\3\0\2\7"+
    "\25\0\1\7\1\72\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\2\7\1\73\4\7\1\0\3\7\1\74\1\75"+
    "\3\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\3\7\1\76\2\0\3\7\1\0\1\7\1\0\2\7"+
    "\1\77\4\7\1\0\10\7\1\0\2\7\2\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\100\6\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\2\7\1\101"+
    "\1\0\1\7\1\0\1\102\6\7\1\0\7\7\1\103"+
    "\1\0\1\7\1\104\42\0\1\105\5\0\1\106\73\0"+
    "\1\107\25\0\1\7\3\0\2\7\25\0\2\7\1\110"+
    "\1\7\2\0\1\7\1\111\1\7\1\0\1\7\1\0"+
    "\2\7\1\112\4\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\1\7\1\113\2\7\2\0"+
    "\3\7\1\0\1\7\1\0\1\114\6\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\3\7"+
    "\1\115\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\35\0\1\116\22\0\2\117\14\0"+
    "\1\7\3\0\2\7\25\0\1\120\3\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\117\1\121\7\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\4\7\2\0"+
    "\1\7\1\122\1\7\1\0\1\7\1\0\2\7\1\123"+
    "\4\7\1\124\1\125\7\7\1\0\2\7\2\0\1\7"+
    "\3\0\2\7\25\0\3\7\1\126\2\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\127\4\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\1\7\1\130"+
    "\2\7\2\0\1\131\2\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\4\7\2\0\1\7\1\132\1\7\1\0\1\7"+
    "\1\0\2\7\1\133\4\7\1\0\3\7\1\134\4\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\1\7"+
    "\1\135\2\7\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\4\7\2\0\1\7\1\136\1\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\2\7\43\0\1\137"+
    "\5\0\1\140\24\0\1\7\3\0\2\7\25\0\4\7"+
    "\2\0\1\141\2\7\1\0\1\7\1\0\1\142\6\7"+
    "\1\0\10\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\1\7\1\143\1\7\1\144\2\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\145\4\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\1\7\1\146"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\2\7\1\147"+
    "\4\7\1\0\3\7\1\150\4\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\1\7\1\151"+
    "\1\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\152\1\0\2\152\66\0\10\61\1\153"+
    "\1\0\1\63\61\61\11\64\1\0\1\65\1\154\60\64"+
    "\11\67\1\155\3\67\1\156\1\0\1\70\54\67\21\157"+
    "\1\160\1\161\51\157\2\0\1\7\3\0\2\7\25\0"+
    "\2\7\1\162\1\7\2\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\2\7\2\0\1\7\3\0"+
    "\2\7\25\0\2\7\1\163\1\7\2\0\2\7\1\164"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\3\7\1\165\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\4\7\1\166\2\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\1\7\1\167\1\7\1\0\1\7\1\0"+
    "\3\7\1\170\1\171\2\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\2\7\1\172\1\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\1\173"+
    "\3\7\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\3\7\1\174\1\175\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\1\7\1\176"+
    "\5\7\1\0\10\7\1\0\2\7\2\0\1\7\3\0"+
    "\2\7\25\0\2\7\1\177\1\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\200\1\201\7\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\202\6\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\4\7\2\0"+
    "\2\7\1\203\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\1\7"+
    "\1\204\2\7\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\1\7\1\205\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\2\7\2\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\7\1\206\5\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\207\6\7\1\0\10\7\1\0"+
    "\2\7\36\0\1\210\124\0\1\211\6\0\1\7\3\0"+
    "\2\7\25\0\1\7\1\212\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\6\7\1\213\1\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\1\214\6\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\1\215"+
    "\1\216\2\7\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\2\7\45\0\1\217\30\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\2\7\1\220\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\1\221\2\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\2\7\1\222\5\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\4\7"+
    "\2\0\3\7\1\223\1\224\1\0\7\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\4\7"+
    "\2\0\3\7\1\0\1\7\1\0\1\225\6\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\1\7\1\226\1\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\2\7\2\0\1\7\3\0"+
    "\2\7\25\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\2\7\1\227\4\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\2\7\1\230"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\35\0\1\231\40\0\1\7\3\0\2\7\25\0\1\232"+
    "\3\7\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\3\7\1\233\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\4\7\2\0\3\7\1\0\1\7\1\0\5\7"+
    "\1\234\1\7\1\0\10\7\1\0\2\7\2\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\2\7\1\235\4\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\236\1\237\7\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\1\7\1\240"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\7\7\1\241"+
    "\1\242\7\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\1\7\1\243\2\7\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\2\7\11\0\1\155"+
    "\62\0\21\157\1\160\52\157\21\71\1\244\1\71\1\155"+
    "\50\71\22\0\1\71\53\0\1\7\3\0\2\7\25\0"+
    "\3\7\1\245\2\0\3\7\1\0\1\7\1\0\1\246"+
    "\6\7\1\0\10\7\1\0\2\7\2\0\1\7\3\0"+
    "\2\7\25\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\4\7\1\247\2\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\250\4\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\1\251\6\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\3\7"+
    "\1\252\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\2\7\1\253\1\0\1\7\1\0\1\7"+
    "\1\254\5\7\1\0\10\7\1\0\2\7\2\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\2\7\1\255\4\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\3\7\1\256\2\0"+
    "\2\7\1\257\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\4\7"+
    "\2\0\3\7\1\0\1\7\1\0\1\260\6\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\7\7\1\261"+
    "\1\262\7\7\1\0\2\7\40\0\1\263\35\0\1\7"+
    "\3\0\2\7\25\0\3\7\1\264\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\1\7\1\265"+
    "\1\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\2\7\35\0\1\266\40\0\1\7\3\0\2\7\25\0"+
    "\1\267\3\7\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\4\7\2\0\3\7\1\0\1\7\1\0\3\7"+
    "\1\270\3\7\1\0\10\7\1\0\2\7\2\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\3\7\1\271\1\272"+
    "\1\0\7\7\1\0\10\7\1\0\2\7\2\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\1\7\1\273\1\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\5\7\1\274\1\7\1\0\10\7"+
    "\1\0\2\7\60\0\2\275\52\0\1\276\35\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\275\1\277\7\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\3\7\1\300\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\301\5\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\4\7"+
    "\2\0\1\7\1\302\1\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\4\7\2\0\3\7\1\0\1\7\1\0\1\303"+
    "\6\7\1\0\10\7\1\0\2\7\40\0\1\304\35\0"+
    "\1\7\3\0\2\7\25\0\3\7\1\305\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\1\306\3\7\2\0"+
    "\3\7\1\307\1\310\1\0\7\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\1\7\1\311"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\3\7\1\312"+
    "\1\7\1\313\1\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\2\7\1\314"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\40\0\1\315\35\0\1\7\3\0\2\7\25\0\3\7"+
    "\1\316\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\1\7\1\317\1\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\2\7\2\0\1\7\3\0"+
    "\2\7\25\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\320\1\321\7\7\1\0\2\7\2\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\2\7\1\322\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\2\7\35\0"+
    "\1\323\40\0\1\7\3\0\2\7\25\0\1\324\3\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\4\7"+
    "\2\0\3\7\1\0\1\7\1\0\1\7\1\325\5\7"+
    "\1\0\10\7\1\0\2\7\45\0\1\326\30\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\2\7\1\327\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\2\7\21\157"+
    "\1\160\1\161\1\330\50\157\2\0\1\7\3\0\2\7"+
    "\25\0\4\7\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\331\1\332\1\7\2\0\1\7\3\0"+
    "\2\7\25\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\4\7\1\333\2\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\2\7\1\334\5\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\1\7\1\335"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\1\7\1\336\1\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\2\7\2\0\1\7\3\0"+
    "\2\7\25\0\4\7\2\0\1\7\1\337\1\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\1\7\1\340\5\7\1\0\10\7\1\0"+
    "\2\7\45\0\1\341\30\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\2\7\1\342\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\4\7\2\0\2\7\1\343\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\2\7\2\0\1\7\3\0"+
    "\2\7\25\0\1\344\3\7\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\2\7\40\0\1\345"+
    "\35\0\1\7\3\0\2\7\25\0\3\7\1\346\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\4\7\1\347"+
    "\3\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\1\350\3\7\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\2\7\51\0\1\351\75\0\1\352"+
    "\22\0\1\7\3\0\2\7\25\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\353\6\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\2\7\1\354\4\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\2\7\1\355\1\7\2\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\2\7\2\0\1\7\3\0"+
    "\2\7\25\0\1\356\3\7\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\2\7\2\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\357\1\360\7\7\1\0\2\7\35\0"+
    "\1\361\40\0\1\7\3\0\2\7\25\0\1\362\3\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\4\7"+
    "\2\0\1\7\1\363\1\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\3\7\1\364\2\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\2\7\2\0\1\7\3\0"+
    "\2\7\25\0\1\7\1\365\2\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\366\4\7\1\0\10\7\1\0"+
    "\2\7\56\0\1\367\17\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\5\7\1\370"+
    "\1\7\1\0\10\7\1\0\2\7\2\0\1\7\3\0"+
    "\2\7\25\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\371\1\372\1\7\51\0\1\373"+
    "\24\0\1\7\3\0\2\7\25\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\374\6\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\3\7\1\375"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\2\7\40\0\1\376\35\0\1\7\3\0\2\7"+
    "\25\0\3\7\1\377\2\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\2\7\40\0\1\u0100\35\0"+
    "\1\7\3\0\2\7\25\0\3\7\1\u0101\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\3\7\1\u0102\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\3\7\1\u0103"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\4\7"+
    "\2\0\3\7\1\0\1\7\1\0\1\7\1\u0104\5\7"+
    "\1\0\10\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\1\u0105\3\7\2\0\3\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\2\7\2\0\1\7\3\0"+
    "\2\7\25\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\3\7\1\u0106\3\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\3\7\1\u0107"+
    "\1\u0108\1\0\7\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\7\7\1\u0109\1\u010a\7\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\3\7\1\u010b\4\7"+
    "\1\0\2\7\56\0\1\u010c\60\0\1\u010d\32\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\5\7\1\u010e\1\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\4\7\2\0\1\u010f"+
    "\2\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\4\7\2\0"+
    "\2\7\1\u0110\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\4\7"+
    "\2\0\3\7\1\0\1\7\1\0\2\7\1\u0111\4\7"+
    "\1\0\10\7\1\0\2\7\51\0\1\u0112\24\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\u0113\6\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\1\u0114\3\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\4\7\2\0\3\7"+
    "\1\0\1\7\1\0\1\7\1\u0115\5\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\4\7"+
    "\2\0\1\7\1\u0116\1\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\4\7\2\0\3\7\1\0\1\7\1\0\3\7"+
    "\1\u0117\3\7\1\0\10\7\1\0\2\7\40\0\1\u0118"+
    "\35\0\1\7\3\0\2\7\25\0\3\7\1\u0119\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\4\7\2\0"+
    "\1\7\1\u011a\1\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\45\0\1\u011b\30\0\1\7\3\0"+
    "\2\7\25\0\4\7\2\0\2\7\1\u011c\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\2\7\2\0\1\7"+
    "\3\0\2\7\25\0\1\7\1\u011d\2\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\1\7\1\u011e\2\7"+
    "\2\0\3\7\1\0\1\7\1\0\7\7\1\0\10\7"+
    "\1\0\2\7\2\0\1\7\3\0\2\7\25\0\3\7"+
    "\1\u011f\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\53\0\1\u0120\22\0\1\7\3\0"+
    "\2\7\25\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\2\7\1\u0121\4\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\1\u0122\3\7\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\37\0\1\u0123\36\0\1\7\3\0\2\7\25\0\2\7"+
    "\1\u0124\1\7\2\0\3\7\1\0\1\7\1\0\7\7"+
    "\1\0\10\7\1\0\2\7\2\0\1\7\3\0\2\7"+
    "\25\0\2\7\1\u0125\1\7\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\2\7\2\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\6\7\1\u0126\1\0\10\7\1\0\2\7\36\0"+
    "\1\u0127\37\0\1\7\3\0\2\7\25\0\1\7\1\u0128"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\3\7\1\0\1\7\1\0\1\u0129\6\7"+
    "\1\0\10\7\1\0\2\7\51\0\1\u012a\24\0\1\7"+
    "\3\0\2\7\25\0\4\7\2\0\3\7\1\0\1\7"+
    "\1\0\1\u012b\6\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\4\7\2\0\3\7\1\0"+
    "\1\7\1\0\3\7\1\u012c\3\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\4\7\2\0"+
    "\3\7\1\0\1\7\1\0\3\7\1\u012d\3\7\1\0"+
    "\10\7\1\0\2\7\51\0\1\u012e\24\0\1\7\3\0"+
    "\2\7\25\0\4\7\2\0\3\7\1\0\1\7\1\0"+
    "\1\u012f\6\7\1\0\10\7\1\0\2\7\40\0\1\u0130"+
    "\35\0\1\7\3\0\2\7\25\0\3\7\1\u0131\2\0"+
    "\3\7\1\0\1\7\1\0\7\7\1\0\10\7\1\0"+
    "\2\7\2\0\1\7\3\0\2\7\25\0\1\7\1\u0132"+
    "\2\7\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\2\0\1\7\3\0\2\7\25\0"+
    "\4\7\2\0\1\7\1\u0133\1\7\1\0\1\7\1\0"+
    "\7\7\1\0\10\7\1\0\2\7\2\0\1\7\3\0"+
    "\2\7\25\0\4\7\2\0\1\7\1\u0134\1\7\1\0"+
    "\1\7\1\0\7\7\1\0\10\7\1\0\2\7\2\0"+
    "\1\7\3\0\2\7\25\0\3\7\1\u0135\2\0\3\7"+
    "\1\0\1\7\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\4\7\2\0\3\7"+
    "\1\u0136\1\u0137\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\2\0\1\7\3\0\2\7\25\0\4\7\2\0\3\7"+
    "\1\u0138\1\u0139\1\0\7\7\1\0\10\7\1\0\2\7"+
    "\40\0\1\u013a\35\0\1\7\3\0\2\7\25\0\3\7"+
    "\1\u013b\2\0\3\7\1\0\1\7\1\0\7\7\1\0"+
    "\10\7\1\0\2\7\40\0\1\u013c\35\0\1\7\3\0"+
    "\2\7\25\0\3\7\1\u013d\2\0\3\7\1\0\1\7"+
    "\1\0\7\7\1\0\10\7\1\0\2\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\2\1\1\11\2\1\1\11\2\1"+
    "\1\11\1\1\13\11\13\1\1\11\13\1\2\0\1\11"+
    "\3\0\1\11\3\0\13\1\3\11\6\1\2\0\4\1"+
    "\1\0\12\1\1\11\1\0\14\1\1\11\1\1\3\0"+
    "\12\1\1\0\3\1\1\0\7\1\2\0\5\1\1\11"+
    "\3\1\1\0\5\1\1\0\4\1\1\0\2\1\1\0"+
    "\2\1\1\0\14\1\1\0\1\1\1\11\2\1\1\11"+
    "\2\1\1\0\3\1\2\0\5\1\1\11\2\1\1\0"+
    "\5\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\11\7\1\1\11\3\1\1\11\3\1\2\0"+
    "\4\1\1\0\1\1\1\11\5\1\1\0\1\1\1\11"+
    "\1\1\1\11\4\1\1\11\6\1\1\11\1\1\1\0"+
    "\2\1\2\11\4\1\1\0\5\1\1\0\2\1\1\0"+
    "\4\1\1\0\2\1\1\0\3\1\1\11\2\1\1\11"+
    "\3\1\1\11\1\1\1\11\5\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
  	yyline=1;
	yychar=1;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.err.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yychar);
            }
          case 82: break;
          case 2: 
            { 
            }
          case 83: break;
          case 3: 
            { return new Symbol(sym.ENTERO,yyline,yychar, yytext());
            }
          case 84: break;
          case 4: 
            { return new Symbol(sym.PNT,yyline,yychar, yytext());
            }
          case 85: break;
          case 5: 
            { return new Symbol(sym.ID,yyline,yychar, yytext());
            }
          case 86: break;
          case 6: 
            { yychar=1;
            }
          case 87: break;
          case 7: 
            { return new Symbol(sym.PARIZQ,yyline,yychar, yytext());
            }
          case 88: break;
          case 8: 
            { return new Symbol(sym.PARDER,yyline,yychar, yytext());
            }
          case 89: break;
          case 9: 
            { return new Symbol(sym.POR,yyline,yychar, yytext());
            }
          case 90: break;
          case 10: 
            { return new Symbol(sym.DIVIDIDO,yyline,yychar, yytext());
            }
          case 91: break;
          case 11: 
            { return new Symbol(sym.MAS,yyline,yychar, yytext());
            }
          case 92: break;
          case 12: 
            { return new Symbol(sym.PNTCOMA,yyline,yychar, yytext());
            }
          case 93: break;
          case 13: 
            { return new Symbol(sym.DSPUNTOS,yyline,yychar, yytext());
            }
          case 94: break;
          case 14: 
            { return new Symbol(sym.COMA,yyline,yychar, yytext());
            }
          case 95: break;
          case 15: 
            { return new Symbol(sym.LLAVEIZQ,yyline,yychar, yytext());
            }
          case 96: break;
          case 16: 
            { return new Symbol(sym.LLAVEDER,yyline,yychar, yytext());
            }
          case 97: break;
          case 17: 
            { return new Symbol(sym.MENOS,yyline,yychar, yytext());
            }
          case 98: break;
          case 18: 
            { return new Symbol(sym.MODULO,yyline,yychar, yytext());
            }
          case 99: break;
          case 19: 
            { return new Symbol(sym.POTENCIA,yyline,yychar, yytext());
            }
          case 100: break;
          case 20: 
            { return new Symbol(sym.MENOR,yyline,yychar, yytext());
            }
          case 101: break;
          case 21: 
            { return new Symbol(sym.MAYOR,yyline,yychar, yytext());
            }
          case 102: break;
          case 22: 
            { return new Symbol(sym.IGUAL,yyline,yychar, yytext());
            }
          case 103: break;
          case 23: 
            { return new Symbol(sym.CHAR,yyline,yychar, yytext());
            }
          case 104: break;
          case 24: 
            { return new Symbol(sym.CADENA,yyline,yychar, yytext());
            }
          case 105: break;
          case 25: 
            { return new Symbol(sym.TO,yyline,yychar, yytext());
            }
          case 106: break;
          case 26: 
            { return new Symbol(sym.DIFERENTE,yyline,yychar, yytext());
            }
          case 107: break;
          case 27: 
            { return new Symbol(sym.MENORIGUAL,yyline,yychar, yytext());
            }
          case 108: break;
          case 28: 
            { return new Symbol(sym.MAYORIGUAL,yyline,yychar, yytext());
            }
          case 109: break;
          case 29: 
            { return new Symbol(sym.DO,yyline,yychar, yytext());
            }
          case 110: break;
          case 30: 
            { return new Symbol(sym.OR,yyline,yychar, yytext());
            }
          case 111: break;
          case 31: 
            { return new Symbol(sym.OF,yyline,yychar, yytext());
            }
          case 112: break;
          case 32: 
            { return new Symbol(sym.IF,yyline,yychar, yytext());
            }
          case 113: break;
          case 33: 
            { return new Symbol(sym.DECIMAL,yyline,yychar, yytext());
            }
          case 114: break;
          case 34: 
            { return new Symbol(sym.END,yyline,yychar, yytext());
            }
          case 115: break;
          case 35: 
            { return new Symbol(sym.FOR,yyline,yychar, yytext());
            }
          case 116: break;
          case 36: 
            { return new Symbol(sym.AND,yyline,yychar, yytext());
            }
          case 117: break;
          case 37: 
            { return new Symbol(sym.NOT,yyline,yychar, yytext());
            }
          case 118: break;
          case 38: 
            { return new Symbol(sym.NOR,yyline,yychar, yytext());
            }
          case 119: break;
          case 39: 
            { return new Symbol(sym.NIL,yyline,yychar, yytext());
            }
          case 120: break;
          case 40: 
            { return new Symbol(sym.VAR,yyline,yychar, yytext());
            }
          case 121: break;
          case 41: 
            { return new Symbol(sym.TRUE,yyline,yychar, yytext());
            }
          case 122: break;
          case 42: 
            { return new Symbol(sym.THEN,yyline,yychar, yytext());
            }
          case 123: break;
          case 43: 
            { return new Symbol(sym.TYPE,yyline,yychar, yytext());
            }
          case 124: break;
          case 44: 
            { return new Symbol(sym.REAL,yyline,yychar, yytext());
            }
          case 125: break;
          case 45: 
            { return new Symbol(sym.READ,yyline,yychar, yytext());
            }
          case 126: break;
          case 46: 
            { return new Symbol(sym.ELSE,yyline,yychar, yytext());
            }
          case 127: break;
          case 47: 
            { return new Symbol(sym.EXIT,yyline,yychar, yytext());
            }
          case 128: break;
          case 48: 
            { return new Symbol(sym.NAND,yyline,yychar, yytext());
            }
          case 129: break;
          case 49: 
            { return new Symbol(sym.CASE,yyline,yychar, yytext());
            }
          case 130: break;
          case 50: 
            { return new Symbol(sym.CHARP,yyline,yychar, yytext());
            }
          case 131: break;
          case 51: 
            { return new Symbol(sym.WORD,yyline,yychar, yytext());
            }
          case 132: break;
          case 52: 
            { return new Symbol(sym.TRUNK,yyline,yychar, yytext());
            }
          case 133: break;
          case 53: 
            { return new Symbol(sym.ROUND,yyline,yychar, yytext());
            }
          case 134: break;
          case 54: 
            { return new Symbol(sym.UNTIL,yyline,yychar, yytext());
            }
          case 135: break;
          case 55: 
            { return new Symbol(sym.FALSE,yyline,yychar, yytext());
            }
          case 136: break;
          case 56: 
            { return new Symbol(sym.ARRAY,yyline,yychar, yytext());
            }
          case 137: break;
          case 57: 
            { return new Symbol(sym.CONST,yyline,yychar, yytext());
            }
          case 138: break;
          case 58: 
            { return new Symbol(sym.BREAK,yyline,yychar, yytext());
            }
          case 139: break;
          case 59: 
            { return new Symbol(sym.BEGIN,yyline,yychar, yytext());
            }
          case 140: break;
          case 60: 
            { return new Symbol(sym.WRITE,yyline,yychar, yytext());
            }
          case 141: break;
          case 61: 
            { return new Symbol(sym.WHILE,yyline,yychar, yytext());
            }
          case 142: break;
          case 62: 
            { return new Symbol(sym.RECORD,yyline,yychar, yytext());
            }
          case 143: break;
          case 63: 
            { return new Symbol(sym.REPEAT,yyline,yychar, yytext());
            }
          case 144: break;
          case 64: 
            { return new Symbol(sym.EQUALS,yyline,yychar, yytext());
            }
          case 145: break;
          case 65: 
            { return new Symbol(sym.LENGTH,yyline,yychar, yytext());
            }
          case 146: break;
          case 66: 
            { return new Symbol(sym.STRING,yyline,yychar, yytext());
            }
          case 147: break;
          case 67: 
            { return new Symbol(sym.SIZEOF,yyline,yychar, yytext());
            }
          case 148: break;
          case 68: 
            { return new Symbol(sym.DOWNTO,yyline,yychar, yytext());
            }
          case 149: break;
          case 69: 
            { return new Symbol(sym.CHARAT,yyline,yychar, yytext());
            }
          case 150: break;
          case 70: 
            { return new Symbol(sym.MALLOC,yyline,yychar, yytext());
            }
          case 151: break;
          case 71: 
            { return new Symbol(sym.REPLACE,yyline,yychar, yytext());
            }
          case 152: break;
          case 72: 
            { return new Symbol(sym.DEFAULT,yyline,yychar, yytext());
            }
          case 153: break;
          case 73: 
            { return new Symbol(sym.PROGRAM,yyline,yychar, yytext());
            }
          case 154: break;
          case 74: 
            { return new Symbol(sym.INTEGER,yyline,yychar, yytext());
            }
          case 155: break;
          case 75: 
            { return new Symbol(sym.BOOLEAN,yyline,yychar, yytext());
            }
          case 156: break;
          case 76: 
            { return new Symbol(sym.WRITELN,yyline,yychar, yytext());
            }
          case 157: break;
          case 77: 
            { return new Symbol(sym.FUNCTION,yyline,yychar, yytext());
            }
          case 158: break;
          case 78: 
            { return new Symbol(sym.CONTINUE,yyline,yychar, yytext());
            }
          case 159: break;
          case 79: 
            { return new Symbol(sym.PROCEDURE,yyline,yychar, yytext());
            }
          case 160: break;
          case 80: 
            { return new Symbol(sym.TOUPPERCASE,yyline,yychar, yytext());
            }
          case 161: break;
          case 81: 
            { return new Symbol(sym.TOLOWERCASE,yyline,yychar, yytext());
            }
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
