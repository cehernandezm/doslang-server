
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Pascal.Parser;

import java_cup.runtime.*;
import Pascal.Analisis.*;
import Pascal.Analisis.TipoDato.*;
import Pascal.Componentes.*;
import Pascal.Componentes.UserTypes.*;
import Pascal.Componentes.Arreglos.*;
import Pascal.Componentes.Registros.*;
import Pascal.Componentes.SentenciaIf.*;
import Pascal.Componentes.Funciones.*;
import java.util.LinkedList;
import Pascal.Componentes.SentenciaSwitch.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\004\005\000\002\011\004\000\002\011\005" +
    "\000\002\011\003\000\002\007\004\000\002\007\003\000" +
    "\002\010\010\000\002\010\006\000\002\020\004\000\002" +
    "\020\005\000\002\020\003\000\002\021\004\000\002\021" +
    "\003\000\002\022\010\000\002\022\006\000\002\054\003" +
    "\000\002\055\004\000\002\055\004\000\002\055\003\000" +
    "\002\055\003\000\002\056\017\000\002\056\014\000\002" +
    "\056\016\000\002\056\013\000\002\061\015\000\002\061" +
    "\012\000\002\061\014\000\002\061\011\000\002\057\005" +
    "\000\002\057\003\000\002\060\005\000\002\060\006\000" +
    "\002\012\004\000\002\012\005\000\002\012\003\000\002" +
    "\012\004\000\002\014\004\000\002\014\003\000\002\013" +
    "\006\000\002\016\005\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\015" +
    "\006\000\002\015\006\000\002\032\010\000\002\033\005" +
    "\000\002\033\003\000\002\034\006\000\002\034\003\000" +
    "\002\036\005\000\002\037\007\000\002\037\006\000\002" +
    "\040\006\000\002\006\005\000\002\006\003\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\004\000\002\003\006\000\002\003\005\000" +
    "\002\003\003\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\003" +
    "\006\000\002\003\006\000\002\003\010\000\002\003\010" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\010\000\002\003" +
    "\005\000\002\062\006\000\002\062\005\000\002\026\006" +
    "\000\002\026\005\000\002\023\004\000\002\023\003\000" +
    "\002\024\004\000\002\024\004\000\002\024\003\000\002" +
    "\024\004\000\002\024\003\000\002\024\004\000\002\024" +
    "\003\000\002\024\004\000\002\024\004\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\025\004\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\004\000\002\027\006\000\002\027\006" +
    "\000\002\030\005\000\002\030\003\000\002\031\006\000" +
    "\002\031\011\000\002\031\010\000\002\035\005\000\002" +
    "\035\003\000\002\041\006\000\002\041\010\000\002\041" +
    "\010\000\002\042\006\000\002\042\003\000\002\044\010" +
    "\000\002\044\007\000\002\045\004\000\002\045\003\000" +
    "\002\046\005\000\002\047\005\000\002\050\006\000\002" +
    "\051\006\000\002\052\013\000\002\052\013\000\002\066" +
    "\006\000\002\066\003\000\002\053\006\000\002\063\003" +
    "\000\002\064\003\000\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019b\000\004\050\006\001\002\000\020\003\022\051" +
    "\030\052\017\053\016\054\026\122\025\123\013\001\002" +
    "\000\004\002\011\001\002\000\004\015\007\001\002\000" +
    "\004\023\010\001\002\000\020\003\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\122\ufffe\123\ufffe\001\002\000\004\002" +
    "\001\001\002\000\004\054\uffdc\001\002\000\004\015\u0186" +
    "\001\002\000\004\054\ufff4\001\002\000\004\002\uffff\001" +
    "\002\000\004\015\031\001\002\000\004\015\031\001\002" +
    "\000\004\054\ufffb\001\002\000\004\054\026\001\002\000" +
    "\004\023\u0171\001\002\000\010\054\uffeb\122\uffeb\123\uffeb" +
    "\001\002\000\010\054\uffef\122\025\123\013\001\002\000" +
    "\004\015\u0149\001\002\000\106\006\107\015\321\016\134" +
    "\017\113\020\123\021\120\030\112\031\110\032\121\033" +
    "\133\046\117\055\334\065\320\066\310\067\122\070\131" +
    "\071\126\072\111\073\125\074\130\075\105\076\127\102" +
    "\106\103\114\104\335\105\317\110\302\112\330\114\305" +
    "\116\307\121\327\124\325\125\304\126\316\001\002\000" +
    "\010\054\uffec\122\uffec\123\uffec\001\002\000\004\015\031" +
    "\001\002\000\012\022\uffbf\024\uffbf\025\uffbf\040\uffbf\001" +
    "\002\000\006\024\040\025\037\001\002\000\014\015\031" +
    "\053\016\054\ufffd\122\025\123\013\001\002\000\014\015" +
    "\ufff9\053\ufff9\054\ufff9\122\ufff9\123\ufff9\001\002\000\014" +
    "\015\ufffa\053\ufffa\054\ufffa\122\ufffa\123\ufffa\001\002\000" +
    "\004\054\ufffc\001\002\000\004\015\277\001\002\000\032" +
    "\015\056\016\045\021\053\030\061\056\043\057\046\060" +
    "\057\061\050\062\060\064\051\077\044\101\047\001\002" +
    "\000\010\022\uffcc\023\uffcc\040\uffcc\001\002\000\006\023" +
    "\274\040\273\001\002\000\010\022\uffd6\023\uffd6\040\uffd6" +
    "\001\002\000\004\026\104\001\002\000\004\013\101\001" +
    "\002\000\010\022\uffd5\023\uffd5\040\uffd5\001\002\000\004" +
    "\015\067\001\002\000\010\022\uffd1\023\uffd1\040\uffd1\001" +
    "\002\000\010\022\uffd3\023\uffd3\040\uffd3\001\002\000\010" +
    "\022\uffce\023\uffce\040\uffce\001\002\000\004\015\031\001" +
    "\002\000\010\022\uffcd\023\uffcd\040\uffcd\001\002\000\010" +
    "\022\uffd0\023\uffd0\040\uffd0\001\002\000\010\022\uffcf\023" +
    "\uffcf\040\uffcf\001\002\000\010\022\uffd4\023\uffd4\040\uffd4" +
    "\001\002\000\010\022\uffd2\023\uffd2\040\uffd2\001\002\000" +
    "\004\013\062\001\002\000\004\013\063\001\002\000\004" +
    "\030\064\001\002\000\010\022\uffca\023\uffca\040\uffca\001" +
    "\002\000\006\022\066\025\037\001\002\000\010\022\uffd7" +
    "\023\uffd7\040\uffd7\001\002\000\004\024\076\001\002\000" +
    "\006\015\071\055\072\001\002\000\004\024\073\001\002" +
    "\000\010\022\uffc4\023\uffc4\040\uffc4\001\002\000\032\015" +
    "\056\016\045\021\053\030\061\056\043\057\046\060\057" +
    "\061\050\062\060\064\051\077\044\101\047\001\002\000" +
    "\004\023\075\001\002\000\006\015\uffc3\055\uffc3\001\002" +
    "\000\032\015\056\016\045\021\053\030\061\056\043\057" +
    "\046\060\057\061\050\062\060\064\051\077\044\101\047" +
    "\001\002\000\004\023\100\001\002\000\006\015\uffc2\055" +
    "\uffc2\001\002\000\004\013\102\001\002\000\004\016\103" +
    "\001\002\000\010\022\uffcb\023\uffcb\040\uffcb\001\002\000" +
    "\054\006\107\015\124\016\134\017\113\020\123\021\120" +
    "\030\112\031\110\032\121\033\133\046\117\067\122\070" +
    "\131\071\126\072\111\073\125\074\130\075\105\076\127" +
    "\102\106\103\114\001\002\000\004\021\270\001\002\000" +
    "\004\021\265\001\002\000\054\006\107\015\145\016\134" +
    "\017\113\020\123\021\120\030\112\031\110\032\121\033" +
    "\133\046\117\067\122\070\131\071\126\072\111\073\125" +
    "\074\130\075\105\076\127\102\106\103\114\001\002\000" +
    "\072\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\013\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\100\uff9d\106\uff9d\113" +
    "\uff9d\117\uff9d\120\uff9d\001\002\000\004\021\261\001\002" +
    "\000\072\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012" +
    "\uff9e\013\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e" +
    "\027\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\100\uff9e\106\uff9e" +
    "\113\uff9e\117\uff9e\120\uff9e\001\002\000\072\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\100\uff9f\106\uff9f\113\uff9f\117\uff9f\120" +
    "\uff9f\001\002\000\004\021\256\001\002\000\072\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\100\uffaa\106\uffaa\113\uffaa\117\uffaa" +
    "\120\uffaa\001\002\000\046\005\176\006\157\007\170\010" +
    "\164\011\167\012\165\013\253\026\171\034\172\035\160" +
    "\036\175\037\163\040\162\041\173\042\156\043\161\044" +
    "\174\045\166\001\002\000\054\006\107\015\145\016\134" +
    "\017\113\020\123\021\120\030\112\031\110\032\121\033" +
    "\133\046\117\067\122\070\131\071\126\072\111\073\125" +
    "\074\130\075\105\076\127\102\106\103\114\001\002\000" +
    "\054\006\107\015\145\016\134\017\113\020\123\021\120" +
    "\030\112\031\110\032\121\033\133\046\117\067\122\070" +
    "\131\071\126\072\111\073\125\074\130\075\105\076\127" +
    "\102\106\103\114\001\002\000\072\005\uff9c\006\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\100\uff9c\106\uff9c\113\uff9c\117\uff9c\120\uff9c\001" +
    "\002\000\004\021\243\001\002\000\072\005\uff99\006\uff99" +
    "\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\026\uff99\027\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044" +
    "\uff99\045\uff99\100\uff99\106\uff99\113\uff99\117\uff99\120\uff99" +
    "\001\002\000\054\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\021\146\025\uffc5\026\uff9a\027\uffc5" +
    "\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\001\002\000\004\021\240" +
    "\001\002\000\004\021\233\001\002\000\004\021\230\001" +
    "\002\000\004\021\223\001\002\000\004\021\143\001\002" +
    "\000\006\025\136\027\137\001\002\000\072\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\045\uff9b\100\uff9b\106\uff9b\113\uff9b\117\uff9b\120" +
    "\uff9b\001\002\000\072\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\100" +
    "\uffa0\106\uffa0\113\uffa0\117\uffa0\120\uffa0\001\002\000\006" +
    "\025\uffc7\027\uffc7\001\002\000\054\006\107\015\124\016" +
    "\134\017\113\020\123\021\120\030\112\031\110\032\121" +
    "\033\133\046\117\067\122\070\131\071\126\072\111\073" +
    "\125\074\130\075\105\076\127\102\106\103\114\001\002" +
    "\000\004\100\140\001\002\000\032\015\056\016\045\021" +
    "\053\030\061\056\043\057\046\060\057\061\050\062\060" +
    "\064\051\077\044\101\047\001\002\000\010\022\uffc9\023" +
    "\uffc9\040\uffc9\001\002\000\006\025\uffc8\027\uffc8\001\002" +
    "\000\054\006\107\015\145\016\134\017\113\020\123\021" +
    "\120\030\112\031\110\032\121\033\133\046\117\067\122" +
    "\070\131\071\126\072\111\073\125\074\130\075\105\076" +
    "\127\102\106\103\114\001\002\000\050\005\176\006\157" +
    "\007\170\010\164\011\167\012\165\013\155\022\222\026" +
    "\171\034\172\035\160\036\175\037\163\040\162\041\173" +
    "\042\156\043\161\044\174\045\166\001\002\000\074\005" +
    "\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a" +
    "\021\146\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a" +
    "\042\uff9a\043\uff9a\044\uff9a\045\uff9a\100\uff9a\106\uff9a\113" +
    "\uff9a\117\uff9a\120\uff9a\001\002\000\056\006\107\015\145" +
    "\016\134\017\113\020\123\021\120\022\150\030\112\031" +
    "\110\032\121\033\133\046\117\067\122\070\131\071\126" +
    "\072\111\073\125\074\130\075\105\076\127\102\106\103" +
    "\114\001\002\000\056\005\176\006\157\007\170\010\164" +
    "\011\167\012\165\013\155\022\uff73\024\uff73\025\uff73\026" +
    "\171\027\uff73\034\172\035\160\036\175\037\163\040\162" +
    "\041\173\042\156\043\161\044\174\045\166\001\002\000" +
    "\072\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\013\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\100\uff95\106\uff95\113" +
    "\uff95\117\uff95\120\uff95\001\002\000\006\022\153\025\152" +
    "\001\002\000\054\006\107\015\145\016\134\017\113\020" +
    "\123\021\120\030\112\031\110\032\121\033\133\046\117" +
    "\067\122\070\131\071\126\072\111\073\125\074\130\075" +
    "\105\076\127\102\106\103\114\001\002\000\072\005\uff96" +
    "\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043" +
    "\uff96\044\uff96\045\uff96\100\uff96\106\uff96\113\uff96\117\uff96" +
    "\120\uff96\001\002\000\056\005\176\006\157\007\170\010" +
    "\164\011\167\012\165\013\155\022\uff74\024\uff74\025\uff74" +
    "\026\171\027\uff74\034\172\035\160\036\175\037\163\040" +
    "\162\041\173\042\156\043\161\044\174\045\166\001\002" +
    "\000\004\015\221\001\002\000\054\006\107\015\145\016" +
    "\134\017\113\020\123\021\120\030\112\031\110\032\121" +
    "\033\133\046\117\067\122\070\131\071\126\072\111\073" +
    "\125\074\130\075\105\076\127\102\106\103\114\001\002" +
    "\000\054\006\107\015\145\016\134\017\113\020\123\021" +
    "\120\030\112\031\110\032\121\033\133\046\117\067\122" +
    "\070\131\071\126\072\111\073\125\074\130\075\105\076" +
    "\127\102\106\103\114\001\002\000\054\006\107\015\145" +
    "\016\134\017\113\020\123\021\120\030\112\031\110\032" +
    "\121\033\133\046\117\067\122\070\131\071\126\072\111" +
    "\073\125\074\130\075\105\076\127\102\106\103\114\001" +
    "\002\000\054\006\107\015\145\016\134\017\113\020\123" +
    "\021\120\030\112\031\110\032\121\033\133\046\117\067" +
    "\122\070\131\071\126\072\111\073\125\074\130\075\105" +
    "\076\127\102\106\103\114\001\002\000\054\006\107\015" +
    "\145\016\134\017\113\020\123\021\120\030\112\031\110" +
    "\032\121\033\133\046\117\067\122\070\131\071\126\072" +
    "\111\073\125\074\130\075\105\076\127\102\106\103\114" +
    "\001\002\000\054\006\107\015\145\016\134\017\113\020" +
    "\123\021\120\030\112\031\110\032\121\033\133\046\117" +
    "\067\122\070\131\071\126\072\111\073\125\074\130\075" +
    "\105\076\127\102\106\103\114\001\002\000\054\006\107" +
    "\015\145\016\134\017\113\020\123\021\120\030\112\031" +
    "\110\032\121\033\133\046\117\067\122\070\131\071\126" +
    "\072\111\073\125\074\130\075\105\076\127\102\106\103" +
    "\114\001\002\000\054\006\107\015\145\016\134\017\113" +
    "\020\123\021\120\030\112\031\110\032\121\033\133\046" +
    "\117\067\122\070\131\071\126\072\111\073\125\074\130" +
    "\075\105\076\127\102\106\103\114\001\002\000\054\006" +
    "\107\015\145\016\134\017\113\020\123\021\120\030\112" +
    "\031\110\032\121\033\133\046\117\067\122\070\131\071" +
    "\126\072\111\073\125\074\130\075\105\076\127\102\106" +
    "\103\114\001\002\000\054\006\107\015\145\016\134\017" +
    "\113\020\123\021\120\030\112\031\110\032\121\033\133" +
    "\046\117\067\122\070\131\071\126\072\111\073\125\074" +
    "\130\075\105\076\127\102\106\103\114\001\002\000\054" +
    "\006\107\015\145\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\067\122\070\131" +
    "\071\126\072\111\073\125\074\130\075\105\076\127\102" +
    "\106\103\114\001\002\000\054\006\107\015\145\016\134" +
    "\017\113\020\123\021\120\030\112\031\110\032\121\033" +
    "\133\046\117\067\122\070\131\071\126\072\111\073\125" +
    "\074\130\075\105\076\127\102\106\103\114\001\002\000" +
    "\054\006\107\015\145\016\134\017\113\020\123\021\120" +
    "\030\112\031\110\032\121\033\133\046\117\067\122\070" +
    "\131\071\126\072\111\073\125\074\130\075\105\076\127" +
    "\102\106\103\114\001\002\000\054\006\107\015\145\016" +
    "\134\017\113\020\123\021\120\030\112\031\110\032\121" +
    "\033\133\046\117\067\122\070\131\071\126\072\111\073" +
    "\125\074\130\075\105\076\127\102\106\103\114\001\002" +
    "\000\054\006\107\015\145\016\134\017\113\020\123\021" +
    "\120\030\112\031\110\032\121\033\133\046\117\067\122" +
    "\070\131\071\126\072\111\073\125\074\130\075\105\076" +
    "\127\102\106\103\114\001\002\000\054\006\107\015\145" +
    "\016\134\017\113\020\123\021\120\030\112\031\110\032" +
    "\121\033\133\046\117\067\122\070\131\071\126\072\111" +
    "\073\125\074\130\075\105\076\127\102\106\103\114\001" +
    "\002\000\054\006\107\015\145\016\134\017\113\020\123" +
    "\021\120\030\112\031\110\032\121\033\133\046\117\067" +
    "\122\070\131\071\126\072\111\073\125\074\130\075\105" +
    "\076\127\102\106\103\114\001\002\000\072\005\uffbe\006" +
    "\uffbe\007\170\010\164\011\167\012\165\013\155\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\171\027\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\100\uffbe\106\uffbe\113\uffbe\117\uffbe\120" +
    "\uffbe\001\002\000\072\005\176\006\157\007\170\010\164" +
    "\011\167\012\165\013\155\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\171\027\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\100" +
    "\uffb6\106\uffb6\113\uffb6\117\uffb6\120\uffb6\001\002\000\072" +
    "\005\176\006\157\007\170\010\164\011\167\012\165\013" +
    "\155\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\171\027\uffb0" +
    "\034\172\035\160\036\175\037\163\040\162\041\173\042" +
    "\156\043\uffb0\044\uffb0\045\uffb0\100\uffb0\106\uffb0\113\uffb0" +
    "\117\uffb0\120\uffb0\001\002\000\072\005\176\006\157\007" +
    "\170\010\164\011\167\012\165\013\155\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\171\027\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\100\uffb3\106\uffb3\113\uffb3\117\uffb3\120\uffb3\001" +
    "\002\000\072\005\176\006\157\007\170\010\164\011\167" +
    "\012\165\013\155\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\171\027\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\100\uffb8\106" +
    "\uffb8\113\uffb8\117\uffb8\120\uffb8\001\002\000\006\025\152" +
    "\027\205\001\002\000\072\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\011\uffac\012\uffac\013\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\100\uffac\106\uffac\113\uffac\117\uffac\120\uffac\001\002\000" +
    "\072\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\165" +
    "\013\155\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\171\027" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\100\uffbc\106\uffbc\113" +
    "\uffbc\117\uffbc\120\uffbc\001\002\000\072\005\uffba\006\uffba" +
    "\007\uffba\010\uffba\011\uffba\012\165\013\155\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\171\027\uffba\034\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044" +
    "\uffba\045\uffba\100\uffba\106\uffba\113\uffba\117\uffba\120\uffba" +
    "\001\002\000\072\005\176\006\157\007\170\010\164\011" +
    "\167\012\165\013\155\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\171\027\uffaf\034\172\035\160\036\175\037\163\040" +
    "\162\041\173\042\156\043\uffaf\044\uffaf\045\uffaf\100\uffaf" +
    "\106\uffaf\113\uffaf\117\uffaf\120\uffaf\001\002\000\072\005" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\155" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\171\027\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\044\uffb9\045\uffb9\100\uffb9\106\uffb9\113\uffb9\117" +
    "\uffb9\120\uffb9\001\002\000\072\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\012\165\013\155\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\171\027\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\100\uffbb\106\uffbb\113\uffbb\117\uffbb\120\uffbb\001\002" +
    "\000\072\005\176\006\157\007\170\010\164\011\167\012" +
    "\165\013\155\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\171" +
    "\027\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\100\uffb5\106\uffb5" +
    "\113\uffb5\117\uffb5\120\uffb5\001\002\000\072\005\176\006" +
    "\157\007\170\010\164\011\167\012\165\013\155\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\171\027\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\100\uffb4\106\uffb4\113\uffb4\117\uffb4\120" +
    "\uffb4\001\002\000\072\005\176\006\157\007\170\010\164" +
    "\011\167\012\165\013\155\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\171\027\uffb1\034\172\035\160\036\175\037\163" +
    "\040\162\041\173\042\156\043\uffb1\044\174\045\166\100" +
    "\uffb1\106\uffb1\113\uffb1\117\uffb1\120\uffb1\001\002\000\072" +
    "\005\176\006\157\007\170\010\164\011\167\012\165\013" +
    "\155\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\171\027\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\100\uffb7\106\uffb7\113\uffb7" +
    "\117\uffb7\120\uffb7\001\002\000\072\005\uffbd\006\uffbd\007" +
    "\170\010\164\011\167\012\165\013\155\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\171\027\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\100\uffbd\106\uffbd\113\uffbd\117\uffbd\120\uffbd\001" +
    "\002\000\072\005\176\006\157\007\170\010\164\011\167" +
    "\012\165\013\155\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\171\027\uffb2\034\172\035\160\036\175\037\163\040\162" +
    "\041\173\042\uffb2\043\uffb2\044\uffb2\045\uffb2\100\uffb2\106" +
    "\uffb2\113\uffb2\117\uffb2\120\uffb2\001\002\000\072\005\uff97" +
    "\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\022" +
    "\uff97\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\034\uff97" +
    "\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\100\uff97\106\uff97\113\uff97\117\uff97" +
    "\120\uff97\001\002\000\072\005\uffa7\006\uffa7\007\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\100\uffa7\106\uffa7\113\uffa7\117\uffa7\120\uffa7\001\002\000" +
    "\054\006\107\015\145\016\134\017\113\020\123\021\120" +
    "\030\112\031\110\032\121\033\133\046\117\067\122\070" +
    "\131\071\126\072\111\073\125\074\130\075\105\076\127" +
    "\102\106\103\114\001\002\000\050\005\176\006\157\007" +
    "\170\010\164\011\167\012\165\013\155\025\225\026\171" +
    "\034\172\035\160\036\175\037\163\040\162\041\173\042" +
    "\156\043\161\044\174\045\166\001\002\000\054\006\107" +
    "\015\145\016\134\017\113\020\123\021\120\030\112\031" +
    "\110\032\121\033\133\046\117\067\122\070\131\071\126" +
    "\072\111\073\125\074\130\075\105\076\127\102\106\103" +
    "\114\001\002\000\050\005\176\006\157\007\170\010\164" +
    "\011\167\012\165\013\155\022\227\026\171\034\172\035" +
    "\160\036\175\037\163\040\162\041\173\042\156\043\161" +
    "\044\174\045\166\001\002\000\072\005\uffa1\006\uffa1\007" +
    "\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\100\uffa1\106\uffa1\113\uffa1\117\uffa1\120\uffa1\001" +
    "\002\000\054\006\107\015\145\016\134\017\113\020\123" +
    "\021\120\030\112\031\110\032\121\033\133\046\117\067" +
    "\122\070\131\071\126\072\111\073\125\074\130\075\105" +
    "\076\127\102\106\103\114\001\002\000\050\005\176\006" +
    "\157\007\170\010\164\011\167\012\165\013\155\022\232" +
    "\026\171\034\172\035\160\036\175\037\163\040\162\041" +
    "\173\042\156\043\161\044\174\045\166\001\002\000\072" +
    "\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\100\uffa3\106\uffa3\113\uffa3" +
    "\117\uffa3\120\uffa3\001\002\000\054\006\107\015\145\016" +
    "\134\017\113\020\123\021\120\030\112\031\110\032\121" +
    "\033\133\046\117\067\122\070\131\071\126\072\111\073" +
    "\125\074\130\075\105\076\127\102\106\103\114\001\002" +
    "\000\050\005\176\006\157\007\170\010\164\011\167\012" +
    "\165\013\155\025\235\026\171\034\172\035\160\036\175" +
    "\037\163\040\162\041\173\042\156\043\161\044\174\045" +
    "\166\001\002\000\054\006\107\015\145\016\134\017\113" +
    "\020\123\021\120\030\112\031\110\032\121\033\133\046" +
    "\117\067\122\070\131\071\126\072\111\073\125\074\130" +
    "\075\105\076\127\102\106\103\114\001\002\000\050\005" +
    "\176\006\157\007\170\010\164\011\167\012\165\013\155" +
    "\022\237\026\171\034\172\035\160\036\175\037\163\040" +
    "\162\041\173\042\156\043\161\044\174\045\166\001\002" +
    "\000\072\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\027\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\100\uffa2\106\uffa2" +
    "\113\uffa2\117\uffa2\120\uffa2\001\002\000\054\006\107\015" +
    "\145\016\134\017\113\020\123\021\120\030\112\031\110" +
    "\032\121\033\133\046\117\067\122\070\131\071\126\072" +
    "\111\073\125\074\130\075\105\076\127\102\106\103\114" +
    "\001\002\000\050\005\176\006\157\007\170\010\164\011" +
    "\167\012\165\013\155\022\242\026\171\034\172\035\160" +
    "\036\175\037\163\040\162\041\173\042\156\043\161\044" +
    "\174\045\166\001\002\000\072\005\uffa5\006\uffa5\007\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\013\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\026\uffa5\027\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\100\uffa5\106\uffa5\113\uffa5\117\uffa5\120\uffa5\001\002" +
    "\000\054\006\107\015\145\016\134\017\113\020\123\021" +
    "\120\030\112\031\110\032\121\033\133\046\117\067\122" +
    "\070\131\071\126\072\111\073\125\074\130\075\105\076" +
    "\127\102\106\103\114\001\002\000\050\005\176\006\157" +
    "\007\170\010\164\011\167\012\165\013\155\025\245\026" +
    "\171\034\172\035\160\036\175\037\163\040\162\041\173" +
    "\042\156\043\161\044\174\045\166\001\002\000\054\006" +
    "\107\015\145\016\134\017\113\020\123\021\120\030\112" +
    "\031\110\032\121\033\133\046\117\067\122\070\131\071" +
    "\126\072\111\073\125\074\130\075\105\076\127\102\106" +
    "\103\114\001\002\000\050\005\176\006\157\007\170\010" +
    "\164\011\167\012\165\013\155\022\247\026\171\034\172" +
    "\035\160\036\175\037\163\040\162\041\173\042\156\043" +
    "\161\044\174\045\166\001\002\000\072\005\uff98\006\uff98" +
    "\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\026\uff98\027\uff98\034\uff98\035\uff98" +
    "\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\100\uff98\106\uff98\113\uff98\117\uff98\120\uff98" +
    "\001\002\000\050\005\176\006\157\007\170\010\164\011" +
    "\167\012\165\013\155\022\251\026\171\034\172\035\160" +
    "\036\175\037\163\040\162\041\173\042\156\043\161\044" +
    "\174\045\166\001\002\000\072\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\011\uffab\012\uffab\013\uffab\022\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\027\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\100\uffab\106\uffab\113\uffab\117\uffab\120\uffab\001\002" +
    "\000\072\005\176\006\157\007\170\010\164\011\167\012" +
    "\165\013\155\022\uffae\023\uffae\024\uffae\025\uffae\026\171" +
    "\027\uffae\034\172\035\160\036\175\037\163\040\162\041" +
    "\173\042\uffae\043\uffae\044\uffae\045\uffae\100\uffae\106\uffae" +
    "\113\uffae\117\uffae\120\uffae\001\002\000\006\013\254\015" +
    "\221\001\002\000\054\006\107\015\145\016\134\017\113" +
    "\020\123\021\120\030\112\031\110\032\121\033\133\046" +
    "\117\067\122\070\131\071\126\072\111\073\125\074\130" +
    "\075\105\076\127\102\106\103\114\001\002\000\052\005" +
    "\176\006\157\007\170\010\164\011\167\012\165\013\155" +
    "\025\uffc6\026\171\027\uffc6\034\172\035\160\036\175\037" +
    "\163\040\162\041\173\042\156\043\161\044\174\045\166" +
    "\001\002\000\054\006\107\015\145\016\134\017\113\020" +
    "\123\021\120\030\112\031\110\032\121\033\133\046\117" +
    "\067\122\070\131\071\126\072\111\073\125\074\130\075" +
    "\105\076\127\102\106\103\114\001\002\000\050\005\176" +
    "\006\157\007\170\010\164\011\167\012\165\013\155\022" +
    "\260\026\171\034\172\035\160\036\175\037\163\040\162" +
    "\041\173\042\156\043\161\044\174\045\166\001\002\000" +
    "\072\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\100\uffa8\106\uffa8\113" +
    "\uffa8\117\uffa8\120\uffa8\001\002\000\054\006\107\015\145" +
    "\016\134\017\113\020\123\021\120\030\112\031\110\032" +
    "\121\033\133\046\117\067\122\070\131\071\126\072\111" +
    "\073\125\074\130\075\105\076\127\102\106\103\114\001" +
    "\002\000\050\005\176\006\157\007\170\010\164\011\167" +
    "\012\165\013\155\022\263\026\171\034\172\035\160\036" +
    "\175\037\163\040\162\041\173\042\156\043\161\044\174" +
    "\045\166\001\002\000\072\005\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\025\uffa6\026\uffa6\027\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\100\uffa6\106\uffa6\113\uffa6\117\uffa6\120\uffa6\001\002\000" +
    "\072\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad" +
    "\013\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\100\uffad\106\uffad\113" +
    "\uffad\117\uffad\120\uffad\001\002\000\004\015\266\001\002" +
    "\000\004\022\267\001\002\000\072\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\100\uffa9\106\uffa9\113\uffa9\117\uffa9\120\uffa9\001" +
    "\002\000\054\006\107\015\145\016\134\017\113\020\123" +
    "\021\120\030\112\031\110\032\121\033\133\046\117\067" +
    "\122\070\131\071\126\072\111\073\125\074\130\075\105" +
    "\076\127\102\106\103\114\001\002\000\050\005\176\006" +
    "\157\007\170\010\164\011\167\012\165\013\155\022\272" +
    "\026\171\034\172\035\160\036\175\037\163\040\162\041" +
    "\173\042\156\043\161\044\174\045\166\001\002\000\072" +
    "\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\100\uffa4\106\uffa4\113\uffa4" +
    "\117\uffa4\120\uffa4\001\002\000\054\006\107\015\145\016" +
    "\134\017\113\020\123\021\120\030\112\031\110\032\121" +
    "\033\133\046\117\067\122\070\131\071\126\072\111\073" +
    "\125\074\130\075\105\076\127\102\106\103\114\001\002" +
    "\000\014\015\ufff7\053\ufff7\054\ufff7\122\ufff7\123\ufff7\001" +
    "\002\000\050\005\176\006\157\007\170\010\164\011\167" +
    "\012\165\013\155\023\276\026\171\034\172\035\160\036" +
    "\175\037\163\040\162\041\173\042\156\043\161\044\174" +
    "\045\166\001\002\000\014\015\ufff8\053\ufff8\054\ufff8\122" +
    "\ufff8\123\ufff8\001\002\000\012\022\uffc0\024\uffc0\025\uffc0" +
    "\040\uffc0\001\002\000\004\023\u0148\001\002\000\004\023" +
    "\u0147\001\002\000\054\006\107\015\145\016\134\017\113" +
    "\020\123\021\120\030\112\031\110\032\121\033\133\046" +
    "\117\067\122\070\131\071\126\072\111\073\125\074\130" +
    "\075\105\076\127\102\106\103\114\001\002\000\004\023" +
    "\u0138\001\002\000\004\023\uff5f\001\002\000\104\006\107" +
    "\015\321\016\134\017\113\020\123\021\120\030\112\031" +
    "\110\032\121\033\133\046\117\065\320\066\310\067\122" +
    "\070\131\071\126\072\111\073\125\074\130\075\105\076" +
    "\127\102\106\103\114\104\335\105\317\110\302\112\330" +
    "\114\305\116\307\121\327\124\325\125\304\126\316\001" +
    "\002\000\050\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\023\u0134\026\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\001\002\000\004\015\u0128\001\002\000\004\021" +
    "\u0125\001\002\000\112\006\uff8c\015\uff8c\016\uff8c\017\uff8c" +
    "\020\uff8c\021\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\046" +
    "\uff8c\055\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c" +
    "\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\102\uff8c\103" +
    "\uff8c\104\uff8c\105\uff8c\110\uff8c\111\uff8c\112\uff8c\114\uff8c" +
    "\115\uff8c\116\uff8c\121\uff8c\124\uff8c\125\uff8c\126\uff8c\001" +
    "\002\000\106\006\107\015\321\016\134\017\113\020\123" +
    "\021\120\030\112\031\110\032\121\033\133\046\117\055" +
    "\u0123\065\320\066\310\067\122\070\131\071\126\072\111" +
    "\073\125\074\130\075\105\076\127\102\106\103\114\104" +
    "\335\105\317\110\302\112\330\114\305\116\307\121\327" +
    "\124\325\125\304\126\316\001\002\000\004\023\u0122\001" +
    "\002\000\004\023\u0121\001\002\000\112\006\uff8e\015\uff8e" +
    "\016\uff8e\017\uff8e\020\uff8e\021\uff8e\030\uff8e\031\uff8e\032" +
    "\uff8e\033\uff8e\046\uff8e\055\uff8e\065\uff8e\066\uff8e\067\uff8e" +
    "\070\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076" +
    "\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\110\uff8e\111\uff8e" +
    "\112\uff8e\114\uff8e\115\uff8e\116\uff8e\121\uff8e\124\uff8e\125" +
    "\uff8e\126\uff8e\001\002\000\004\023\uff5e\001\002\000\054" +
    "\006\107\015\145\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\067\122\070\131" +
    "\071\126\072\111\073\125\074\130\075\105\076\127\102" +
    "\106\103\114\001\002\000\004\021\u0100\001\002\000\052" +
    "\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\021\146\024\375\026\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\001\002\000\004\023\374\001\002\000\110\006\uff91" +
    "\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\030\uff91\031" +
    "\uff91\032\uff91\033\uff91\046\uff91\055\uff91\065\uff91\066\uff91" +
    "\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075" +
    "\uff91\076\uff91\102\uff91\103\uff91\104\uff91\105\uff91\110\uff91" +
    "\112\uff91\114\uff91\115\uff91\116\uff91\121\uff91\124\uff91\125" +
    "\uff91\126\uff91\001\002\000\046\005\176\006\157\007\170" +
    "\010\164\011\167\012\165\013\361\026\362\034\172\035" +
    "\160\036\175\037\163\040\162\041\173\042\156\043\161" +
    "\044\174\045\166\001\002\000\004\023\uff60\001\002\000" +
    "\004\023\360\001\002\000\004\021\355\001\002\000\054" +
    "\006\107\015\145\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\067\122\070\131" +
    "\071\126\072\111\073\125\074\130\075\105\076\127\102" +
    "\106\103\114\001\002\000\112\006\uff8a\015\uff8a\016\uff8a" +
    "\017\uff8a\020\uff8a\021\uff8a\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\046\uff8a\055\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a" +
    "\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\102" +
    "\uff8a\103\uff8a\104\uff8a\105\uff8a\110\uff8a\111\uff8a\112\uff8a" +
    "\114\uff8a\115\uff8a\116\uff8a\121\uff8a\124\uff8a\125\uff8a\126" +
    "\uff8a\001\002\000\004\023\343\001\002\000\004\023\342" +
    "\001\002\000\004\013\341\001\002\000\004\021\336\001" +
    "\002\000\004\015\337\001\002\000\004\022\340\001\002" +
    "\000\004\023\uffc1\001\002\000\004\002\uff93\001\002\000" +
    "\112\006\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89" +
    "\030\uff89\031\uff89\032\uff89\033\uff89\046\uff89\055\uff89\065" +
    "\uff89\066\uff89\067\uff89\070\uff89\071\uff89\072\uff89\073\uff89" +
    "\074\uff89\075\uff89\076\uff89\102\uff89\103\uff89\104\uff89\105" +
    "\uff89\110\uff89\111\uff89\112\uff89\114\uff89\115\uff89\116\uff89" +
    "\121\uff89\124\uff89\125\uff89\126\uff89\001\002\000\112\006" +
    "\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\030\uff90" +
    "\031\uff90\032\uff90\033\uff90\046\uff90\055\uff90\065\uff90\066" +
    "\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90" +
    "\075\uff90\076\uff90\102\uff90\103\uff90\104\uff90\105\uff90\110" +
    "\uff90\111\uff90\112\uff90\114\uff90\115\uff90\116\uff90\121\uff90" +
    "\124\uff90\125\uff90\126\uff90\001\002\000\050\005\176\006" +
    "\157\007\170\010\164\011\167\012\165\013\155\026\171" +
    "\034\172\035\160\036\175\037\163\040\162\041\173\042" +
    "\156\043\161\044\174\045\166\113\345\001\002\000\106" +
    "\006\107\015\321\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\054\347\065\320" +
    "\066\310\067\122\070\131\071\126\072\111\073\125\074" +
    "\130\075\105\076\127\102\106\103\114\104\335\105\317" +
    "\110\302\112\330\114\305\116\307\121\327\124\325\125" +
    "\304\126\316\001\002\000\112\006\uff67\015\uff67\016\uff67" +
    "\017\uff67\020\uff67\021\uff67\030\uff67\031\uff67\032\uff67\033" +
    "\uff67\046\uff67\055\uff67\065\uff67\066\uff67\067\uff67\070\uff67" +
    "\071\uff67\072\uff67\073\uff67\074\uff67\075\uff67\076\uff67\102" +
    "\uff67\103\uff67\104\uff67\105\uff67\110\uff67\111\uff67\112\uff67" +
    "\114\uff67\115\uff67\116\uff67\121\uff67\124\uff67\125\uff67\126" +
    "\uff67\001\002\000\104\006\107\015\321\016\134\017\113" +
    "\020\123\021\120\030\112\031\110\032\121\033\133\046" +
    "\117\065\320\066\310\067\122\070\131\071\126\072\111" +
    "\073\125\074\130\075\105\076\127\102\106\103\114\104" +
    "\335\105\317\110\302\112\330\114\305\116\307\121\327" +
    "\124\325\125\304\126\316\001\002\000\112\006\uff62\015" +
    "\uff62\016\uff62\017\uff62\020\uff62\021\uff62\030\uff62\031\uff62" +
    "\032\uff62\033\uff62\046\uff62\055\uff62\065\uff62\066\uff62\067" +
    "\uff62\070\uff62\071\uff62\072\uff62\073\uff62\074\uff62\075\uff62" +
    "\076\uff62\102\uff62\103\uff62\104\uff62\105\uff62\110\uff62\111" +
    "\uff62\112\uff62\114\uff62\115\uff62\116\uff62\121\uff62\124\uff62" +
    "\125\uff62\126\uff62\001\002\000\106\006\107\015\321\016" +
    "\134\017\113\020\123\021\120\030\112\031\110\032\121" +
    "\033\133\046\117\055\353\065\320\066\310\067\122\070" +
    "\131\071\126\072\111\073\125\074\130\075\105\076\127" +
    "\102\106\103\114\104\335\105\317\110\302\112\330\114" +
    "\305\116\307\121\327\124\325\125\304\126\316\001\002" +
    "\000\110\006\uff92\015\uff92\016\uff92\017\uff92\020\uff92\021" +
    "\uff92\030\uff92\031\uff92\032\uff92\033\uff92\046\uff92\055\uff92" +
    "\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073" +
    "\uff92\074\uff92\075\uff92\076\uff92\102\uff92\103\uff92\104\uff92" +
    "\105\uff92\110\uff92\112\uff92\114\uff92\115\uff92\116\uff92\121" +
    "\uff92\124\uff92\125\uff92\126\uff92\001\002\000\004\023\354" +
    "\001\002\000\112\006\uff63\015\uff63\016\uff63\017\uff63\020" +
    "\uff63\021\uff63\030\uff63\031\uff63\032\uff63\033\uff63\046\uff63" +
    "\055\uff63\065\uff63\066\uff63\067\uff63\070\uff63\071\uff63\072" +
    "\uff63\073\uff63\074\uff63\075\uff63\076\uff63\102\uff63\103\uff63" +
    "\104\uff63\105\uff63\110\uff63\111\uff63\112\uff63\114\uff63\115" +
    "\uff63\116\uff63\121\uff63\124\uff63\125\uff63\126\uff63\001\002" +
    "\000\004\015\356\001\002\000\004\022\357\001\002\000" +
    "\004\023\uff61\001\002\000\112\006\uff8b\015\uff8b\016\uff8b" +
    "\017\uff8b\020\uff8b\021\uff8b\030\uff8b\031\uff8b\032\uff8b\033" +
    "\uff8b\046\uff8b\055\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b" +
    "\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\102" +
    "\uff8b\103\uff8b\104\uff8b\105\uff8b\110\uff8b\111\uff8b\112\uff8b" +
    "\114\uff8b\115\uff8b\116\uff8b\121\uff8b\124\uff8b\125\uff8b\126" +
    "\uff8b\001\002\000\004\015\370\001\002\000\054\006\107" +
    "\015\145\016\134\017\113\020\123\021\120\030\112\031" +
    "\110\032\121\033\133\046\117\067\122\070\131\071\126" +
    "\072\111\073\125\074\130\075\105\076\127\102\106\103" +
    "\114\001\002\000\006\025\152\027\364\001\002\000\050" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013" +
    "\uffac\024\365\026\uffac\034\uffac\035\uffac\036\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\001" +
    "\002\000\004\040\366\001\002\000\054\006\107\015\145" +
    "\016\134\017\113\020\123\021\120\030\112\031\110\032" +
    "\121\033\133\046\117\067\122\070\131\071\126\072\111" +
    "\073\125\074\130\075\105\076\127\102\106\103\114\001" +
    "\002\000\050\005\176\006\157\007\170\010\164\011\167" +
    "\012\165\013\155\023\uff76\026\171\034\172\035\160\036" +
    "\175\037\163\040\162\041\173\042\156\043\161\044\174" +
    "\045\166\001\002\000\050\005\uff97\006\uff97\007\uff97\010" +
    "\uff97\011\uff97\012\uff97\013\uff97\024\371\026\uff97\034\uff97" +
    "\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\001\002\000\004\040\372\001\002" +
    "\000\054\006\107\015\145\016\134\017\113\020\123\021" +
    "\120\030\112\031\110\032\121\033\133\046\117\067\122" +
    "\070\131\071\126\072\111\073\125\074\130\075\105\076" +
    "\127\102\106\103\114\001\002\000\050\005\176\006\157" +
    "\007\170\010\164\011\167\012\165\013\155\023\uff75\026" +
    "\171\034\172\035\160\036\175\037\163\040\162\041\173" +
    "\042\156\043\161\044\174\045\166\001\002\000\112\006" +
    "\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\046\uff84\055\uff84\065\uff84\066" +
    "\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84" +
    "\075\uff84\076\uff84\102\uff84\103\uff84\104\uff84\105\uff84\110" +
    "\uff84\111\uff84\112\uff84\114\uff84\115\uff84\116\uff84\121\uff84" +
    "\124\uff84\125\uff84\126\uff84\001\002\000\004\040\376\001" +
    "\002\000\054\006\107\015\145\016\134\017\113\020\123" +
    "\021\120\030\112\031\110\032\121\033\133\046\117\067" +
    "\122\070\131\071\126\072\111\073\125\074\130\075\105" +
    "\076\127\102\106\103\114\001\002\000\050\005\176\006" +
    "\157\007\170\010\164\011\167\012\165\013\155\023\uff77" +
    "\026\171\034\172\035\160\036\175\037\163\040\162\041" +
    "\173\042\156\043\161\044\174\045\166\001\002\000\054" +
    "\006\107\015\145\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\067\122\070\131" +
    "\071\126\072\111\073\125\074\130\075\105\076\127\102" +
    "\106\103\114\001\002\000\052\005\176\006\157\007\170" +
    "\010\164\011\167\012\165\013\155\022\uff78\025\uff78\026" +
    "\171\034\172\035\160\036\175\037\163\040\162\041\173" +
    "\042\156\043\161\044\174\045\166\001\002\000\006\022" +
    "\u0104\025\u0103\001\002\000\054\006\107\015\145\016\134" +
    "\017\113\020\123\021\120\030\112\031\110\032\121\033" +
    "\133\046\117\067\122\070\131\071\126\072\111\073\125" +
    "\074\130\075\105\076\127\102\106\103\114\001\002\000" +
    "\004\023\uff7b\001\002\000\052\005\176\006\157\007\170" +
    "\010\164\011\167\012\165\013\155\022\uff79\025\uff79\026" +
    "\171\034\172\035\160\036\175\037\163\040\162\041\173" +
    "\042\156\043\161\044\174\045\166\001\002\000\050\005" +
    "\176\006\157\007\170\010\164\011\167\012\165\013\155" +
    "\026\171\034\172\035\160\036\175\037\163\040\162\041" +
    "\173\042\156\043\161\044\174\045\166\106\u0107\001\002" +
    "\000\074\006\107\015\321\016\134\017\113\020\123\021" +
    "\120\030\112\031\110\032\121\033\133\046\117\054\u010f" +
    "\065\320\066\310\067\122\070\131\071\126\072\111\073" +
    "\125\074\130\075\105\076\127\102\106\103\114\104\335" +
    "\121\327\124\325\125\304\126\316\001\002\000\114\006" +
    "\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e\030\uff6e" +
    "\031\uff6e\032\uff6e\033\uff6e\046\uff6e\055\uff6e\065\uff6e\066" +
    "\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e" +
    "\075\uff6e\076\uff6e\102\uff6e\103\uff6e\104\uff6e\105\uff6e\107" +
    "\uff6e\110\uff6e\111\uff6e\112\uff6e\114\uff6e\115\uff6e\116\uff6e" +
    "\121\uff6e\124\uff6e\125\uff6e\126\uff6e\001\002\000\004\023" +
    "\u0120\001\002\000\004\023\u011f\001\002\000\114\006\uff72" +
    "\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72\030\uff72\031" +
    "\uff72\032\uff72\033\uff72\046\uff72\055\uff72\065\uff72\066\uff72" +
    "\067\uff72\070\uff72\071\uff72\072\uff72\073\uff72\074\uff72\075" +
    "\uff72\076\uff72\102\uff72\103\uff72\104\uff72\105\uff72\107\u011c" +
    "\110\uff72\111\uff72\112\uff72\114\uff72\115\uff72\116\uff72\121" +
    "\uff72\124\uff72\125\uff72\126\uff72\001\002\000\050\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\023" +
    "\u011b\026\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\001\002\000" +
    "\004\023\u011a\001\002\000\004\023\u0119\001\002\000\104" +
    "\006\107\015\321\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\065\320\066\310" +
    "\067\122\070\131\071\126\072\111\073\125\074\130\075" +
    "\105\076\127\102\106\103\114\104\335\105\317\110\302" +
    "\112\330\114\305\116\307\121\327\124\325\125\304\126" +
    "\316\001\002\000\004\023\u0115\001\002\000\004\023\u0114" +
    "\001\002\000\004\023\u0113\001\002\000\114\006\uff81\015" +
    "\uff81\016\uff81\017\uff81\020\uff81\021\uff81\030\uff81\031\uff81" +
    "\032\uff81\033\uff81\046\uff81\055\uff81\065\uff81\066\uff81\067" +
    "\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075\uff81" +
    "\076\uff81\102\uff81\103\uff81\104\uff81\105\uff81\107\uff81\110" +
    "\uff81\111\uff81\112\uff81\114\uff81\115\uff81\116\uff81\121\uff81" +
    "\124\uff81\125\uff81\126\uff81\001\002\000\114\006\uff83\015" +
    "\uff83\016\uff83\017\uff83\020\uff83\021\uff83\030\uff83\031\uff83" +
    "\032\uff83\033\uff83\046\uff83\055\uff83\065\uff83\066\uff83\067" +
    "\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075\uff83" +
    "\076\uff83\102\uff83\103\uff83\104\uff83\105\uff83\107\uff83\110" +
    "\uff83\111\uff83\112\uff83\114\uff83\115\uff83\116\uff83\121\uff83" +
    "\124\uff83\125\uff83\126\uff83\001\002\000\114\006\uff7c\015" +
    "\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\030\uff7c\031\uff7c" +
    "\032\uff7c\033\uff7c\046\uff7c\055\uff7c\065\uff7c\066\uff7c\067" +
    "\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c\075\uff7c" +
    "\076\uff7c\102\uff7c\103\uff7c\104\uff7c\105\uff7c\107\uff7c\110" +
    "\uff7c\111\uff7c\112\uff7c\114\uff7c\115\uff7c\116\uff7c\121\uff7c" +
    "\124\uff7c\125\uff7c\126\uff7c\001\002\000\106\006\107\015" +
    "\321\016\134\017\113\020\123\021\120\030\112\031\110" +
    "\032\121\033\133\046\117\055\u0117\065\320\066\310\067" +
    "\122\070\131\071\126\072\111\073\125\074\130\075\105" +
    "\076\127\102\106\103\114\104\335\105\317\110\302\112" +
    "\330\114\305\116\307\121\327\124\325\125\304\126\316" +
    "\001\002\000\004\023\u0118\001\002\000\114\006\uff6f\015" +
    "\uff6f\016\uff6f\017\uff6f\020\uff6f\021\uff6f\030\uff6f\031\uff6f" +
    "\032\uff6f\033\uff6f\046\uff6f\055\uff6f\065\uff6f\066\uff6f\067" +
    "\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f\074\uff6f\075\uff6f" +
    "\076\uff6f\102\uff6f\103\uff6f\104\uff6f\105\uff6f\107\uff6f\110" +
    "\uff6f\111\uff6f\112\uff6f\114\uff6f\115\uff6f\116\uff6f\121\uff6f" +
    "\124\uff6f\125\uff6f\126\uff6f\001\002\000\114\006\uff82\015" +
    "\uff82\016\uff82\017\uff82\020\uff82\021\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\046\uff82\055\uff82\065\uff82\066\uff82\067" +
    "\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82" +
    "\076\uff82\102\uff82\103\uff82\104\uff82\105\uff82\107\uff82\110" +
    "\uff82\111\uff82\112\uff82\114\uff82\115\uff82\116\uff82\121\uff82" +
    "\124\uff82\125\uff82\126\uff82\001\002\000\114\006\uff7d\015" +
    "\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\030\uff7d\031\uff7d" +
    "\032\uff7d\033\uff7d\046\uff7d\055\uff7d\065\uff7d\066\uff7d\067" +
    "\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d" +
    "\076\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d\107\uff7d\110" +
    "\uff7d\111\uff7d\112\uff7d\114\uff7d\115\uff7d\116\uff7d\121\uff7d" +
    "\124\uff7d\125\uff7d\126\uff7d\001\002\000\114\006\uff7f\015" +
    "\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\033\uff7f\046\uff7f\055\uff7f\065\uff7f\066\uff7f\067" +
    "\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f" +
    "\076\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\107\uff7f\110" +
    "\uff7f\111\uff7f\112\uff7f\114\uff7f\115\uff7f\116\uff7f\121\uff7f" +
    "\124\uff7f\125\uff7f\126\uff7f\001\002\000\076\006\107\015" +
    "\321\016\134\017\113\020\123\021\120\030\112\031\110" +
    "\032\121\033\133\046\117\054\u010f\065\320\066\310\067" +
    "\122\070\131\071\126\072\111\073\125\074\130\075\105" +
    "\076\127\102\106\103\114\104\335\105\317\121\327\124" +
    "\325\125\304\126\316\001\002\000\112\006\uff71\015\uff71" +
    "\016\uff71\017\uff71\020\uff71\021\uff71\030\uff71\031\uff71\032" +
    "\uff71\033\uff71\046\uff71\055\uff71\065\uff71\066\uff71\067\uff71" +
    "\070\uff71\071\uff71\072\uff71\073\uff71\074\uff71\075\uff71\076" +
    "\uff71\102\uff71\103\uff71\104\uff71\105\uff71\110\uff71\111\uff71" +
    "\112\uff71\114\uff71\115\uff71\116\uff71\121\uff71\124\uff71\125" +
    "\uff71\126\uff71\001\002\000\112\006\uff70\015\uff70\016\uff70" +
    "\017\uff70\020\uff70\021\uff70\030\uff70\031\uff70\032\uff70\033" +
    "\uff70\046\uff70\055\uff70\065\uff70\066\uff70\067\uff70\070\uff70" +
    "\071\uff70\072\uff70\073\uff70\074\uff70\075\uff70\076\uff70\102" +
    "\uff70\103\uff70\104\uff70\105\uff70\110\uff70\111\uff70\112\uff70" +
    "\114\uff70\115\uff70\116\uff70\121\uff70\124\uff70\125\uff70\126" +
    "\uff70\001\002\000\114\006\uff7e\015\uff7e\016\uff7e\017\uff7e" +
    "\020\uff7e\021\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\046" +
    "\uff7e\055\uff7e\065\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e" +
    "\072\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e\102\uff7e\103" +
    "\uff7e\104\uff7e\105\uff7e\107\uff7e\110\uff7e\111\uff7e\112\uff7e" +
    "\114\uff7e\115\uff7e\116\uff7e\121\uff7e\124\uff7e\125\uff7e\126" +
    "\uff7e\001\002\000\114\006\uff80\015\uff80\016\uff80\017\uff80" +
    "\020\uff80\021\uff80\030\uff80\031\uff80\032\uff80\033\uff80\046" +
    "\uff80\055\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80" +
    "\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80\102\uff80\103" +
    "\uff80\104\uff80\105\uff80\107\uff80\110\uff80\111\uff80\112\uff80" +
    "\114\uff80\115\uff80\116\uff80\121\uff80\124\uff80\125\uff80\126" +
    "\uff80\001\002\000\112\006\uff8f\015\uff8f\016\uff8f\017\uff8f" +
    "\020\uff8f\021\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\046" +
    "\uff8f\055\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f" +
    "\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\102\uff8f\103" +
    "\uff8f\104\uff8f\105\uff8f\110\uff8f\111\uff8f\112\uff8f\114\uff8f" +
    "\115\uff8f\116\uff8f\121\uff8f\124\uff8f\125\uff8f\126\uff8f\001" +
    "\002\000\112\006\uff85\015\uff85\016\uff85\017\uff85\020\uff85" +
    "\021\uff85\030\uff85\031\uff85\032\uff85\033\uff85\046\uff85\055" +
    "\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85" +
    "\073\uff85\074\uff85\075\uff85\076\uff85\102\uff85\103\uff85\104" +
    "\uff85\105\uff85\110\uff85\111\uff85\112\uff85\114\uff85\115\uff85" +
    "\116\uff85\121\uff85\124\uff85\125\uff85\126\uff85\001\002\000" +
    "\004\013\u0124\001\002\000\004\002\uff94\001\002\000\054" +
    "\006\107\015\145\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\067\122\070\131" +
    "\071\126\072\111\073\125\074\130\075\105\076\127\102" +
    "\106\103\114\001\002\000\006\022\u0127\025\u0103\001\002" +
    "\000\004\023\uff7a\001\002\000\004\024\u0129\001\002\000" +
    "\004\040\u012a\001\002\000\054\006\107\015\145\016\134" +
    "\017\113\020\123\021\120\030\112\031\110\032\121\033" +
    "\133\046\117\067\122\070\131\071\126\072\111\073\125" +
    "\074\130\075\105\076\127\102\106\103\114\001\002\000" +
    "\052\005\176\006\157\007\170\010\164\011\167\012\165" +
    "\013\155\026\171\034\172\035\160\036\175\037\163\040" +
    "\162\041\173\042\156\043\161\044\174\045\166\117\u012d" +
    "\120\u012c\001\002\000\054\006\107\015\145\016\134\017" +
    "\113\020\123\021\120\030\112\031\110\032\121\033\133" +
    "\046\117\067\122\070\131\071\126\072\111\073\125\074" +
    "\130\075\105\076\127\102\106\103\114\001\002\000\054" +
    "\006\107\015\145\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\067\122\070\131" +
    "\071\126\072\111\073\125\074\130\075\105\076\127\102" +
    "\106\103\114\001\002\000\050\005\176\006\157\007\170" +
    "\010\164\011\167\012\165\013\155\026\171\034\172\035" +
    "\160\036\175\037\163\040\162\041\173\042\156\043\161" +
    "\044\174\045\166\113\u012f\001\002\000\106\006\107\015" +
    "\321\016\134\017\113\020\123\021\120\030\112\031\110" +
    "\032\121\033\133\046\117\054\347\065\320\066\310\067" +
    "\122\070\131\071\126\072\111\073\125\074\130\075\105" +
    "\076\127\102\106\103\114\104\335\105\317\110\302\112" +
    "\330\114\305\116\307\121\327\124\325\125\304\126\316" +
    "\001\002\000\112\006\uff65\015\uff65\016\uff65\017\uff65\020" +
    "\uff65\021\uff65\030\uff65\031\uff65\032\uff65\033\uff65\046\uff65" +
    "\055\uff65\065\uff65\066\uff65\067\uff65\070\uff65\071\uff65\072" +
    "\uff65\073\uff65\074\uff65\075\uff65\076\uff65\102\uff65\103\uff65" +
    "\104\uff65\105\uff65\110\uff65\111\uff65\112\uff65\114\uff65\115" +
    "\uff65\116\uff65\121\uff65\124\uff65\125\uff65\126\uff65\001\002" +
    "\000\050\005\176\006\157\007\170\010\164\011\167\012" +
    "\165\013\155\026\171\034\172\035\160\036\175\037\163" +
    "\040\162\041\173\042\156\043\161\044\174\045\166\113" +
    "\u0132\001\002\000\106\006\107\015\321\016\134\017\113" +
    "\020\123\021\120\030\112\031\110\032\121\033\133\046" +
    "\117\054\347\065\320\066\310\067\122\070\131\071\126" +
    "\072\111\073\125\074\130\075\105\076\127\102\106\103" +
    "\114\104\335\105\317\110\302\112\330\114\305\116\307" +
    "\121\327\124\325\125\304\126\316\001\002\000\112\006" +
    "\uff64\015\uff64\016\uff64\017\uff64\020\uff64\021\uff64\030\uff64" +
    "\031\uff64\032\uff64\033\uff64\046\uff64\055\uff64\065\uff64\066" +
    "\uff64\067\uff64\070\uff64\071\uff64\072\uff64\073\uff64\074\uff64" +
    "\075\uff64\076\uff64\102\uff64\103\uff64\104\uff64\105\uff64\110" +
    "\uff64\111\uff64\112\uff64\114\uff64\115\uff64\116\uff64\121\uff64" +
    "\124\uff64\125\uff64\126\uff64\001\002\000\112\006\uff87\015" +
    "\uff87\016\uff87\017\uff87\020\uff87\021\uff87\030\uff87\031\uff87" +
    "\032\uff87\033\uff87\046\uff87\055\uff87\065\uff87\066\uff87\067" +
    "\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87" +
    "\076\uff87\102\uff87\103\uff87\104\uff87\105\uff87\110\uff87\111" +
    "\uff87\112\uff87\114\uff87\115\uff87\116\uff87\121\uff87\124\uff87" +
    "\125\uff87\126\uff87\001\002\000\106\006\107\015\321\016" +
    "\134\017\113\020\123\021\120\030\112\031\110\032\121" +
    "\033\133\046\117\065\320\066\310\067\122\070\131\071" +
    "\126\072\111\073\125\074\130\075\105\076\127\102\106" +
    "\103\114\104\335\105\317\110\302\112\330\114\305\115" +
    "\u0136\116\307\121\327\124\325\125\304\126\316\001\002" +
    "\000\054\006\107\015\145\016\134\017\113\020\123\021" +
    "\120\030\112\031\110\032\121\033\133\046\117\067\122" +
    "\070\131\071\126\072\111\073\125\074\130\075\105\076" +
    "\127\102\106\103\114\001\002\000\050\005\176\006\157" +
    "\007\170\010\164\011\167\012\165\013\155\023\uff66\026" +
    "\171\034\172\035\160\036\175\037\163\040\162\041\173" +
    "\042\156\043\161\044\174\045\166\001\002\000\112\006" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\046\uff8d\055\uff8d\065\uff8d\066" +
    "\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d" +
    "\075\uff8d\076\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d\110" +
    "\uff8d\111\uff8d\112\uff8d\114\uff8d\115\uff8d\116\uff8d\121\uff8d" +
    "\124\uff8d\125\uff8d\126\uff8d\001\002\000\050\005\176\006" +
    "\157\007\170\010\164\011\167\012\165\013\155\026\171" +
    "\034\172\035\160\036\175\037\163\040\162\041\173\042" +
    "\156\043\161\044\174\045\166\100\u013a\001\002\000\054" +
    "\006\107\015\145\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\067\122\070\131" +
    "\071\126\072\111\073\125\074\130\075\105\076\127\102" +
    "\106\103\114\001\002\000\060\006\107\015\145\016\134" +
    "\017\113\020\123\021\120\030\112\031\110\032\121\033" +
    "\133\046\117\055\u0140\067\122\070\131\071\126\072\111" +
    "\073\125\074\130\075\105\076\127\102\106\103\114\111" +
    "\u0143\001\002\000\060\006\uff6a\015\uff6a\016\uff6a\017\uff6a" +
    "\020\uff6a\021\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\046" +
    "\uff6a\055\uff6a\067\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a" +
    "\074\uff6a\075\uff6a\076\uff6a\102\uff6a\103\uff6a\111\uff6a\001" +
    "\002\000\006\024\u013e\025\152\001\002\000\104\006\107" +
    "\015\321\016\134\017\113\020\123\021\120\030\112\031" +
    "\110\032\121\033\133\046\117\065\320\066\310\067\122" +
    "\070\131\071\126\072\111\073\125\074\130\075\105\076" +
    "\127\102\106\103\114\104\335\105\317\110\302\112\330" +
    "\114\305\116\307\121\327\124\325\125\304\126\316\001" +
    "\002\000\060\006\uff69\015\uff69\016\uff69\017\uff69\020\uff69" +
    "\021\uff69\030\uff69\031\uff69\032\uff69\033\uff69\046\uff69\055" +
    "\uff69\067\uff69\070\uff69\071\uff69\072\uff69\073\uff69\074\uff69" +
    "\075\uff69\076\uff69\102\uff69\103\uff69\111\uff69\001\002\000" +
    "\004\023\uff6c\001\002\000\004\055\u0146\001\002\000\060" +
    "\006\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\030" +
    "\uff6b\031\uff6b\032\uff6b\033\uff6b\046\uff6b\055\uff6b\067\uff6b" +
    "\070\uff6b\071\uff6b\072\uff6b\073\uff6b\074\uff6b\075\uff6b\076" +
    "\uff6b\102\uff6b\103\uff6b\111\uff6b\001\002\000\004\024\u0144" +
    "\001\002\000\104\006\107\015\321\016\134\017\113\020" +
    "\123\021\120\030\112\031\110\032\121\033\133\046\117" +
    "\065\320\066\310\067\122\070\131\071\126\072\111\073" +
    "\125\074\130\075\105\076\127\102\106\103\114\104\335" +
    "\105\317\110\302\112\330\114\305\116\307\121\327\124" +
    "\325\125\304\126\316\001\002\000\004\055\uff68\001\002" +
    "\000\004\023\uff6d\001\002\000\112\006\uff86\015\uff86\016" +
    "\uff86\017\uff86\020\uff86\021\uff86\030\uff86\031\uff86\032\uff86" +
    "\033\uff86\046\uff86\055\uff86\065\uff86\066\uff86\067\uff86\070" +
    "\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86\076\uff86" +
    "\102\uff86\103\uff86\104\uff86\105\uff86\110\uff86\111\uff86\112" +
    "\uff86\114\uff86\115\uff86\116\uff86\121\uff86\124\uff86\125\uff86" +
    "\126\uff86\001\002\000\112\006\uff88\015\uff88\016\uff88\017" +
    "\uff88\020\uff88\021\uff88\030\uff88\031\uff88\032\uff88\033\uff88" +
    "\046\uff88\055\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071" +
    "\uff88\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\102\uff88" +
    "\103\uff88\104\uff88\105\uff88\110\uff88\111\uff88\112\uff88\114" +
    "\uff88\115\uff88\116\uff88\121\uff88\124\uff88\125\uff88\126\uff88" +
    "\001\002\000\006\021\u014b\024\u014a\001\002\000\032\015" +
    "\056\016\045\021\053\030\061\056\043\057\046\060\057" +
    "\061\050\062\060\064\051\077\044\101\047\001\002\000" +
    "\006\015\031\053\u014c\001\002\000\004\015\031\001\002" +
    "\000\006\022\u0152\023\u0153\001\002\000\006\024\u0150\025" +
    "\037\001\002\000\006\022\uffe1\023\uffe1\001\002\000\032" +
    "\015\056\016\045\021\053\030\061\056\043\057\046\060" +
    "\057\061\050\062\060\064\051\077\044\101\047\001\002" +
    "\000\006\022\uffe0\023\uffe0\001\002\000\004\024\u0155\001" +
    "\002\000\006\015\031\053\u014c\001\002\000\006\022\uffe2" +
    "\023\uffe2\001\002\000\032\015\056\016\045\021\053\030" +
    "\061\056\043\057\046\060\057\061\050\062\060\064\051" +
    "\077\044\101\047\001\002\000\004\023\u0157\001\002\000" +
    "\012\053\016\054\u0159\122\025\123\013\001\002\000\004" +
    "\054\u015d\001\002\000\104\006\107\015\321\016\134\017" +
    "\113\020\123\021\120\030\112\031\110\032\121\033\133" +
    "\046\117\065\320\066\310\067\122\070\131\071\126\072" +
    "\111\073\125\074\130\075\105\076\127\102\106\103\114" +
    "\104\335\105\317\110\302\112\330\114\305\116\307\121" +
    "\327\124\325\125\304\126\316\001\002\000\106\006\107" +
    "\015\321\016\134\017\113\020\123\021\120\030\112\031" +
    "\110\032\121\033\133\046\117\055\u015b\065\320\066\310" +
    "\067\122\070\131\071\126\072\111\073\125\074\130\075" +
    "\105\076\127\102\106\103\114\104\335\105\317\110\302" +
    "\112\330\114\305\116\307\121\327\124\325\125\304\126" +
    "\316\001\002\000\004\023\u015c\001\002\000\010\054\uffe8" +
    "\122\uffe8\123\uffe8\001\002\000\104\006\107\015\321\016" +
    "\134\017\113\020\123\021\120\030\112\031\110\032\121" +
    "\033\133\046\117\065\320\066\310\067\122\070\131\071" +
    "\126\072\111\073\125\074\130\075\105\076\127\102\106" +
    "\103\114\104\335\105\317\110\302\112\330\114\305\116" +
    "\307\121\327\124\325\125\304\126\316\001\002\000\106" +
    "\006\107\015\321\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\055\u015f\065\320" +
    "\066\310\067\122\070\131\071\126\072\111\073\125\074" +
    "\130\075\105\076\127\102\106\103\114\104\335\105\317" +
    "\110\302\112\330\114\305\116\307\121\327\124\325\125" +
    "\304\126\316\001\002\000\004\023\u0160\001\002\000\010" +
    "\054\uffea\122\uffea\123\uffea\001\002\000\006\024\u0162\025" +
    "\037\001\002\000\032\015\056\016\045\021\053\030\061" +
    "\056\043\057\046\060\057\061\050\062\060\064\051\077" +
    "\044\101\047\001\002\000\006\022\uffdf\023\uffdf\001\002" +
    "\000\004\023\u0165\001\002\000\012\053\016\054\u0167\122" +
    "\025\123\013\001\002\000\004\054\u016b\001\002\000\104" +
    "\006\107\015\321\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\065\320\066\310" +
    "\067\122\070\131\071\126\072\111\073\125\074\130\075" +
    "\105\076\127\102\106\103\114\104\335\105\317\110\302" +
    "\112\330\114\305\116\307\121\327\124\325\125\304\126" +
    "\316\001\002\000\106\006\107\015\321\016\134\017\113" +
    "\020\123\021\120\030\112\031\110\032\121\033\133\046" +
    "\117\055\u0169\065\320\066\310\067\122\070\131\071\126" +
    "\072\111\073\125\074\130\075\105\076\127\102\106\103" +
    "\114\104\335\105\317\110\302\112\330\114\305\116\307" +
    "\121\327\124\325\125\304\126\316\001\002\000\004\023" +
    "\u016a\001\002\000\010\054\uffe7\122\uffe7\123\uffe7\001\002" +
    "\000\104\006\107\015\321\016\134\017\113\020\123\021" +
    "\120\030\112\031\110\032\121\033\133\046\117\065\320" +
    "\066\310\067\122\070\131\071\126\072\111\073\125\074" +
    "\130\075\105\076\127\102\106\103\114\104\335\105\317" +
    "\110\302\112\330\114\305\116\307\121\327\124\325\125" +
    "\304\126\316\001\002\000\106\006\107\015\321\016\134" +
    "\017\113\020\123\021\120\030\112\031\110\032\121\033" +
    "\133\046\117\055\u016d\065\320\066\310\067\122\070\131" +
    "\071\126\072\111\073\125\074\130\075\105\076\127\102" +
    "\106\103\114\104\335\105\317\110\302\112\330\114\305" +
    "\116\307\121\327\124\325\125\304\126\316\001\002\000" +
    "\004\023\u016e\001\002\000\010\054\uffe9\122\uffe9\123\uffe9" +
    "\001\002\000\010\054\uffee\122\uffee\123\uffee\001\002\000" +
    "\010\054\uffed\122\uffed\123\uffed\001\002\000\004\054\uffdb" +
    "\001\002\000\004\002\000\001\002\000\016\015\031\051" +
    "\030\053\016\054\uffde\122\025\123\013\001\002\000\006" +
    "\025\037\040\u0176\001\002\000\016\015\uffd9\051\uffd9\053" +
    "\uffd9\054\uffd9\122\uffd9\123\uffd9\001\002\000\032\015\056" +
    "\016\045\021\053\030\061\056\043\057\046\060\057\061" +
    "\050\062\060\064\051\077\044\101\047\001\002\000\004" +
    "\023\u0178\001\002\000\016\015\uffd8\051\uffd8\053\uffd8\054" +
    "\uffd8\122\uffd8\123\uffd8\001\002\000\016\015\uffda\051\uffda" +
    "\053\uffda\054\uffda\122\uffda\123\uffda\001\002\000\004\054" +
    "\uffdd\001\002\000\012\015\ufff2\054\ufff2\122\ufff2\123\ufff2" +
    "\001\002\000\006\024\u0180\025\037\001\002\000\012\015" +
    "\031\054\ufff6\122\025\123\013\001\002\000\012\015\ufff3" +
    "\054\ufff3\122\ufff3\123\ufff3\001\002\000\004\054\ufff5\001" +
    "\002\000\032\015\056\016\045\021\053\030\061\056\043" +
    "\057\046\060\057\061\050\062\060\064\051\077\044\101" +
    "\047\001\002\000\006\023\u0183\040\u0182\001\002\000\054" +
    "\006\107\015\145\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\067\122\070\131" +
    "\071\126\072\111\073\125\074\130\075\105\076\127\102" +
    "\106\103\114\001\002\000\012\015\ufff0\054\ufff0\122\ufff0" +
    "\123\ufff0\001\002\000\050\005\176\006\157\007\170\010" +
    "\164\011\167\012\165\013\155\023\u0185\026\171\034\172" +
    "\035\160\036\175\037\163\040\162\041\173\042\156\043" +
    "\161\044\174\045\166\001\002\000\012\015\ufff1\054\ufff1" +
    "\122\ufff1\123\ufff1\001\002\000\006\021\u0187\023\u0188\001" +
    "\002\000\006\015\031\053\u014c\001\002\000\012\053\016" +
    "\054\u018a\122\025\123\013\001\002\000\004\054\u018e\001" +
    "\002\000\104\006\107\015\321\016\134\017\113\020\123" +
    "\021\120\030\112\031\110\032\121\033\133\046\117\065" +
    "\320\066\310\067\122\070\131\071\126\072\111\073\125" +
    "\074\130\075\105\076\127\102\106\103\114\104\335\105" +
    "\317\110\302\112\330\114\305\116\307\121\327\124\325" +
    "\125\304\126\316\001\002\000\106\006\107\015\321\016" +
    "\134\017\113\020\123\021\120\030\112\031\110\032\121" +
    "\033\133\046\117\055\u018c\065\320\066\310\067\122\070" +
    "\131\071\126\072\111\073\125\074\130\075\105\076\127" +
    "\102\106\103\114\104\335\105\317\110\302\112\330\114" +
    "\305\116\307\121\327\124\325\125\304\126\316\001\002" +
    "\000\004\023\u018d\001\002\000\010\054\uffe3\122\uffe3\123" +
    "\uffe3\001\002\000\104\006\107\015\321\016\134\017\113" +
    "\020\123\021\120\030\112\031\110\032\121\033\133\046" +
    "\117\065\320\066\310\067\122\070\131\071\126\072\111" +
    "\073\125\074\130\075\105\076\127\102\106\103\114\104" +
    "\335\105\317\110\302\112\330\114\305\116\307\121\327" +
    "\124\325\125\304\126\316\001\002\000\106\006\107\015" +
    "\321\016\134\017\113\020\123\021\120\030\112\031\110" +
    "\032\121\033\133\046\117\055\u0190\065\320\066\310\067" +
    "\122\070\131\071\126\072\111\073\125\074\130\075\105" +
    "\076\127\102\106\103\114\104\335\105\317\110\302\112" +
    "\330\114\305\116\307\121\327\124\325\125\304\126\316" +
    "\001\002\000\004\023\u0191\001\002\000\010\054\uffe5\122" +
    "\uffe5\123\uffe5\001\002\000\006\022\u0193\023\u0153\001\002" +
    "\000\004\023\u0194\001\002\000\012\053\016\054\u0196\122" +
    "\025\123\013\001\002\000\004\054\u019a\001\002\000\104" +
    "\006\107\015\321\016\134\017\113\020\123\021\120\030" +
    "\112\031\110\032\121\033\133\046\117\065\320\066\310" +
    "\067\122\070\131\071\126\072\111\073\125\074\130\075" +
    "\105\076\127\102\106\103\114\104\335\105\317\110\302" +
    "\112\330\114\305\116\307\121\327\124\325\125\304\126" +
    "\316\001\002\000\106\006\107\015\321\016\134\017\113" +
    "\020\123\021\120\030\112\031\110\032\121\033\133\046" +
    "\117\055\u0198\065\320\066\310\067\122\070\131\071\126" +
    "\072\111\073\125\074\130\075\105\076\127\102\106\103" +
    "\114\104\335\105\317\110\302\112\330\114\305\116\307" +
    "\121\327\124\325\125\304\126\316\001\002\000\004\023" +
    "\u0199\001\002\000\010\054\uffe4\122\uffe4\123\uffe4\001\002" +
    "\000\104\006\107\015\321\016\134\017\113\020\123\021" +
    "\120\030\112\031\110\032\121\033\133\046\117\065\320" +
    "\066\310\067\122\070\131\071\126\072\111\073\125\074" +
    "\130\075\105\076\127\102\106\103\114\104\335\105\317" +
    "\110\302\112\330\114\305\116\307\121\327\124\325\125" +
    "\304\126\316\001\002\000\106\006\107\015\321\016\134" +
    "\017\113\020\123\021\120\030\112\031\110\032\121\033" +
    "\133\046\117\055\u019c\065\320\066\310\067\122\070\131" +
    "\071\126\072\111\073\125\074\130\075\105\076\127\102" +
    "\106\103\114\104\335\105\317\110\302\112\330\114\305" +
    "\116\307\121\327\124\325\125\304\126\316\001\002\000" +
    "\004\023\u019d\001\002\000\010\054\uffe6\122\uffe6\123\uffe6" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019b\000\006\002\004\004\003\001\001\000\022\011" +
    "\011\012\020\020\017\026\014\054\013\055\023\056\026" +
    "\061\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\u017b\021\u017c\022\u017a\001\001\000\010" +
    "\006\u0173\013\u0174\014\u0172\001\001\000\002\001\001\000" +
    "\004\026\u0171\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\056\u016e\061\u016f\001\001\000\002\001\001\000" +
    "\042\003\323\023\311\024\322\027\331\031\313\040\277" +
    "\041\314\044\302\050\310\051\325\052\330\053\332\062" +
    "\305\063\300\064\312\065\321\001\001\000\002\001\001" +
    "\000\010\006\031\007\032\010\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\031\010\034\020\035" +
    "\054\013\055\023\056\026\061\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\041\015\054\016\040\032\051\036\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\073\015\054\016\040" +
    "\032\051\036\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\076\015\054\016\040\032\051\036\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\115" +
    "\033\131\034\134\062\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\263\062\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\251\062\114\001\001\000\006\003\247\062" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\115\034\141\062\114\001\001" +
    "\000\002\001\001\000\014\005\140\015\054\016\040\032" +
    "\051\036\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\143\062\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\146\035\150\062\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\153\062\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\217\062\114\001" +
    "\001\000\006\003\216\062\114\001\001\000\006\003\215" +
    "\062\114\001\001\000\006\003\214\062\114\001\001\000" +
    "\006\003\213\062\114\001\001\000\006\003\212\062\114" +
    "\001\001\000\006\003\211\062\114\001\001\000\006\003" +
    "\210\062\114\001\001\000\006\003\207\062\114\001\001" +
    "\000\006\003\206\062\114\001\001\000\006\003\205\062" +
    "\114\001\001\000\010\003\146\035\203\062\114\001\001" +
    "\000\006\003\202\062\114\001\001\000\006\003\201\062" +
    "\114\001\001\000\006\003\200\062\114\001\001\000\006" +
    "\003\177\062\114\001\001\000\006\003\176\062\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\223\062\114\001\001\000\002" +
    "\001\001\000\006\003\225\062\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\230\062\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\233\062" +
    "\114\001\001\000\002\001\001\000\006\003\235\062\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\240\062\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\243\062\114\001\001\000\002\001\001\000" +
    "\006\003\245\062\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\254\062\114\001\001" +
    "\000\002\001\001\000\006\003\256\062\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\261\062\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\270\062\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\274\062\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\u0138" +
    "\062\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\323\023\u0134\024\322\027\331\031\313\040\277" +
    "\041\314\044\302\050\310\051\325\052\330\053\332\062" +
    "\305\063\300\064\312\065\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\323\024\351\027\331\031\313\040\277\041\314" +
    "\044\302\050\310\051\325\052\330\053\332\062\305\063" +
    "\300\064\312\065\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\u0105\062\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\343\062\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\323\024\347\027\331\031\313\040" +
    "\277\041\314\044\302\050\310\051\325\052\330\053\332" +
    "\062\305\063\300\064\312\065\321\066\345\001\001\000" +
    "\002\001\001\000\042\003\323\023\350\024\322\027\331" +
    "\031\313\040\277\041\314\044\302\050\310\051\325\052" +
    "\330\053\332\062\305\063\300\064\312\065\321\001\001" +
    "\000\002\001\001\000\040\003\323\024\351\027\331\031" +
    "\313\040\277\041\314\044\302\050\310\051\325\052\330" +
    "\053\332\062\305\063\300\064\312\065\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\146\035\362\062\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\366\062\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\372\062" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\376\062\114\001\001\000\002\001" +
    "\001\000\010\003\u0100\030\u0101\062\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\u0104\062\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\323\025\u0107\027\u0110\031\u010d\040\u0108\042" +
    "\u010a\053\u0111\062\u010b\063\u0109\064\u010c\065\u010f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\003\323\023\u0115\024\322\027\331\031" +
    "\313\040\277\041\314\044\302\050\310\051\325\052\330" +
    "\053\332\062\305\063\300\064\312\065\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\323\024\351\027\331\031\313\040\277\041\314\044\302" +
    "\050\310\051\325\052\330\053\332\062\305\063\300\064" +
    "\312\065\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\323\025\u0107\027\u0110\031\u010d\040\u0108\041\u011d" +
    "\042\u011c\053\u0111\062\u010b\063\u0109\064\u010c\065\u010f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\u0100\030\u0125" +
    "\062\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\u012a\062\114" +
    "\001\001\000\002\001\001\000\006\003\u0130\062\114\001" +
    "\001\000\006\003\u012d\062\114\001\001\000\002\001\001" +
    "\000\042\003\323\024\347\027\331\031\313\040\277\041" +
    "\314\044\302\050\310\051\325\052\330\053\332\062\305" +
    "\063\300\064\312\065\321\066\u012f\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\323\024\347\027\331" +
    "\031\313\040\277\041\314\044\302\050\310\051\325\052" +
    "\330\053\332\062\305\063\300\064\312\065\321\066\u0132" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\323\024\351\027\331\031\313\040\277\041\314\044\302" +
    "\050\310\051\325\052\330\053\332\062\305\063\300\064" +
    "\312\065\321\001\001\000\006\003\u0136\062\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\146\035\u013c\045\u013a\046\u013b\062\114\001\001" +
    "\000\014\003\146\035\u013c\046\u0141\047\u0140\062\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\323" +
    "\024\u013e\027\331\031\313\040\277\041\314\044\302\050" +
    "\310\051\325\052\330\053\332\062\305\063\300\064\312" +
    "\065\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\323\024\u0144\027\331\031\313\040\277\041\314\044" +
    "\302\050\310\051\325\052\330\053\332\062\305\063\300" +
    "\064\312\065\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\u0163\015\054\016\040\032\051\036\053\001" +
    "\001\000\010\006\u014d\057\u014c\060\u014e\001\001\000\004" +
    "\006\u0160\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\u0150\015\054\016\040\032\051" +
    "\036\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\u014d\060\u0153\001\001\000\002\001\001\000\014" +
    "\005\u0155\015\054\016\040\032\051\036\053\001\001\000" +
    "\002\001\001\000\014\020\u0157\054\013\055\023\056\026" +
    "\061\022\001\001\000\002\001\001\000\042\003\323\023" +
    "\u0159\024\322\027\331\031\313\040\277\041\314\044\302" +
    "\050\310\051\325\052\330\053\332\062\305\063\300\064" +
    "\312\065\321\001\001\000\040\003\323\024\351\027\331" +
    "\031\313\040\277\041\314\044\302\050\310\051\325\052" +
    "\330\053\332\062\305\063\300\064\312\065\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\323\023" +
    "\u015d\024\322\027\331\031\313\040\277\041\314\044\302" +
    "\050\310\051\325\052\330\053\332\062\305\063\300\064" +
    "\312\065\321\001\001\000\040\003\323\024\351\027\331" +
    "\031\313\040\277\041\314\044\302\050\310\051\325\052" +
    "\330\053\332\062\305\063\300\064\312\065\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\u0162\015\054\016\040\032\051\036\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\u0165\054" +
    "\013\055\023\056\026\061\022\001\001\000\002\001\001" +
    "\000\042\003\323\023\u0167\024\322\027\331\031\313\040" +
    "\277\041\314\044\302\050\310\051\325\052\330\053\332" +
    "\062\305\063\300\064\312\065\321\001\001\000\040\003" +
    "\323\024\351\027\331\031\313\040\277\041\314\044\302" +
    "\050\310\051\325\052\330\053\332\062\305\063\300\064" +
    "\312\065\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\323\023\u016b\024\322\027\331\031\313\040" +
    "\277\041\314\044\302\050\310\051\325\052\330\053\332" +
    "\062\305\063\300\064\312\065\321\001\001\000\040\003" +
    "\323\024\351\027\331\031\313\040\277\041\314\044\302" +
    "\050\310\051\325\052\330\053\332\062\305\063\300\064" +
    "\312\065\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\u0173\011\u0179\013\u0178\020\017" +
    "\054\013\055\023\056\026\061\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\u0176\015\054\016\040" +
    "\032\051\036\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\u017b\022\u017d\054\u017e\055" +
    "\023\056\026\061\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\u0180\015\054\016\040\032\051\036" +
    "\053\001\001\000\002\001\001\000\006\003\u0183\062\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\u014d\057\u0191\060\u014e" +
    "\001\001\000\014\020\u0188\054\013\055\023\056\026\061" +
    "\022\001\001\000\002\001\001\000\042\003\323\023\u018a" +
    "\024\322\027\331\031\313\040\277\041\314\044\302\050" +
    "\310\051\325\052\330\053\332\062\305\063\300\064\312" +
    "\065\321\001\001\000\040\003\323\024\351\027\331\031" +
    "\313\040\277\041\314\044\302\050\310\051\325\052\330" +
    "\053\332\062\305\063\300\064\312\065\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\323\023\u018e" +
    "\024\322\027\331\031\313\040\277\041\314\044\302\050" +
    "\310\051\325\052\330\053\332\062\305\063\300\064\312" +
    "\065\321\001\001\000\040\003\323\024\351\027\331\031" +
    "\313\040\277\041\314\044\302\050\310\051\325\052\330" +
    "\053\332\062\305\063\300\064\312\065\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\020\u0194\054\013\055\023\056\026\061" +
    "\022\001\001\000\002\001\001\000\042\003\323\023\u0196" +
    "\024\322\027\331\031\313\040\277\041\314\044\302\050" +
    "\310\051\325\052\330\053\332\062\305\063\300\064\312" +
    "\065\321\001\001\000\040\003\323\024\351\027\331\031" +
    "\313\040\277\041\314\044\302\050\310\051\325\052\330" +
    "\053\332\062\305\063\300\064\312\065\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\323\023\u019a" +
    "\024\322\027\331\031\313\040\277\041\314\044\302\050" +
    "\310\051\325\052\330\053\332\062\305\063\300\064\312" +
    "\065\321\001\001\000\040\003\323\024\351\027\331\031" +
    "\313\040\277\041\314\044\302\050\310\051\325\052\330" +
    "\053\332\062\305\063\300\064\312\065\321\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static LinkedList<Instruccion> lista;

	

	public  void setLista(LinkedList<Instruccion> listaG){
		lista = listaG;
	}

	public  LinkedList<Instruccion> getLista(){
		return lista;
	}
	
	public static int cont=0;
	public void syntax_error(Symbol s){
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
	}

	 public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= insNombrePrograma insType cuerpoPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addAll(a); RESULT.addAll(b); setLista(RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= insNombrePrograma cuerpoPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addAll(a); setLista(RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // insNombrePrograma ::= PROGRAM ID PNTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insNombrePrograma",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // insConstantes ::= CONST listaDeclaracionConstantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insConstantes",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // insConstantes ::= CONST listaDeclaracionConstantes insVar 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insConstantes",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // insConstantes ::= insVar 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insConstantes",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listaDeclaracionConstantes ::= listaDeclaracionConstantes declaracionConstante 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionConstantes",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaDeclaracionConstantes ::= declaracionConstante 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addLast(a);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionConstantes",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionConstante ::= listaID DSPUNTOS tipoDato IGUAL expresion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(c,bleft,bright,true,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionConstante ::= listaID DSPUNTOS tipoDato PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(null,bleft,bright,true,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // insVar ::= VAR listaDeclaracionVariables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insVar",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // insVar ::= VAR listaDeclaracionVariables insFunciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insVar",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // insVar ::= insFunciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insVar",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaDeclaracionVariables ::= listaDeclaracionVariables declaracionVariable 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVariables",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaDeclaracionVariables ::= declaracionVariable 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addLast(a);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVariables",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionVariable ::= listaID DSPUNTOS tipoDato IGUAL expresion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(c,bleft,bright,false,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionVariable ::= listaID DSPUNTOS tipoDato PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(null,bleft,bright,false,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // insFunciones ::= listaFunciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFunciones",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listaFunciones ::= listaFunciones insFuncion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Funcion b = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaFunciones",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listaFunciones ::= listaFunciones insProcedure 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Funcion b = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaFunciones",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaFunciones ::= insFuncion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaFunciones",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listaFunciones ::= insProcedure 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaFunciones",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // insFuncion ::= FUNCTION ID PARIZQ listaParametros PARDER DSPUNTOS tipoDato PNTCOMA insVar BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		LinkedList<Parametro> b = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 d.addAll(e); RESULT = new Funcion(b,a.toString(),c,d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFuncion",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // insFuncion ::= FUNCTION ID DSPUNTOS tipoDato PNTCOMA insVar BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 c.addAll(d); RESULT = new Funcion(new LinkedList<>(),a.toString(),b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFuncion",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // insFuncion ::= FUNCTION ID PARIZQ listaParametros PARDER DSPUNTOS tipoDato PNTCOMA BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Parametro> b = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Funcion(b,a.toString(),c,d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFuncion",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // insFuncion ::= FUNCTION ID DSPUNTOS tipoDato PNTCOMA BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Funcion(new LinkedList<>(),a.toString(),b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFuncion",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // insProcedure ::= PROCEDURE ID PARIZQ listaParametros PARDER PNTCOMA insVar BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Parametro> b = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 d.addAll(e); RESULT = new Funcion(b,a.toString(),new Type("",Tipo.VOID),d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insProcedure",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // insProcedure ::= PROCEDURE ID PNTCOMA insVar BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 c.addAll(d); RESULT = new Funcion(new LinkedList<>(),a.toString(),new Type("",Tipo.VOID),c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insProcedure",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // insProcedure ::= PROCEDURE ID PARIZQ listaParametros PARDER PNTCOMA BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Parametro> b = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Funcion(b,a.toString(),new Type("",Tipo.VOID),d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insProcedure",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // insProcedure ::= PROCEDURE ID PNTCOMA BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Funcion(new LinkedList<>(),a.toString(),new Type("",Tipo.VOID),c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insProcedure",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listaParametros ::= listaParametros PNTCOMA parametro 
            {
              LinkedList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Parametro> a = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro b = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaParametros ::= parametro 
            {
              LinkedList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro a = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametro ::= listaID DSPUNTOS tipoDato 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Parametro(a,false,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametro ::= VAR listaID DSPUNTOS tipoDato 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Parametro(a,true,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // insType ::= TYPE listaType 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // insType ::= TYPE listaType insConstantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // insType ::= insConstantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // insType ::= error PNTCOMA 
            {
              LinkedList<Instruccion> RESULT =null;
		 RESULT = new LinkedList<Instruccion>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaType ::= listaType equivalencia 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		TypeDeclaration b = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaType",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaType ::= equivalencia 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		TypeDeclaration a = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaType",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // equivalencia ::= listaID IGUAL tipoDato PNTCOMA 
            {
              TypeDeclaration RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new TypeDeclaration(a,aleft,aright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencia",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // insEnum ::= PARIZQ listaID PARDER 
            {
              Enumerador RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Enumerador(b,bleft,bright,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insEnum",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipoDato ::= INTEGER 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.INT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipoDato ::= BOOLEAN 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.BOOLEAN); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoDato ::= REAL 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.DOUBLE); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoDato ::= CHARP 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.CHAR); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoDato ::= WORD 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.WORD); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoDato ::= STRING 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.STRING); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoDato ::= insDimen 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Dimension a = (Dimension)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type("",Tipo.DIMENSION); RESULT.setValor(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoDato ::= ID 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.ID); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoDato ::= insArray 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoDato ::= insRegistro 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoDato ::= insEnum 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Enumerador a = (Enumerador)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type("",Tipo.ENUM); RESULT.setValor(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // insDimen ::= ENTERO PNT PNT ENTERO 
            {
              Dimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Dimension(new Expresion(a,Tipo.INT,aleft,aright),new Expresion(b,Tipo.INT,bleft,bright),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insDimen",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // insDimen ::= CHAR PNT PNT CHAR 
            {
              Dimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Dimension(new Expresion(a,Tipo.CHAR,aleft,aright),new Expresion(b,Tipo.CHAR,bleft,bright),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insDimen",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // insArray ::= ARRAY LLAVEIZQ dimensionList LLAVEDER OF tipoDato 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Dimension> a = (LinkedList<Dimension>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

				if(b.getTipo() == Tipo.ARRAY){
					Arreglo temp = (Arreglo)b.getValor();
					LinkedList<Dimension> lista = temp.getDimensiones();
					a.addAll(lista);
					
					Type type = new Type(Tipo.ARRAY,b.getTipoArray());
					type.setValor(new Arreglo(a,aleft,aright,b.getTipoArray())); 
					RESULT = type;
				}
				else {
					Type type = new Type(Tipo.ARRAY,b.getTipo());
					type.setValor(new Arreglo(a,aleft,aright,b.getTipo())); 
					RESULT = type;
				}

			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insArray",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dimensionList ::= dimensionList COMA dimension 
            {
              LinkedList<Dimension> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Dimension> a = (LinkedList<Dimension>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Dimension b = (Dimension)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensionList",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dimensionList ::= dimension 
            {
              LinkedList<Dimension> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Dimension a = (Dimension)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a);	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensionList",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dimension ::= expresion PNT PNT expresion 
            {
              Dimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Dimension(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dimension ::= ID 
            {
              Dimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Dimension(a.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // insRegistro ::= RECORD listaAtributos END 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Type("",Tipo.REGISTRO); RESULT.setValor(new Registro(a,aleft,aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insRegistro",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // listaAtributos ::= listaAtributos ID DSPUNTOS tipoDato PNTCOMA 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; RESULT.addLast(new Atributo(b.toString(),c)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAtributos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listaAtributos ::= ID DSPUNTOS tipoDato PNTCOMA 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(new Atributo(a.toString(),b)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAtributos",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // insFree ::= FREE PARIZQ ID PARDER 
            {
              Free RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Free(a.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFree",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // listaID ::= listaID COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b.toString().toLowerCase()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaID",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // listaID ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<String>(); RESULT.addLast(a.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaID",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.SUMA,aleft,aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.RESTA,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MULTIPLICACION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion DIVIDIDO expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.DIVISION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion MODULO expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MODULO,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion POTENCIA expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.POTENCIA,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MAYOR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MENOR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MAYORIGUAL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion MENORIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MENORIGUAL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.IGUAL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion DIFERENTE expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.DIFERENTE,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.AND,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.OR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion NAND expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.NAND,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion NOR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.NOR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,null,Operacion.NOT,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,null,Operacion.NEGATIVO,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= expresion LLAVEIZQ listaAcceso LLAVEDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,Operacion.ACCESOARRAY,aleft,aright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= llamadaFuncion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= SIZEOF PARIZQ ID PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(Operacion.SIZEOF,aleft,aright,a.toString(),null); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= MALLOC PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.MALLOC,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= LENGTH PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.LENGTH,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= TOLOWERCASE PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TOLOWERCASE,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= TOUPPERCASE PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TOUPPERCASE,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= TRUNK PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TRUNK,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= ROUND PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.ROUND,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= REPLACE PARIZQ expresion COMA expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,b,Operacion.REPLACE,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= EQUALS PARIZQ expresion COMA expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,b,Operacion.EQUALS,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.INT,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= DECIMAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.DOUBLE,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= CHAR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.CHAR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= CADENA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.STRING,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= TRUE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= FALSE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.ID,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= NIL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.NULL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= CHARAT PARIZQ expresion COMA expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,b,Operacion.CHARAT,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= expresion PNT ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,null,Operacion.ACCESOID,aleft,aright,b.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // llamadaFuncion ::= ID PARIZQ listaAcceso PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(Operacion.LLAMADA,aleft,aright,a.toString(),b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // llamadaFuncion ::= ID PARIZQ PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Expresion(Operacion.LLAMADA,aleft,aright,a.toString(),new LinkedList<>()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // cuerpoPrincipal ::= BEGIN instruccionesPrincipal END PNT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoPrincipal",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cuerpoPrincipal ::= BEGIN END PNT 
            {
              LinkedList<Instruccion> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoPrincipal",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // instruccionesPrincipal ::= instruccionesPrincipal instruccionPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesPrincipal",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // instruccionesPrincipal ::= instruccionPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesPrincipal",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // instruccionPrincipal ::= insWrite PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Writeln a = (Writeln)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // instruccionPrincipal ::= insAsignacion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // instruccionPrincipal ::= ifSuperior 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		IfSuperior a = (IfSuperior)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // instruccionPrincipal ::= insSwitch PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		SWITCH a = (SWITCH)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // instruccionPrincipal ::= insWhile 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		WHILE a = (WHILE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // instruccionPrincipal ::= insRepeat PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		REPEAT a = (REPEAT)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // instruccionPrincipal ::= insFor 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		FOR a = (FOR)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // instruccionPrincipal ::= insRead PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Read a = (Read)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // instruccionPrincipal ::= insFree PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Free a = (Free)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // instruccionPrincipal ::= llamadaFuncion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // instruccionPrincipal ::= insBreak PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Break a = (Break)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // instruccionPrincipal ::= insContinue PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Continue a = (Continue)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // instruccionPrincipal ::= insExit PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Exit a = (Exit)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // instruccionOneLine ::= insWrite PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Writeln a = (Writeln)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // instruccionOneLine ::= insAsignacion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // instruccionOneLine ::= insRead PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Read a = (Read)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // instruccionOneLine ::= insFree PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Free a = (Free)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // instruccionOneLine ::= llamadaFuncion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // instruccionOneLine ::= insBreak PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Break a = (Break)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // instruccionOneLine ::= insContinue PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Continue a = (Continue)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // instruccionOneLine ::= insExit PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Exit a = (Exit)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // insWrite ::= WRITELN PARIZQ listaExpresiones PARDER 
            {
              Writeln RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Writeln(a,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insWrite",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // insWrite ::= WRITE PARIZQ listaExpresiones PARDER 
            {
              Writeln RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Writeln(a,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insWrite",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // listaExpresiones ::= listaExpresiones COMA expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.SUMA,aleft,aright);	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaExpresiones",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // listaExpresiones ::= expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaExpresiones",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // insAsignacion ::= ID DSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a.toString(),b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insAsignacion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // insAsignacion ::= expresion LLAVEIZQ listaAcceso LLAVEDER DSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoArreglo(a,c,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insAsignacion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // insAsignacion ::= expresion PNT ID DSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoRegistro(a,c,b.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insAsignacion",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // listaAcceso ::= listaAcceso COMA expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAcceso",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // listaAcceso ::= expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAcceso",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ifSuperior ::= IF expresion THEN insIf 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(new IF(a,aleft,aright,b)); RESULT = new IfSuperior(lista,aleft,aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ifSuperior ::= IF expresion THEN insIf ELSE insIf 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(new IF(a,aleft,aright,b)); lista.addLast(new IF(null,bleft,bright,c));  RESULT = new IfSuperior(lista,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ifSuperior ::= IF expresion THEN insIf ELSE ifSuperior 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		IfSuperior c = (IfSuperior)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(new IF(a,aleft,aright,b)); lista.addAll(c.getListado()); RESULT = new IfSuperior(lista,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // insIf ::= BEGIN instruccionesPrincipal END PNTCOMA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new LinkedList<>(); RESULT.addAll(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insIf",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // insIf ::= instruccionOneLine 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insIf",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // insSwitch ::= CASE expresion OF listaCase insDefault END 
            {
              SWITCH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<CASE> b = (LinkedList<CASE>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		CASE c = (CASE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 b.addLast(c); RESULT = new SWITCH(b,aleft,aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insSwitch",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // insSwitch ::= CASE expresion OF listaCase END 
            {
              SWITCH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<CASE> b = (LinkedList<CASE>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SWITCH(b,aleft,aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insSwitch",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // listaCase ::= listaCase insCase 
            {
              LinkedList<CASE> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<CASE> a = (LinkedList<CASE>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		CASE b = (CASE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaCase",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // listaCase ::= insCase 
            {
              LinkedList<CASE> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		CASE a = (CASE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaCase",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // insCase ::= listaAcceso DSPUNTOS instruccionPrincipal 
            {
              CASE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> lista = new LinkedList<>(); lista.addLast(b); RESULT = new CASE(a,lista,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insCase",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // insDefault ::= DEFAULT DSPUNTOS instruccionPrincipal 
            {
              CASE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> lista = new LinkedList<>(); lista.addLast(b); RESULT = new CASE(null,lista,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insDefault",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // insWhile ::= WHILE expresion DO insOneLine 
            {
              WHILE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new WHILE(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insWhile",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // insRepeat ::= REPEAT instruccionesPrincipal UNTIL expresion 
            {
              REPEAT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new REPEAT(b,a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insRepeat",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // insFor ::= FOR ID DSPUNTOS IGUAL expresion TO expresion DO insOneLine 
            {
              FOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new FOR(a.toString(),b,c,d,aleft,aright,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFor",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // insFor ::= FOR ID DSPUNTOS IGUAL expresion DOWNTO expresion DO insOneLine 
            {
              FOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new FOR(a.toString(),b,c,d,aleft,aright,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFor",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // insOneLine ::= BEGIN instruccionesPrincipal END PNTCOMA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insOneLine",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // insOneLine ::= instruccionPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.push(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insOneLine",52, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // insRead ::= READ PARIZQ ID PARDER 
            {
              Read RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Read(a.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insRead",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // insBreak ::= BREAK 
            {
              Break RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Break(aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insBreak",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // insContinue ::= CONTINUE 
            {
              Continue RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Continue(aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insContinue",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // insExit ::= EXIT 
            {
              Exit RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Exit(aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insExit",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
