
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Pascal.Parser;

import java_cup.runtime.*;
import Pascal.Analisis.*;
import Pascal.Analisis.TipoDato.*;
import Pascal.Componentes.*;
import Pascal.Componentes.UserTypes.*;
import Pascal.Componentes.Arreglos.*;
import Pascal.Componentes.Registros.*;
import Pascal.Componentes.SentenciaIf.*;
import java.util.LinkedList;
import Pascal.Componentes.SentenciaSwitch.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\002\004\000\002\004" +
    "\005\000\002\011\004\000\002\011\005\000\002\011\003" +
    "\000\002\007\004\000\002\007\003\000\002\010\010\000" +
    "\002\010\006\000\002\010\010\000\002\015\004\000\002" +
    "\015\005\000\002\015\003\000\002\016\004\000\002\016" +
    "\003\000\002\017\010\000\002\017\006\000\002\017\010" +
    "\000\002\012\004\000\002\012\005\000\002\012\003\000" +
    "\002\012\004\000\002\014\004\000\002\014\003\000\002" +
    "\013\006\000\002\013\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\026\010\000\002\027\005\000\002" +
    "\027\003\000\002\030\006\000\002\030\003\000\002\032" +
    "\006\000\002\033\007\000\002\033\006\000\002\006\005" +
    "\000\002\006\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\003\004\000\002" +
    "\003\005\000\002\003\006\000\002\003\006\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\003\010\000" +
    "\002\003\010\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\010" +
    "\000\002\003\005\000\002\022\006\000\002\022\005\000" +
    "\002\020\004\000\002\020\003\000\002\021\004\000\002" +
    "\021\004\000\002\021\003\000\002\021\004\000\002\023" +
    "\006\000\002\023\006\000\002\024\005\000\002\024\003" +
    "\000\002\025\006\000\002\025\011\000\002\025\010\000" +
    "\002\031\005\000\002\031\003\000\002\034\003\000\002" +
    "\034\004\000\002\034\004\000\002\034\005\000\002\035" +
    "\011\000\002\035\006\000\002\036\004\000\002\036\003" +
    "\000\002\037\012\000\002\037\007\000\002\040\010\000" +
    "\002\040\005\000\002\041\010\000\002\041\007\000\002" +
    "\042\004\000\002\042\003\000\002\043\006\000\002\044" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\004\050\006\001\002\000\014\003\020\051" +
    "\022\052\015\053\014\054\021\001\002\000\004\002\011" +
    "\001\002\000\004\015\007\001\002\000\004\023\010\001" +
    "\002\000\014\003\uffff\051\uffff\052\uffff\053\uffff\054\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\002\uffec\001" +
    "\002\000\004\002\ufff4\001\002\000\004\015\u0111\001\002" +
    "\000\004\015\253\001\002\000\004\002\ufffc\001\002\000" +
    "\004\002\000\001\002\000\004\023\u0106\001\002\000\066" +
    "\006\064\015\266\016\111\017\070\020\100\021\075\030" +
    "\071\031\066\032\076\033\110\046\074\055\261\064\257" +
    "\065\265\066\077\067\107\070\104\071\067\072\102\073" +
    "\105\074\063\075\103\101\065\102\072\103\264\106\272" +
    "\001\002\000\004\015\023\001\002\000\010\024\uffd4\025" +
    "\uffd4\040\251\001\002\000\006\024\032\025\031\001\002" +
    "\000\012\002\ufffa\015\ufffa\053\ufffa\054\ufffa\001\002\000" +
    "\012\002\ufffe\015\023\053\014\054\021\001\002\000\004" +
    "\002\ufffd\001\002\000\012\002\ufffb\015\ufffb\053\ufffb\054" +
    "\ufffb\001\002\000\004\015\250\001\002\000\024\015\043" +
    "\030\045\056\034\057\036\060\044\061\040\062\046\076" +
    "\035\100\037\001\002\000\006\023\245\040\244\001\002" +
    "\000\006\023\uffe6\040\uffe6\001\002\000\004\026\062\001" +
    "\002\000\006\023\uffe5\040\uffe5\001\002\000\004\015\047" +
    "\001\002\000\006\023\uffe1\040\uffe1\001\002\000\006\023" +
    "\uffdf\040\uffdf\001\002\000\006\023\uffde\040\uffde\001\002" +
    "\000\006\023\uffe0\040\uffe0\001\002\000\006\023\uffe4\040" +
    "\uffe4\001\002\000\006\023\uffe3\040\uffe3\001\002\000\006" +
    "\023\uffe2\040\uffe2\001\002\000\004\024\057\001\002\000" +
    "\006\015\051\055\052\001\002\000\004\024\054\001\002" +
    "\000\004\023\053\001\002\000\006\023\uffd8\040\uffd8\001" +
    "\002\000\024\015\043\030\045\056\034\057\036\060\044" +
    "\061\040\062\046\076\035\100\037\001\002\000\004\023" +
    "\056\001\002\000\006\015\uffd7\055\uffd7\001\002\000\024" +
    "\015\043\030\045\056\034\057\036\060\044\061\040\062" +
    "\046\076\035\100\037\001\002\000\004\023\061\001\002" +
    "\000\006\015\uffd6\055\uffd6\001\002\000\054\006\064\015" +
    "\101\016\111\017\070\020\100\021\075\030\071\031\066" +
    "\032\076\033\110\046\074\066\077\067\107\070\104\071" +
    "\067\072\102\073\105\074\063\075\103\101\065\102\072" +
    "\001\002\000\004\021\241\001\002\000\054\006\064\015" +
    "\115\016\111\017\070\020\100\021\075\030\071\031\066" +
    "\032\076\033\110\046\074\066\077\067\107\070\104\071" +
    "\067\072\102\073\105\074\063\075\103\101\065\102\072" +
    "\001\002\000\004\021\235\001\002\000\062\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\027\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\077\uffb3\104\uffb3\001\002\000\004\021\232\001" +
    "\002\000\062\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\027" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\042\uffb5\043\uffb5\044\uffb5\045\uffb5\077\uffb5\104\uffb5\001" +
    "\002\000\062\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\077\uffb4\104\uffb4\001" +
    "\002\000\004\021\227\001\002\000\044\005\134\006\126" +
    "\007\131\010\132\011\140\012\127\013\224\034\136\035" +
    "\130\036\133\037\125\040\137\041\143\042\124\043\144" +
    "\044\141\045\142\001\002\000\054\006\064\015\115\016" +
    "\111\017\070\020\100\021\075\030\071\031\066\032\076" +
    "\033\110\046\074\066\077\067\107\070\104\071\067\072" +
    "\102\073\105\074\063\075\103\101\065\102\072\001\002" +
    "\000\054\006\064\015\115\016\111\017\070\020\100\021" +
    "\075\030\071\031\066\032\076\033\110\046\074\066\077" +
    "\067\107\070\104\071\067\072\102\073\105\074\063\075" +
    "\103\101\065\102\072\001\002\000\062\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\027\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\077\uffb2\104\uffb2\001\002\000\004\021\214\001\002" +
    "\000\062\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\027\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\077\uffaf\104\uffaf\001\002" +
    "\000\052\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\013\uffb0\025\uffd9\026\116\027\uffd9\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\001\002\000\004\021\211\001\002\000\004" +
    "\021\206\001\002\000\004\021\201\001\002\000\004\021" +
    "\174\001\002\000\006\025\167\027\170\001\002\000\004" +
    "\021\113\001\002\000\062\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\027\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\077\uffb1" +
    "\104\uffb1\001\002\000\062\005\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\027\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\077\uffb6" +
    "\104\uffb6\001\002\000\006\025\uffdb\027\uffdb\001\002\000" +
    "\054\006\064\015\115\016\111\017\070\020\100\021\075" +
    "\030\071\031\066\032\076\033\110\046\074\066\077\067" +
    "\107\070\104\071\067\072\102\073\105\074\063\075\103" +
    "\101\065\102\072\001\002\000\046\005\134\006\126\007" +
    "\131\010\132\011\140\012\127\013\135\022\166\034\136" +
    "\035\130\036\133\037\125\040\137\041\143\042\124\043" +
    "\144\044\141\045\142\001\002\000\064\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\116\027\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\077\uffb0\104\uffb0\001\002\000\054\006\064" +
    "\015\115\016\111\017\070\020\100\021\075\030\071\031" +
    "\066\032\076\033\110\046\074\066\077\067\107\070\104" +
    "\071\067\072\102\073\105\074\063\075\103\101\065\102" +
    "\072\001\002\000\052\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\024\uff9c\025\uff9c\027\uff9c\034" +
    "\136\035\130\036\133\037\125\040\137\041\143\042\124" +
    "\043\144\044\141\045\142\001\002\000\006\025\121\027" +
    "\122\001\002\000\054\006\064\015\115\016\111\017\070" +
    "\020\100\021\075\030\071\031\066\032\076\033\110\046" +
    "\074\066\077\067\107\070\104\071\067\072\102\073\105" +
    "\074\063\075\103\101\065\102\072\001\002\000\062\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\027\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\077\uffc0\104\uffc0\001\002\000\052\005" +
    "\134\006\126\007\131\010\132\011\140\012\127\013\135" +
    "\024\uff9d\025\uff9d\027\uff9d\034\136\035\130\036\133\037" +
    "\125\040\137\041\143\042\124\043\144\044\141\045\142" +
    "\001\002\000\054\006\064\015\115\016\111\017\070\020" +
    "\100\021\075\030\071\031\066\032\076\033\110\046\074" +
    "\066\077\067\107\070\104\071\067\072\102\073\105\074" +
    "\063\075\103\101\065\102\072\001\002\000\054\006\064" +
    "\015\115\016\111\017\070\020\100\021\075\030\071\031" +
    "\066\032\076\033\110\046\074\066\077\067\107\070\104" +
    "\071\067\072\102\073\105\074\063\075\103\101\065\102" +
    "\072\001\002\000\054\006\064\015\115\016\111\017\070" +
    "\020\100\021\075\030\071\031\066\032\076\033\110\046" +
    "\074\066\077\067\107\070\104\071\067\072\102\073\105" +
    "\074\063\075\103\101\065\102\072\001\002\000\054\006" +
    "\064\015\115\016\111\017\070\020\100\021\075\030\071" +
    "\031\066\032\076\033\110\046\074\066\077\067\107\070" +
    "\104\071\067\072\102\073\105\074\063\075\103\101\065" +
    "\102\072\001\002\000\054\006\064\015\115\016\111\017" +
    "\070\020\100\021\075\030\071\031\066\032\076\033\110" +
    "\046\074\066\077\067\107\070\104\071\067\072\102\073" +
    "\105\074\063\075\103\101\065\102\072\001\002\000\054" +
    "\006\064\015\115\016\111\017\070\020\100\021\075\030" +
    "\071\031\066\032\076\033\110\046\074\066\077\067\107" +
    "\070\104\071\067\072\102\073\105\074\063\075\103\101" +
    "\065\102\072\001\002\000\054\006\064\015\115\016\111" +
    "\017\070\020\100\021\075\030\071\031\066\032\076\033" +
    "\110\046\074\066\077\067\107\070\104\071\067\072\102" +
    "\073\105\074\063\075\103\101\065\102\072\001\002\000" +
    "\054\006\064\015\115\016\111\017\070\020\100\021\075" +
    "\030\071\031\066\032\076\033\110\046\074\066\077\067" +
    "\107\070\104\071\067\072\102\073\105\074\063\075\103" +
    "\101\065\102\072\001\002\000\054\006\064\015\115\016" +
    "\111\017\070\020\100\021\075\030\071\031\066\032\076" +
    "\033\110\046\074\066\077\067\107\070\104\071\067\072" +
    "\102\073\105\074\063\075\103\101\065\102\072\001\002" +
    "\000\004\015\154\001\002\000\054\006\064\015\115\016" +
    "\111\017\070\020\100\021\075\030\071\031\066\032\076" +
    "\033\110\046\074\066\077\067\107\070\104\071\067\072" +
    "\102\073\105\074\063\075\103\101\065\102\072\001\002" +
    "\000\054\006\064\015\115\016\111\017\070\020\100\021" +
    "\075\030\071\031\066\032\076\033\110\046\074\066\077" +
    "\067\107\070\104\071\067\072\102\073\105\074\063\075" +
    "\103\101\065\102\072\001\002\000\054\006\064\015\115" +
    "\016\111\017\070\020\100\021\075\030\071\031\066\032" +
    "\076\033\110\046\074\066\077\067\107\070\104\071\067" +
    "\072\102\073\105\074\063\075\103\101\065\102\072\001" +
    "\002\000\054\006\064\015\115\016\111\017\070\020\100" +
    "\021\075\030\071\031\066\032\076\033\110\046\074\066" +
    "\077\067\107\070\104\071\067\072\102\073\105\074\063" +
    "\075\103\101\065\102\072\001\002\000\054\006\064\015" +
    "\115\016\111\017\070\020\100\021\075\030\071\031\066" +
    "\032\076\033\110\046\074\066\077\067\107\070\104\071" +
    "\067\072\102\073\105\074\063\075\103\101\065\102\072" +
    "\001\002\000\054\006\064\015\115\016\111\017\070\020" +
    "\100\021\075\030\071\031\066\032\076\033\110\046\074" +
    "\066\077\067\107\070\104\071\067\072\102\073\105\074" +
    "\063\075\103\101\065\102\072\001\002\000\054\006\064" +
    "\015\115\016\111\017\070\020\100\021\075\030\071\031" +
    "\066\032\076\033\110\046\074\066\077\067\107\070\104" +
    "\071\067\072\102\073\105\074\063\075\103\101\065\102" +
    "\072\001\002\000\062\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\022\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\027\uffc6\034\136\035\130\036\133\037\125\040\137" +
    "\041\143\042\124\043\uffc6\044\141\045\142\077\uffc6\104" +
    "\uffc6\001\002\000\062\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\027\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\077\uffc8\104" +
    "\uffc8\001\002\000\062\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\027\uffc4\034\136\035\130\036\133\037\125\040\137" +
    "\041\143\042\124\043\uffc4\044\uffc4\045\uffc4\077\uffc4\104" +
    "\uffc4\001\002\000\062\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\027\uffc5\034\136\035\130\036\133\037\125\040\137" +
    "\041\143\042\124\043\uffc5\044\uffc5\045\uffc5\077\uffc5\104" +
    "\uffc5\001\002\000\062\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\127\013\135\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\027\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\077\uffcf\104" +
    "\uffcf\001\002\000\062\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\027\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\077\uffc9\104" +
    "\uffc9\001\002\000\062\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\027\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\077\uffcd\104" +
    "\uffcd\001\002\000\062\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\027\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\077\uffad\104" +
    "\uffad\001\002\000\062\005\uffd3\006\uffd3\007\131\010\132" +
    "\011\140\012\127\013\135\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\027\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\077\uffd3\104" +
    "\uffd3\001\002\000\062\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\027\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\077\uffcb\104" +
    "\uffcb\001\002\000\062\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\127\013\135\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\027\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\077\uffd0\104" +
    "\uffd0\001\002\000\062\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\012\127\013\135\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\027\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\077\uffd1\104" +
    "\uffd1\001\002\000\062\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\027\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\077\uffcc\104" +
    "\uffcc\001\002\000\062\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\135\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\027\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\077\uffce\104" +
    "\uffce\001\002\000\062\005\uffd2\006\uffd2\007\131\010\132" +
    "\011\140\012\127\013\135\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\027\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\077\uffd2\104" +
    "\uffd2\001\002\000\062\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\027\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\077\uffca\104" +
    "\uffca\001\002\000\062\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\027\uffc7\034\136\035\130\036\133\037\125\040\137" +
    "\041\143\042\uffc7\043\uffc7\044\uffc7\045\uffc7\077\uffc7\104" +
    "\uffc7\001\002\000\062\005\uffbd\006\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\012\uffbd\013\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\027\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\077\uffbd\104" +
    "\uffbd\001\002\000\054\006\064\015\101\016\111\017\070" +
    "\020\100\021\075\030\071\031\066\032\076\033\110\046" +
    "\074\066\077\067\107\070\104\071\067\072\102\073\105" +
    "\074\063\075\103\101\065\102\072\001\002\000\004\077" +
    "\171\001\002\000\024\015\043\030\045\056\034\057\036" +
    "\060\044\061\040\062\046\076\035\100\037\001\002\000" +
    "\006\023\uffdd\040\uffdd\001\002\000\006\025\uffdc\027\uffdc" +
    "\001\002\000\054\006\064\015\115\016\111\017\070\020" +
    "\100\021\075\030\071\031\066\032\076\033\110\046\074" +
    "\066\077\067\107\070\104\071\067\072\102\073\105\074" +
    "\063\075\103\101\065\102\072\001\002\000\046\005\134" +
    "\006\126\007\131\010\132\011\140\012\127\013\135\025" +
    "\176\034\136\035\130\036\133\037\125\040\137\041\143" +
    "\042\124\043\144\044\141\045\142\001\002\000\054\006" +
    "\064\015\115\016\111\017\070\020\100\021\075\030\071" +
    "\031\066\032\076\033\110\046\074\066\077\067\107\070" +
    "\104\071\067\072\102\073\105\074\063\075\103\101\065" +
    "\102\072\001\002\000\046\005\134\006\126\007\131\010" +
    "\132\011\140\012\127\013\135\022\200\034\136\035\130" +
    "\036\133\037\125\040\137\041\143\042\124\043\144\044" +
    "\141\045\142\001\002\000\062\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\027\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\077" +
    "\uffb7\104\uffb7\001\002\000\054\006\064\015\115\016\111" +
    "\017\070\020\100\021\075\030\071\031\066\032\076\033" +
    "\110\046\074\066\077\067\107\070\104\071\067\072\102" +
    "\073\105\074\063\075\103\101\065\102\072\001\002\000" +
    "\046\005\134\006\126\007\131\010\132\011\140\012\127" +
    "\013\135\025\203\034\136\035\130\036\133\037\125\040" +
    "\137\041\143\042\124\043\144\044\141\045\142\001\002" +
    "\000\054\006\064\015\115\016\111\017\070\020\100\021" +
    "\075\030\071\031\066\032\076\033\110\046\074\066\077" +
    "\067\107\070\104\071\067\072\102\073\105\074\063\075" +
    "\103\101\065\102\072\001\002\000\046\005\134\006\126" +
    "\007\131\010\132\011\140\012\127\013\135\022\205\034" +
    "\136\035\130\036\133\037\125\040\137\041\143\042\124" +
    "\043\144\044\141\045\142\001\002\000\062\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\027\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\077\uffb8\104\uffb8\001\002\000\054\006\064\015" +
    "\115\016\111\017\070\020\100\021\075\030\071\031\066" +
    "\032\076\033\110\046\074\066\077\067\107\070\104\071" +
    "\067\072\102\073\105\074\063\075\103\101\065\102\072" +
    "\001\002\000\046\005\134\006\126\007\131\010\132\011" +
    "\140\012\127\013\135\022\210\034\136\035\130\036\133" +
    "\037\125\040\137\041\143\042\124\043\144\044\141\045" +
    "\142\001\002\000\062\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\027\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\077\uffb9\104" +
    "\uffb9\001\002\000\054\006\064\015\115\016\111\017\070" +
    "\020\100\021\075\030\071\031\066\032\076\033\110\046" +
    "\074\066\077\067\107\070\104\071\067\072\102\073\105" +
    "\074\063\075\103\101\065\102\072\001\002\000\046\005" +
    "\134\006\126\007\131\010\132\011\140\012\127\013\135" +
    "\022\213\034\136\035\130\036\133\037\125\040\137\041" +
    "\143\042\124\043\144\044\141\045\142\001\002\000\062" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\027\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\077\uffbb\104\uffbb\001\002\000\054" +
    "\006\064\015\115\016\111\017\070\020\100\021\075\030" +
    "\071\031\066\032\076\033\110\046\074\066\077\067\107" +
    "\070\104\071\067\072\102\073\105\074\063\075\103\101" +
    "\065\102\072\001\002\000\046\005\134\006\126\007\131" +
    "\010\132\011\140\012\127\013\135\025\216\034\136\035" +
    "\130\036\133\037\125\040\137\041\143\042\124\043\144" +
    "\044\141\045\142\001\002\000\054\006\064\015\115\016" +
    "\111\017\070\020\100\021\075\030\071\031\066\032\076" +
    "\033\110\046\074\066\077\067\107\070\104\071\067\072" +
    "\102\073\105\074\063\075\103\101\065\102\072\001\002" +
    "\000\046\005\134\006\126\007\131\010\132\011\140\012" +
    "\127\013\135\022\220\034\136\035\130\036\133\037\125" +
    "\040\137\041\143\042\124\043\144\044\141\045\142\001" +
    "\002\000\062\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\022\uffae\023\uffae\024\uffae\025\uffae\027" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\077\uffae\104\uffae\001" +
    "\002\000\046\005\134\006\126\007\131\010\132\011\140" +
    "\012\127\013\135\022\222\034\136\035\130\036\133\037" +
    "\125\040\137\041\143\042\124\043\144\044\141\045\142" +
    "\001\002\000\062\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\027\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\077\uffc1\104\uffc1" +
    "\001\002\000\062\005\134\006\126\007\131\010\132\011" +
    "\140\012\127\013\135\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\027\uffc3\034\136\035\130\036\133\037\125\040\137\041" +
    "\143\042\uffc3\043\uffc3\044\uffc3\045\uffc3\077\uffc3\104\uffc3" +
    "\001\002\000\006\013\225\015\154\001\002\000\054\006" +
    "\064\015\115\016\111\017\070\020\100\021\075\030\071" +
    "\031\066\032\076\033\110\046\074\066\077\067\107\070" +
    "\104\071\067\072\102\073\105\074\063\075\103\101\065" +
    "\102\072\001\002\000\050\005\134\006\126\007\131\010" +
    "\132\011\140\012\127\013\135\025\uffda\027\uffda\034\136" +
    "\035\130\036\133\037\125\040\137\041\143\042\124\043" +
    "\144\044\141\045\142\001\002\000\054\006\064\015\115" +
    "\016\111\017\070\020\100\021\075\030\071\031\066\032" +
    "\076\033\110\046\074\066\077\067\107\070\104\071\067" +
    "\072\102\073\105\074\063\075\103\101\065\102\072\001" +
    "\002\000\046\005\134\006\126\007\131\010\132\011\140" +
    "\012\127\013\135\022\231\034\136\035\130\036\133\037" +
    "\125\040\137\041\143\042\124\043\144\044\141\045\142" +
    "\001\002\000\062\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\013\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\027\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\077\uffbe\104\uffbe" +
    "\001\002\000\054\006\064\015\115\016\111\017\070\020" +
    "\100\021\075\030\071\031\066\032\076\033\110\046\074" +
    "\066\077\067\107\070\104\071\067\072\102\073\105\074" +
    "\063\075\103\101\065\102\072\001\002\000\046\005\134" +
    "\006\126\007\131\010\132\011\140\012\127\013\135\022" +
    "\234\034\136\035\130\036\133\037\125\040\137\041\143" +
    "\042\124\043\144\044\141\045\142\001\002\000\062\005" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\027\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\077\uffbc\104\uffbc\001\002\000\004\015" +
    "\236\001\002\000\004\022\237\001\002\000\062\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\027\uffbf\034\uffbf\035\uffbf" +
    "\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\077\uffbf\104\uffbf\001\002\000\062\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\027\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\077\uffc2\104\uffc2\001\002\000\054\006\064" +
    "\015\115\016\111\017\070\020\100\021\075\030\071\031" +
    "\066\032\076\033\110\046\074\066\077\067\107\070\104" +
    "\071\067\072\102\073\105\074\063\075\103\101\065\102" +
    "\072\001\002\000\046\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\022\243\034\136\035\130\036" +
    "\133\037\125\040\137\041\143\042\124\043\144\044\141" +
    "\045\142\001\002\000\062\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\027\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\077\uffba" +
    "\104\uffba\001\002\000\054\006\064\015\115\016\111\017" +
    "\070\020\100\021\075\030\071\031\066\032\076\033\110" +
    "\046\074\066\077\067\107\070\104\071\067\072\102\073" +
    "\105\074\063\075\103\101\065\102\072\001\002\000\012" +
    "\002\ufff8\015\ufff8\053\ufff8\054\ufff8\001\002\000\046\005" +
    "\134\006\126\007\131\010\132\011\140\012\127\013\135" +
    "\023\247\034\136\035\130\036\133\037\125\040\137\041" +
    "\143\042\124\043\144\044\141\045\142\001\002\000\012" +
    "\002\ufff9\015\ufff9\053\ufff9\054\ufff9\001\002\000\014\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\040\uffd5\001\002\000\004" +
    "\021\252\001\002\000\004\015\253\001\002\000\012\022" +
    "\uffd4\023\uffd4\025\uffd4\040\uffd4\001\002\000\006\022\255" +
    "\025\031\001\002\000\004\023\256\001\002\000\012\002" +
    "\ufff7\015\ufff7\053\ufff7\054\ufff7\001\002\000\004\021\u0103" +
    "\001\002\000\044\005\134\006\126\007\131\010\132\011" +
    "\140\012\127\013\376\034\136\035\130\036\133\037\125" +
    "\040\137\041\143\042\124\043\144\044\141\045\142\001" +
    "\002\000\004\013\375\001\002\000\004\023\374\001\002" +
    "\000\004\023\373\001\002\000\054\006\064\015\115\016" +
    "\111\017\070\020\100\021\075\030\071\031\066\032\076" +
    "\033\110\046\074\066\077\067\107\070\104\071\067\072" +
    "\102\073\105\074\063\075\103\101\065\102\072\001\002" +
    "\000\004\021\356\001\002\000\050\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\024\345\026\346" +
    "\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\001\002\000\072\006\uff9b" +
    "\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\023\uff9b\030" +
    "\uff9b\031\uff9b\032\uff9b\033\uff9b\046\uff9b\055\uff9b\064\uff9b" +
    "\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073" +
    "\uff9b\074\uff9b\075\uff9b\101\uff9b\102\uff9b\103\uff9b\105\321" +
    "\106\uff9b\001\002\000\070\006\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\023\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\046\uffa9\055\uffa9\064\uffa9\065\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9" +
    "\101\uffa9\102\uffa9\103\uffa9\106\uffa9\001\002\000\004\023" +
    "\320\001\002\000\054\006\064\015\115\016\111\017\070" +
    "\020\100\021\075\030\071\031\066\032\076\033\110\046" +
    "\074\066\077\067\107\070\104\071\067\072\102\073\105" +
    "\074\063\075\103\101\065\102\072\001\002\000\072\006" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\023\uffa6" +
    "\030\uffa6\031\uffa6\032\uffa6\033\uffa6\046\uffa6\055\uffa6\064" +
    "\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6" +
    "\073\uffa6\074\uffa6\075\uffa6\101\uffa6\102\uffa6\103\uffa6\105" +
    "\uffa6\106\uffa6\001\002\000\066\006\064\015\266\016\111" +
    "\017\070\020\100\021\075\030\071\031\066\032\076\033" +
    "\110\046\074\055\275\064\257\065\265\066\077\067\107" +
    "\070\104\071\067\072\102\073\105\074\063\075\103\101" +
    "\065\102\072\103\264\106\272\001\002\000\004\013\277" +
    "\001\002\000\070\006\uffaa\015\uffaa\016\uffaa\017\uffaa\020" +
    "\uffaa\021\uffaa\023\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\046\uffaa\055\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\101\uffaa" +
    "\102\uffaa\103\uffaa\106\uffaa\001\002\000\004\002\uffac\001" +
    "\002\000\046\005\134\006\126\007\131\010\132\011\140" +
    "\012\127\013\135\034\136\035\130\036\133\037\125\040" +
    "\137\041\143\042\124\043\144\044\141\045\142\077\301" +
    "\001\002\000\054\006\064\015\115\016\111\017\070\020" +
    "\100\021\075\030\071\031\066\032\076\033\110\046\074" +
    "\066\077\067\107\070\104\071\067\072\102\073\105\074" +
    "\063\075\103\101\065\102\072\001\002\000\060\006\064" +
    "\015\115\016\111\017\070\020\100\021\075\030\071\031" +
    "\066\032\076\033\110\046\074\055\310\066\077\067\107" +
    "\070\104\071\067\072\102\073\105\074\063\075\103\101" +
    "\065\102\072\107\313\001\002\000\060\006\uff8c\015\uff8c" +
    "\016\uff8c\017\uff8c\020\uff8c\021\uff8c\030\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\046\uff8c\055\uff8c\066\uff8c\067\uff8c\070\uff8c" +
    "\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\101\uff8c\102" +
    "\uff8c\107\uff8c\001\002\000\006\024\305\025\121\001\002" +
    "\000\064\006\064\015\266\016\111\017\070\020\100\021" +
    "\075\030\071\031\066\032\076\033\110\046\074\064\257" +
    "\065\265\066\077\067\107\070\104\071\067\072\102\073" +
    "\105\074\063\075\103\101\065\102\072\103\264\106\272" +
    "\001\002\000\066\006\064\015\266\016\111\017\070\020" +
    "\100\021\075\023\307\030\071\031\066\032\076\033\110" +
    "\046\074\064\257\065\265\066\077\067\107\070\104\071" +
    "\067\072\102\073\105\074\063\075\103\101\065\102\072" +
    "\103\264\106\272\001\002\000\060\006\uff8b\015\uff8b\016" +
    "\uff8b\017\uff8b\020\uff8b\021\uff8b\030\uff8b\031\uff8b\032\uff8b" +
    "\033\uff8b\046\uff8b\055\uff8b\066\uff8b\067\uff8b\070\uff8b\071" +
    "\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\101\uff8b\102\uff8b" +
    "\107\uff8b\001\002\000\004\023\uff8e\001\002\000\004\055" +
    "\317\001\002\000\060\006\uff8d\015\uff8d\016\uff8d\017\uff8d" +
    "\020\uff8d\021\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\046" +
    "\uff8d\055\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d" +
    "\073\uff8d\074\uff8d\075\uff8d\101\uff8d\102\uff8d\107\uff8d\001" +
    "\002\000\004\024\314\001\002\000\064\006\064\015\266" +
    "\016\111\017\070\020\100\021\075\030\071\031\066\032" +
    "\076\033\110\046\074\064\257\065\265\066\077\067\107" +
    "\070\104\071\067\072\102\073\105\074\063\075\103\101" +
    "\065\102\072\103\264\106\272\001\002\000\066\006\064" +
    "\015\266\016\111\017\070\020\100\021\075\023\316\030" +
    "\071\031\066\032\076\033\110\046\074\064\257\065\265" +
    "\066\077\067\107\070\104\071\067\072\102\073\105\074" +
    "\063\075\103\101\065\102\072\103\264\106\272\001\002" +
    "\000\004\055\uff8a\001\002\000\004\023\uff8f\001\002\000" +
    "\072\006\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\023\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\046\uffa8\055" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\073\uffa8\074\uffa8\075\uffa8\101\uffa8\102\uffa8\103" +
    "\uffa8\105\uffa8\106\uffa8\001\002\000\006\103\330\104\327" +
    "\001\002\000\072\006\uff99\015\uff99\016\uff99\017\uff99\020" +
    "\uff99\021\uff99\023\uff99\030\uff99\031\uff99\032\uff99\033\uff99" +
    "\046\uff99\055\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070" +
    "\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\101\uff99" +
    "\102\uff99\103\uff99\105\uff99\106\uff99\001\002\000\072\006" +
    "\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\023\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\033\uff9a\046\uff9a\055\uff9a\064" +
    "\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a" +
    "\073\uff9a\074\uff9a\075\uff9a\101\uff9a\102\uff9a\103\uff9a\105" +
    "\321\106\uff9a\001\002\000\072\006\uff94\015\uff94\016\uff94" +
    "\017\uff94\020\uff94\021\uff94\023\uff94\030\uff94\031\uff94\032" +
    "\uff94\033\uff94\046\uff94\055\uff94\064\uff94\065\uff94\066\uff94" +
    "\067\uff94\070\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075" +
    "\uff94\101\uff94\102\uff94\103\uff94\105\uff94\106\uff94\001\002" +
    "\000\072\006\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\023\uff98\030\uff98\031\uff98\032\uff98\033\uff98\046\uff98" +
    "\055\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071" +
    "\uff98\072\uff98\073\uff98\074\uff98\075\uff98\101\uff98\102\uff98" +
    "\103\uff98\105\uff98\106\uff98\001\002\000\072\006\uff95\015" +
    "\uff95\016\uff95\017\uff95\020\uff95\021\uff95\023\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\046\uff95\055\uff95\064\uff95\065" +
    "\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95" +
    "\074\uff95\075\uff95\101\uff95\102\uff95\103\uff95\105\uff95\106" +
    "\uff95\001\002\000\066\006\064\015\266\016\111\017\070" +
    "\020\100\021\075\030\071\031\066\032\076\033\110\046" +
    "\074\054\340\064\257\065\265\066\077\067\107\070\104" +
    "\071\067\072\102\073\105\074\063\075\103\101\065\102" +
    "\072\103\264\106\272\001\002\000\054\006\064\015\115" +
    "\016\111\017\070\020\100\021\075\030\071\031\066\032" +
    "\076\033\110\046\074\066\077\067\107\070\104\071\067" +
    "\072\102\073\105\074\063\075\103\101\065\102\072\001" +
    "\002\000\046\005\134\006\126\007\131\010\132\011\140" +
    "\012\127\013\135\034\136\035\130\036\133\037\125\040" +
    "\137\041\143\042\124\043\144\044\141\045\142\104\332" +
    "\001\002\000\066\006\064\015\266\016\111\017\070\020" +
    "\100\021\075\030\071\031\066\032\076\033\110\046\074" +
    "\054\333\064\257\065\265\066\077\067\107\070\104\071" +
    "\067\072\102\073\105\074\063\075\103\101\065\102\072" +
    "\103\264\106\272\001\002\000\064\006\064\015\266\016" +
    "\111\017\070\020\100\021\075\030\071\031\066\032\076" +
    "\033\110\046\074\064\257\065\265\066\077\067\107\070" +
    "\104\071\067\072\102\073\105\074\063\075\103\101\065" +
    "\102\072\103\264\106\272\001\002\000\072\006\uff92\015" +
    "\uff92\016\uff92\017\uff92\020\uff92\021\uff92\023\uff92\030\uff92" +
    "\031\uff92\032\uff92\033\uff92\046\uff92\055\uff92\064\uff92\065" +
    "\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92" +
    "\074\uff92\075\uff92\101\uff92\102\uff92\103\uff92\105\uff92\106" +
    "\uff92\001\002\000\066\006\064\015\266\016\111\017\070" +
    "\020\100\021\075\030\071\031\066\032\076\033\110\046" +
    "\074\055\336\064\257\065\265\066\077\067\107\070\104" +
    "\071\067\072\102\073\105\074\063\075\103\101\065\102" +
    "\072\103\264\106\272\001\002\000\004\023\337\001\002" +
    "\000\072\006\uff93\015\uff93\016\uff93\017\uff93\020\uff93\021" +
    "\uff93\023\uff93\030\uff93\031\uff93\032\uff93\033\uff93\046\uff93" +
    "\055\uff93\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071" +
    "\uff93\072\uff93\073\uff93\074\uff93\075\uff93\101\uff93\102\uff93" +
    "\103\uff93\105\uff93\106\uff93\001\002\000\064\006\064\015" +
    "\266\016\111\017\070\020\100\021\075\030\071\031\066" +
    "\032\076\033\110\046\074\064\257\065\265\066\077\067" +
    "\107\070\104\071\067\072\102\073\105\074\063\075\103" +
    "\101\065\102\072\103\264\106\272\001\002\000\072\006" +
    "\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\023\uff90" +
    "\030\uff90\031\uff90\032\uff90\033\uff90\046\uff90\055\uff90\064" +
    "\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90" +
    "\073\uff90\074\uff90\075\uff90\101\uff90\102\uff90\103\uff90\105" +
    "\uff90\106\uff90\001\002\000\066\006\064\015\266\016\111" +
    "\017\070\020\100\021\075\030\071\031\066\032\076\033" +
    "\110\046\074\055\343\064\257\065\265\066\077\067\107" +
    "\070\104\071\067\072\102\073\105\074\063\075\103\101" +
    "\065\102\072\103\264\106\272\001\002\000\004\023\344" +
    "\001\002\000\072\006\uff91\015\uff91\016\uff91\017\uff91\020" +
    "\uff91\021\uff91\023\uff91\030\uff91\031\uff91\032\uff91\033\uff91" +
    "\046\uff91\055\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070" +
    "\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\101\uff91" +
    "\102\uff91\103\uff91\105\uff91\106\uff91\001\002\000\004\040" +
    "\354\001\002\000\054\006\064\015\115\016\111\017\070" +
    "\020\100\021\075\030\071\031\066\032\076\033\110\046" +
    "\074\066\077\067\107\070\104\071\067\072\102\073\105" +
    "\074\063\075\103\101\065\102\072\001\002\000\006\025" +
    "\121\027\350\001\002\000\046\005\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\024\351\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\001\002\000\004\040\352\001\002\000" +
    "\054\006\064\015\115\016\111\017\070\020\100\021\075" +
    "\030\071\031\066\032\076\033\110\046\074\066\077\067" +
    "\107\070\104\071\067\072\102\073\105\074\063\075\103" +
    "\101\065\102\072\001\002\000\046\005\134\006\126\007" +
    "\131\010\132\011\140\012\127\013\135\023\uff9f\034\136" +
    "\035\130\036\133\037\125\040\137\041\143\042\124\043" +
    "\144\044\141\045\142\001\002\000\054\006\064\015\115" +
    "\016\111\017\070\020\100\021\075\030\071\031\066\032" +
    "\076\033\110\046\074\066\077\067\107\070\104\071\067" +
    "\072\102\073\105\074\063\075\103\101\065\102\072\001" +
    "\002\000\046\005\134\006\126\007\131\010\132\011\140" +
    "\012\127\013\135\023\uffa0\034\136\035\130\036\133\037" +
    "\125\040\137\041\143\042\124\043\144\044\141\045\142" +
    "\001\002\000\054\006\064\015\115\016\111\017\070\020" +
    "\100\021\075\030\071\031\066\032\076\033\110\046\074" +
    "\066\077\067\107\070\104\071\067\072\102\073\105\074" +
    "\063\075\103\101\065\102\072\001\002\000\050\005\134" +
    "\006\126\007\131\010\132\011\140\012\127\013\135\022" +
    "\uffa1\025\uffa1\034\136\035\130\036\133\037\125\040\137" +
    "\041\143\042\124\043\144\044\141\045\142\001\002\000" +
    "\006\022\362\025\361\001\002\000\054\006\064\015\115" +
    "\016\111\017\070\020\100\021\075\030\071\031\066\032" +
    "\076\033\110\046\074\066\077\067\107\070\104\071\067" +
    "\072\102\073\105\074\063\075\103\101\065\102\072\001" +
    "\002\000\004\023\uffa3\001\002\000\050\005\134\006\126" +
    "\007\131\010\132\011\140\012\127\013\135\022\uffa2\025" +
    "\uffa2\034\136\035\130\036\133\037\125\040\137\041\143" +
    "\042\124\043\144\044\141\045\142\001\002\000\046\005" +
    "\134\006\126\007\131\010\132\011\140\012\127\013\135" +
    "\034\136\035\130\036\133\037\125\040\137\041\143\042" +
    "\124\043\144\044\141\045\142\104\365\001\002\000\066" +
    "\006\064\015\266\016\111\017\070\020\100\021\075\030" +
    "\071\031\066\032\076\033\110\046\074\054\366\064\257" +
    "\065\265\066\077\067\107\070\104\071\067\072\102\073" +
    "\105\074\063\075\103\101\065\102\072\103\264\106\272" +
    "\001\002\000\064\006\064\015\266\016\111\017\070\020" +
    "\100\021\075\030\071\031\066\032\076\033\110\046\074" +
    "\064\257\065\265\066\077\067\107\070\104\071\067\072" +
    "\102\073\105\074\063\075\103\101\065\102\072\103\264" +
    "\106\272\001\002\000\072\006\uff96\015\uff96\016\uff96\017" +
    "\uff96\020\uff96\021\uff96\023\uff96\030\uff96\031\uff96\032\uff96" +
    "\033\uff96\046\uff96\055\uff96\064\uff96\065\uff96\066\uff96\067" +
    "\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96" +
    "\101\uff96\102\uff96\103\uff96\105\uff96\106\uff96\001\002\000" +
    "\066\006\064\015\266\016\111\017\070\020\100\021\075" +
    "\030\071\031\066\032\076\033\110\046\074\055\371\064" +
    "\257\065\265\066\077\067\107\070\104\071\067\072\102" +
    "\073\105\074\063\075\103\101\065\102\072\103\264\106" +
    "\272\001\002\000\004\023\372\001\002\000\072\006\uff97" +
    "\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\023\uff97\030" +
    "\uff97\031\uff97\032\uff97\033\uff97\046\uff97\055\uff97\064\uff97" +
    "\065\uff97\066\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073" +
    "\uff97\074\uff97\075\uff97\101\uff97\102\uff97\103\uff97\105\uff97" +
    "\106\uff97\001\002\000\072\006\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\023\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\046\uffa7\055\uffa7\064\uffa7\065\uffa7\066\uffa7\067" +
    "\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7" +
    "\101\uffa7\102\uffa7\103\uffa7\105\uffa7\106\uffa7\001\002\000" +
    "\072\006\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5" +
    "\023\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\046\uffa5\055" +
    "\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5" +
    "\072\uffa5\073\uffa5\074\uffa5\075\uffa5\101\uffa5\102\uffa5\103" +
    "\uffa5\105\uffa5\106\uffa5\001\002\000\004\002\uffab\001\002" +
    "\000\004\015\377\001\002\000\046\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\012\uffad\013\uffad\024\u0100\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\001\002\000\004\040\u0101\001\002" +
    "\000\054\006\064\015\115\016\111\017\070\020\100\021" +
    "\075\030\071\031\066\032\076\033\110\046\074\066\077" +
    "\067\107\070\104\071\067\072\102\073\105\074\063\075" +
    "\103\101\065\102\072\001\002\000\046\005\134\006\126" +
    "\007\131\010\132\011\140\012\127\013\135\023\uff9e\034" +
    "\136\035\130\036\133\037\125\040\137\041\143\042\124" +
    "\043\144\044\141\045\142\001\002\000\054\006\064\015" +
    "\115\016\111\017\070\020\100\021\075\030\071\031\066" +
    "\032\076\033\110\046\074\066\077\067\107\070\104\071" +
    "\067\072\102\073\105\074\063\075\103\101\065\102\072" +
    "\001\002\000\006\022\u0105\025\361\001\002\000\004\023" +
    "\uffa4\001\002\000\004\002\uffeb\001\002\000\014\002\uffee" +
    "\015\253\051\022\053\014\054\021\001\002\000\010\023" +
    "\u010b\025\031\040\u010a\001\002\000\014\002\uffe9\015\uffe9" +
    "\051\uffe9\053\uffe9\054\uffe9\001\002\000\024\015\043\030" +
    "\045\056\034\057\036\060\044\061\040\062\046\076\035" +
    "\100\037\001\002\000\014\002\uffe7\015\uffe7\051\uffe7\053" +
    "\uffe7\054\uffe7\001\002\000\004\023\u010d\001\002\000\014" +
    "\002\uffe8\015\uffe8\051\uffe8\053\uffe8\054\uffe8\001\002\000" +
    "\014\002\uffea\015\uffea\051\uffea\053\uffea\054\uffea\001\002" +
    "\000\004\002\uffed\001\002\000\010\002\ufff2\015\ufff2\054" +
    "\ufff2\001\002\000\010\024\uffd4\025\uffd4\040\u011c\001\002" +
    "\000\006\024\u0116\025\031\001\002\000\010\002\ufff6\015" +
    "\u0111\054\021\001\002\000\010\002\ufff3\015\ufff3\054\ufff3" +
    "\001\002\000\004\002\ufff5\001\002\000\024\015\043\030" +
    "\045\056\034\057\036\060\044\061\040\062\046\076\035" +
    "\100\037\001\002\000\006\023\u0119\040\u0118\001\002\000" +
    "\054\006\064\015\115\016\111\017\070\020\100\021\075" +
    "\030\071\031\066\032\076\033\110\046\074\066\077\067" +
    "\107\070\104\071\067\072\102\073\105\074\063\075\103" +
    "\101\065\102\072\001\002\000\010\002\ufff0\015\ufff0\054" +
    "\ufff0\001\002\000\046\005\134\006\126\007\131\010\132" +
    "\011\140\012\127\013\135\023\u011b\034\136\035\130\036" +
    "\133\037\125\040\137\041\143\042\124\043\144\044\141" +
    "\045\142\001\002\000\010\002\ufff1\015\ufff1\054\ufff1\001" +
    "\002\000\004\021\u011d\001\002\000\004\015\253\001\002" +
    "\000\006\022\u011f\025\031\001\002\000\004\023\u0120\001" +
    "\002\000\010\002\uffef\015\uffef\054\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\006\002\004\004\003\001\001\000\012\011" +
    "\011\012\016\015\015\022\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\u0111\016\u0112\017\u010f\001\001\000\010\006\u0107\013" +
    "\u0108\014\u0106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\257\020\273\021\267\023" +
    "\270\025\262\034\272\035\266\041\261\001\001\000\010" +
    "\006\023\007\025\010\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\023\010\027" +
    "\015\026\022\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\032\026\040\032\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\054\026\040" +
    "\032\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\057\026\040\032\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\072\027\105\030\111\001" +
    "\001\000\002\001\001\000\004\003\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\222\001\001\000\004\003\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\116\031\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\164\001\001\000\004\003" +
    "\163\001\001\000\004\003\162\001\001\000\004\003\161" +
    "\001\001\000\004\003\160\001\001\000\004\003\157\001" +
    "\001\000\004\003\156\001\001\000\004\003\155\001\001" +
    "\000\004\003\154\001\001\000\002\001\001\000\004\003" +
    "\152\001\001\000\004\003\151\001\001\000\004\003\150" +
    "\001\001\000\004\003\147\001\001\000\004\003\146\001" +
    "\001\000\004\003\145\001\001\000\004\003\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\072\030\172" +
    "\001\001\000\002\001\001\000\010\005\171\026\040\032" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\174\001\001\000\002\001\001\000\004\003\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\201" +
    "\001\001\000\002\001\001\000\004\003\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\214" +
    "\001\001\000\002\001\001\000\004\003\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\225\001\001\000\002\001\001\000\004\003\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\036\322\037\323\040\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\277" +
    "\001\001\000\002\001\001\000\020\003\257\021\275\023" +
    "\270\025\262\034\272\035\266\041\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\116\031\303\042\301\043\302\001\001" +
    "\000\012\003\116\031\303\043\311\044\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\257\020\305" +
    "\021\267\023\270\025\262\034\272\035\266\041\261\001" +
    "\001\000\020\003\257\021\275\023\270\025\262\034\272" +
    "\035\266\041\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\257\020\314\021\267\023\270\025\262\034" +
    "\272\035\266\041\261\001\001\000\020\003\257\021\275" +
    "\023\270\025\262\034\272\035\266\041\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\325\040\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\003\257\021\340\023\270\025\262\034\272\035" +
    "\266\041\261\001\001\000\004\003\330\001\001\000\002" +
    "\001\001\000\020\003\257\021\333\023\270\025\262\034" +
    "\272\035\266\041\261\001\001\000\022\003\257\020\334" +
    "\021\267\023\270\025\262\034\272\035\266\041\261\001" +
    "\001\000\002\001\001\000\020\003\257\021\275\023\270" +
    "\025\262\034\272\035\266\041\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\257\020\341\021\267" +
    "\023\270\025\262\034\272\035\266\041\261\001\001\000" +
    "\002\001\001\000\020\003\257\021\275\023\270\025\262" +
    "\034\272\035\266\041\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\116\031\346" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\352\001\001\000\002\001\001\000\004" +
    "\003\354\001\001\000\002\001\001\000\006\003\356\024" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\362\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\257\021\366\023\270\025\262" +
    "\034\272\035\266\041\261\001\001\000\022\003\257\020" +
    "\367\021\267\023\270\025\262\034\272\035\266\041\261" +
    "\001\001\000\002\001\001\000\020\003\257\021\275\023" +
    "\270\025\262\034\272\035\266\041\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\u0101\001\001\000\002\001" +
    "\001\000\006\003\356\024\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\u0107\011" +
    "\u010e\013\u010d\015\015\022\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\u010b\026\040\032\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\u0111\017\u0113" +
    "\022\u0114\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\u0116\026\040\032\041\001\001\000\002\001\001" +
    "\000\004\003\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static LinkedList<Instruccion> lista;

	

	public  void setLista(LinkedList<Instruccion> listaG){
		lista = listaG;
	}

	public  LinkedList<Instruccion> getLista(){
		return lista;
	}
	
	public static int cont=0;
	public void syntax_error(Symbol s){
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
	}

	 public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= insNombrePrograma insType 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addAll(a); setLista(RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // insNombrePrograma ::= PROGRAM ID PNTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insNombrePrograma",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // insConstantes ::= CONST listaDeclaracionConstantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insConstantes",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // insConstantes ::= CONST listaDeclaracionConstantes insVar 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insConstantes",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // insConstantes ::= insVar 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insConstantes",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listaDeclaracionConstantes ::= listaDeclaracionConstantes declaracionConstante 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionConstantes",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listaDeclaracionConstantes ::= declaracionConstante 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addLast(a);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionConstantes",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracionConstante ::= listaID DSPUNTOS tipoDato IGUAL expresion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(c,bleft,bright,true,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionConstante ::= listaID DSPUNTOS tipoDato PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(null,bleft,bright,true,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionConstante ::= ID IGUAL PARIZQ listaID PARDER PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Enumerador(a.toString(),b,aleft,aright,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // insVar ::= VAR listaDeclaracionVariables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insVar",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // insVar ::= VAR listaDeclaracionVariables cuerpoPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insVar",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // insVar ::= cuerpoPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insVar",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaDeclaracionVariables ::= listaDeclaracionVariables declaracionVariable 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVariables",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaDeclaracionVariables ::= declaracionVariable 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addLast(a);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVariables",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionVariable ::= listaID DSPUNTOS tipoDato IGUAL expresion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(c,bleft,bright,false,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionVariable ::= listaID DSPUNTOS tipoDato PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(null,bleft,bright,false,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionVariable ::= ID IGUAL PARIZQ listaID PARDER PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Enumerador(a.toString(),b,aleft,aright,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // insType ::= TYPE listaType 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // insType ::= TYPE listaType insConstantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // insType ::= insConstantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // insType ::= error PNTCOMA 
            {
              LinkedList<Instruccion> RESULT =null;
		 RESULT = new LinkedList<Instruccion>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listaType ::= listaType equivalencia 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		TypeDeclaration b = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaType",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaType ::= equivalencia 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		TypeDeclaration a = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaType",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // equivalencia ::= listaID IGUAL tipoDato PNTCOMA 
            {
              TypeDeclaration RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new TypeDeclaration(a,aleft,aright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencia",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // equivalencia ::= listaID PNTCOMA 
            {
              TypeDeclaration RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new TypeDeclaration(a,aleft,aright,null); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencia",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoDato ::= INTEGER 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.INT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoDato ::= BOOLEAN 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.BOOLEAN); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipoDato ::= REAL 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.DOUBLE); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoDato ::= CHAR 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.CHAR); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoDato ::= WORD 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.WORD); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoDato ::= STRING 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.STRING); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoDato ::= ID 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.ID); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoDato ::= insArray 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipoDato ::= insRegistro 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // insArray ::= ARRAY LLAVEIZQ dimensionList LLAVEDER OF tipoDato 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Dimension> a = (LinkedList<Dimension>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

				if(b.getTipo() == Tipo.ARRAY){
					Arreglo temp = (Arreglo)b.getValor();
					LinkedList<Dimension> lista = temp.getDimensiones();
					a.addAll(lista);
					
					Type type = new Type(Tipo.ARRAY,b.getTipoArray());
					type.setValor(new Arreglo(a,aleft,aright,b.getTipoArray())); 
					RESULT = type;
				}
				else {
					Type type = new Type(Tipo.ARRAY,b.getTipo());
					type.setValor(new Arreglo(a,aleft,aright,b.getTipo())); 
					RESULT = type;
				}

			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insArray",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dimensionList ::= dimensionList COMA dimension 
            {
              LinkedList<Dimension> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Dimension> a = (LinkedList<Dimension>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Dimension b = (Dimension)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensionList",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dimensionList ::= dimension 
            {
              LinkedList<Dimension> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Dimension a = (Dimension)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a);	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensionList",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // dimension ::= expresion PNT PNT expresion 
            {
              Dimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Dimension(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dimension ::= ID 
            {
              Dimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Dimension(a.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // insRegistro ::= RECORD listaAtributos END PNTCOMA 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Type("",Tipo.REGISTRO); RESULT.setValor(new Registro(a,aleft,aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insRegistro",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listaAtributos ::= listaAtributos ID DSPUNTOS tipoDato PNTCOMA 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; RESULT.addLast(new Atributo(b.toString(),c)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAtributos",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listaAtributos ::= ID DSPUNTOS tipoDato PNTCOMA 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(new Atributo(a.toString(),b)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAtributos",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listaID ::= listaID COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b.toString().toLowerCase()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaID",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listaID ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<String>(); RESULT.addLast(a.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaID",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.SUMA,aleft,aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.RESTA,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MULTIPLICACION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion DIVIDIDO expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.DIVISION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion MODULO expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MODULO,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion POTENCIA expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.POTENCIA,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MAYOR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MENOR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MAYORIGUAL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion MENORIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MENORIGUAL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.IGUAL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion DIFERENTE expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.DIFERENTE,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.AND,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.OR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion NAND expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.NAND,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion NOR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.NOR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,null,Operacion.NOT,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,null,Operacion.NEGATIVO,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= ID LLAVEIZQ listaAcceso LLAVEDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(Operacion.ACCESOARRAY,aleft,aright,a.toString(),b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= SIZEOF PARIZQ ID PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(Operacion.SIZEOF,aleft,aright,a.toString(),null); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= MALLOC PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.MALLOC,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= LENGTH PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.LENGTH,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= TOLOWERCASE PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TOLOWERCASE,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= TOUPPERCASE PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TOUPPERCASE,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= TRUNK PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TRUNK,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= ROUND PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.ROUND,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= REPLACE PARIZQ expresion COMA expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,b,Operacion.REPLACE,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= EQUALS PARIZQ expresion COMA expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,b,Operacion.EQUALS,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.INT,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= DECIMAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.DOUBLE,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= CHAR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.CHAR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= CADENA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.STRING,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= TRUE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= FALSE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.ID,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= NIL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.NULL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= CHARAT PARIZQ expresion COMA expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,b,Operacion.CHARAT,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= expresion PNT ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,null,Operacion.ACCESOID,aleft,aright,b.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cuerpoPrincipal ::= BEGIN instruccionesPrincipal END PNT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoPrincipal",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cuerpoPrincipal ::= BEGIN END PNT 
            {
              LinkedList<Instruccion> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoPrincipal",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // instruccionesPrincipal ::= instruccionesPrincipal instruccionPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesPrincipal",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // instruccionesPrincipal ::= instruccionPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesPrincipal",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // instruccionPrincipal ::= insWrite PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Writeln a = (Writeln)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // instruccionPrincipal ::= insAsignacion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // instruccionPrincipal ::= ifSuperior 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		IfSuperior a = (IfSuperior)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // instruccionPrincipal ::= insSwitch PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		SWITCH a = (SWITCH)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // insWrite ::= WRITELN PARIZQ listaExpresiones PARDER 
            {
              Writeln RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Writeln(a,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insWrite",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // insWrite ::= WRITE PARIZQ listaExpresiones PARDER 
            {
              Writeln RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Writeln(a,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insWrite",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // listaExpresiones ::= listaExpresiones COMA expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.SUMA,aleft,aright);	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaExpresiones",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // listaExpresiones ::= expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaExpresiones",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // insAsignacion ::= ID DSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a.toString(),b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insAsignacion",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // insAsignacion ::= ID LLAVEIZQ listaAcceso LLAVEDER DSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoArreglo(a.toString(),c,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insAsignacion",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // insAsignacion ::= expresion PNT ID DSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoRegistro(a,c,b.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insAsignacion",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // listaAcceso ::= listaAcceso COMA expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAcceso",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // listaAcceso ::= expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAcceso",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ifSuperior ::= insIf 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		IF a = (IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(a); RESULT = new IfSuperior(lista,aleft,aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ifSuperior ::= insIf listadoElseIf 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		IF a = (IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<IF> b = (LinkedList<IF>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(a); lista.addAll(b); RESULT = new IfSuperior(lista,aleft,aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ifSuperior ::= insIf insElse 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		IF a = (IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		IF b = (IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(a); lista.addLast(b); RESULT = new IfSuperior(lista,aleft,aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ifSuperior ::= insIf listadoElseIf insElse 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		IF a = (IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<IF> b = (LinkedList<IF>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		IF c = (IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(a); lista.addAll(b); lista.addLast(c); RESULT = new IfSuperior(lista,aleft,aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // insIf ::= IF expresion THEN BEGIN instruccionesPrincipal END PNTCOMA 
            {
              IF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new IF(a,aleft,aright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insIf",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // insIf ::= IF expresion THEN instruccionPrincipal 
            {
              IF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> lista = new LinkedList<>(); lista.addLast(b); RESULT = new IF(a,aleft,aright,lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insIf",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // listadoElseIf ::= listadoElseIf insElseIf 
            {
              LinkedList<IF> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<IF> a = (LinkedList<IF>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		IF b = (IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listadoElseIf",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // listadoElseIf ::= insElseIf 
            {
              LinkedList<IF> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		IF a = (IF)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listadoElseIf",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // insElseIf ::= ELSE IF expresion THEN BEGIN instruccionesPrincipal END PNTCOMA 
            {
              IF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new IF(a,aleft,aright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insElseIf",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // insElseIf ::= ELSE IF expresion THEN instruccionPrincipal 
            {
              IF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> lista = new LinkedList<>(); lista.addLast(b); RESULT = new IF(a,aleft,aright,lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insElseIf",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // insElse ::= ELSE THEN BEGIN instruccionesPrincipal END PNTCOMA 
            {
              IF RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new IF(null,bleft,bright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insElse",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // insElse ::= ELSE THEN instruccionPrincipal 
            {
              IF RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> lista = new LinkedList<>(); lista.addLast(b); RESULT = new IF(null,bleft,bright,lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insElse",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // insSwitch ::= CASE expresion OF listaCase insDefault END 
            {
              SWITCH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<CASE> b = (LinkedList<CASE>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		CASE c = (CASE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 b.addLast(c); RESULT = new SWITCH(b,aleft,aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insSwitch",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // insSwitch ::= CASE expresion OF listaCase END 
            {
              SWITCH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<CASE> b = (LinkedList<CASE>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SWITCH(b,aleft,aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insSwitch",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // listaCase ::= listaCase insCase 
            {
              LinkedList<CASE> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<CASE> a = (LinkedList<CASE>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		CASE b = (CASE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaCase",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // listaCase ::= insCase 
            {
              LinkedList<CASE> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		CASE a = (CASE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaCase",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // insCase ::= listaAcceso DSPUNTOS instruccionesPrincipal PNTCOMA 
            {
              CASE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new CASE(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insCase",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // insDefault ::= DEFAULT DSPUNTOS instruccionesPrincipal PNTCOMA 
            {
              CASE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new CASE(null,a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insDefault",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
