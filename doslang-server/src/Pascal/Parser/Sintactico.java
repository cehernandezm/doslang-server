
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Pascal.Parser;

import java_cup.runtime.*;
import Pascal.Analisis.*;
import Pascal.Analisis.TipoDato.*;
import Pascal.Componentes.*;
import Pascal.Componentes.UserTypes.*;
import Pascal.Componentes.Arreglos.*;
import Pascal.Componentes.Registros.*;
import Pascal.Componentes.SentenciaIf.*;
import Pascal.Componentes.Funciones.*;
import java.util.LinkedList;
import Pascal.Componentes.SentenciaSwitch.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\004\005\000\002\011\004\000\002\011\005" +
    "\000\002\011\003\000\002\007\004\000\002\007\003\000" +
    "\002\010\010\000\002\010\006\000\002\010\010\000\002" +
    "\015\004\000\002\015\005\000\002\015\003\000\002\016" +
    "\004\000\002\016\003\000\002\017\010\000\002\017\006" +
    "\000\002\017\010\000\002\051\003\000\002\052\004\000" +
    "\002\052\003\000\002\053\017\000\002\053\014\000\002" +
    "\053\016\000\002\053\013\000\002\054\005\000\002\054" +
    "\003\000\002\055\005\000\002\055\006\000\002\012\004" +
    "\000\002\012\005\000\002\012\003\000\002\012\004\000" +
    "\002\014\004\000\002\014\003\000\002\013\006\000\002" +
    "\013\004\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\027\010\000\002\030\005\000\002\030\003\000\002" +
    "\031\006\000\002\031\003\000\002\033\006\000\002\034" +
    "\007\000\002\034\006\000\002\035\006\000\002\006\005" +
    "\000\002\006\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\003\004\000\002" +
    "\003\005\000\002\003\006\000\002\003\006\000\002\003" +
    "\005\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\010\000\002\003\010\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\010\000\002\003\005\000" +
    "\002\023\006\000\002\023\005\000\002\020\004\000\002" +
    "\020\003\000\002\021\004\000\002\021\004\000\002\021" +
    "\003\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\024\006\000\002\024\006\000\002\025" +
    "\005\000\002\025\003\000\002\026\006\000\002\026\011" +
    "\000\002\026\010\000\002\032\005\000\002\032\003\000" +
    "\002\036\006\000\002\036\010\000\002\036\010\000\002" +
    "\037\006\000\002\037\003\000\002\041\010\000\002\041" +
    "\007\000\002\042\004\000\002\042\003\000\002\043\006" +
    "\000\002\044\006\000\002\045\010\000\002\046\006\000" +
    "\002\047\015\000\002\047\015\000\002\050\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0172\000\004\050\006\001\002\000\016\003\021\051" +
    "\026\052\016\053\015\054\024\121\023\001\002\000\004" +
    "\002\011\001\002\000\004\015\007\001\002\000\004\023" +
    "\010\001\002\000\016\003\ufffe\051\ufffe\052\ufffe\053\ufffe" +
    "\054\ufffe\121\ufffe\001\002\000\004\002\001\001\002\000" +
    "\004\054\ufff3\001\002\000\004\054\uffe0\001\002\000\004" +
    "\002\uffff\001\002\000\004\015\u0165\001\002\000\004\015" +
    "\263\001\002\000\004\054\ufffb\001\002\000\004\054\024" +
    "\001\002\000\004\023\u0159\001\002\000\006\054\uffed\121" +
    "\023\001\002\000\004\015\u0132\001\002\000\100\006\071" +
    "\015\303\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\055\314\064\301\065\274" +
    "\066\103\067\113\070\110\071\073\072\106\073\111\074" +
    "\067\075\107\101\070\102\076\103\315\104\302\107\270" +
    "\111\312\113\272\115\273\120\307\001\002\000\006\054" +
    "\uffeb\121\uffeb\001\002\000\004\015\027\001\002\000\010" +
    "\024\uffc7\025\uffc7\040\261\001\002\000\006\024\036\025" +
    "\035\001\002\000\012\015\ufff9\053\ufff9\054\ufff9\121\ufff9" +
    "\001\002\000\012\015\027\053\015\054\ufffd\121\023\001" +
    "\002\000\012\015\ufffa\053\ufffa\054\ufffa\121\ufffa\001\002" +
    "\000\004\054\ufffc\001\002\000\004\015\260\001\002\000" +
    "\024\015\047\030\051\056\040\057\042\060\050\061\044" +
    "\062\052\076\041\100\043\001\002\000\006\023\255\040" +
    "\254\001\002\000\012\022\uffda\023\uffda\025\uffda\040\uffda" +
    "\001\002\000\004\026\066\001\002\000\012\022\uffd9\023" +
    "\uffd9\025\uffd9\040\uffd9\001\002\000\004\015\053\001\002" +
    "\000\012\022\uffd5\023\uffd5\025\uffd5\040\uffd5\001\002\000" +
    "\012\022\uffd3\023\uffd3\025\uffd3\040\uffd3\001\002\000\012" +
    "\022\uffd2\023\uffd2\025\uffd2\040\uffd2\001\002\000\012\022" +
    "\uffd4\023\uffd4\025\uffd4\040\uffd4\001\002\000\012\022\uffd8" +
    "\023\uffd8\025\uffd8\040\uffd8\001\002\000\012\022\uffd7\023" +
    "\uffd7\025\uffd7\040\uffd7\001\002\000\012\022\uffd6\023\uffd6" +
    "\025\uffd6\040\uffd6\001\002\000\004\024\063\001\002\000" +
    "\006\015\055\055\056\001\002\000\004\024\060\001\002" +
    "\000\004\023\057\001\002\000\012\022\uffcc\023\uffcc\025" +
    "\uffcc\040\uffcc\001\002\000\024\015\047\030\051\056\040" +
    "\057\042\060\050\061\044\062\052\076\041\100\043\001" +
    "\002\000\004\023\062\001\002\000\006\015\uffcb\055\uffcb" +
    "\001\002\000\024\015\047\030\051\056\040\057\042\060" +
    "\050\061\044\062\052\076\041\100\043\001\002\000\004" +
    "\023\065\001\002\000\006\015\uffca\055\uffca\001\002\000" +
    "\054\006\071\015\105\016\115\017\075\020\104\021\101" +
    "\030\074\031\072\032\102\033\114\046\100\066\103\067" +
    "\113\070\110\071\073\072\106\073\111\074\067\075\107" +
    "\101\070\102\076\001\002\000\004\021\251\001\002\000" +
    "\004\021\246\001\002\000\054\006\071\015\121\016\115" +
    "\017\075\020\104\021\101\030\074\031\072\032\102\033" +
    "\114\046\100\066\103\067\113\070\110\071\073\072\106" +
    "\073\111\074\067\075\107\101\070\102\076\001\002\000" +
    "\070\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4" +
    "\013\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\027\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\077\uffa4\105\uffa4\112\uffa4\116" +
    "\uffa4\117\uffa4\001\002\000\004\021\242\001\002\000\070" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\027\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\077\uffa5\105\uffa5\112\uffa5\116\uffa5" +
    "\117\uffa5\001\002\000\070\005\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\025\uffa6\027\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\077\uffa6" +
    "\105\uffa6\112\uffa6\116\uffa6\117\uffa6\001\002\000\004\021" +
    "\237\001\002\000\044\005\140\006\134\007\136\010\137" +
    "\011\146\012\133\013\234\034\143\035\135\036\141\037" +
    "\132\040\144\041\150\042\131\043\151\044\145\045\147" +
    "\001\002\000\054\006\071\015\121\016\115\017\075\020" +
    "\104\021\101\030\074\031\072\032\102\033\114\046\100" +
    "\066\103\067\113\070\110\071\073\072\106\073\111\074" +
    "\067\075\107\101\070\102\076\001\002\000\054\006\071" +
    "\015\121\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\066\103\067\113\070\110" +
    "\071\073\072\106\073\111\074\067\075\107\101\070\102" +
    "\076\001\002\000\070\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\022\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\027\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\077\uffa3\105" +
    "\uffa3\112\uffa3\116\uffa3\117\uffa3\001\002\000\004\021\224" +
    "\001\002\000\070\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\012\uffa0\013\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\027\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\077\uffa0\105\uffa0" +
    "\112\uffa0\116\uffa0\117\uffa0\001\002\000\054\005\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\021\122" +
    "\025\uffcd\026\123\027\uffcd\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\001\002\000\004\021\221\001\002\000\004\021\216\001" +
    "\002\000\004\021\211\001\002\000\004\021\204\001\002" +
    "\000\006\025\177\027\200\001\002\000\004\021\117\001" +
    "\002\000\070\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2" +
    "\012\uffa2\013\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\027" +
    "\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2" +
    "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\077\uffa2\105\uffa2\112" +
    "\uffa2\116\uffa2\117\uffa2\001\002\000\070\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\025\uffa7\027\uffa7\034\uffa7\035\uffa7\036\uffa7" +
    "\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\077\uffa7\105\uffa7\112\uffa7\116\uffa7\117\uffa7\001\002" +
    "\000\006\025\uffcf\027\uffcf\001\002\000\054\006\071\015" +
    "\121\016\115\017\075\020\104\021\101\030\074\031\072" +
    "\032\102\033\114\046\100\066\103\067\113\070\110\071" +
    "\073\072\106\073\111\074\067\075\107\101\070\102\076" +
    "\001\002\000\046\005\140\006\134\007\136\010\137\011" +
    "\146\012\133\013\142\022\176\034\143\035\135\036\141" +
    "\037\132\040\144\041\150\042\131\043\151\044\145\045" +
    "\147\001\002\000\074\005\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\021\122\022\uffa1\023\uffa1\024" +
    "\uffa1\025\uffa1\026\123\027\uffa1\034\uffa1\035\uffa1\036\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045" +
    "\uffa1\077\uffa1\105\uffa1\112\uffa1\116\uffa1\117\uffa1\001\002" +
    "\000\056\006\071\015\121\016\115\017\075\020\104\021" +
    "\101\022\173\030\074\031\072\032\102\033\114\046\100" +
    "\066\103\067\113\070\110\071\073\072\106\073\111\074" +
    "\067\075\107\101\070\102\076\001\002\000\054\006\071" +
    "\015\121\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\066\103\067\113\070\110" +
    "\071\073\072\106\073\111\074\067\075\107\101\070\102" +
    "\076\001\002\000\054\005\140\006\134\007\136\010\137" +
    "\011\146\012\133\013\142\022\uff84\024\uff84\025\uff84\027" +
    "\uff84\034\143\035\135\036\141\037\132\040\144\041\150" +
    "\042\131\043\151\044\145\045\147\001\002\000\006\025" +
    "\126\027\127\001\002\000\054\006\071\015\121\016\115" +
    "\017\075\020\104\021\101\030\074\031\072\032\102\033" +
    "\114\046\100\066\103\067\113\070\110\071\073\072\106" +
    "\073\111\074\067\075\107\101\070\102\076\001\002\000" +
    "\070\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3" +
    "\013\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\027\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\077\uffb3\105\uffb3\112\uffb3\116" +
    "\uffb3\117\uffb3\001\002\000\054\005\140\006\134\007\136" +
    "\010\137\011\146\012\133\013\142\022\uff85\024\uff85\025" +
    "\uff85\027\uff85\034\143\035\135\036\141\037\132\040\144" +
    "\041\150\042\131\043\151\044\145\045\147\001\002\000" +
    "\054\006\071\015\121\016\115\017\075\020\104\021\101" +
    "\030\074\031\072\032\102\033\114\046\100\066\103\067" +
    "\113\070\110\071\073\072\106\073\111\074\067\075\107" +
    "\101\070\102\076\001\002\000\054\006\071\015\121\016" +
    "\115\017\075\020\104\021\101\030\074\031\072\032\102" +
    "\033\114\046\100\066\103\067\113\070\110\071\073\072" +
    "\106\073\111\074\067\075\107\101\070\102\076\001\002" +
    "\000\054\006\071\015\121\016\115\017\075\020\104\021" +
    "\101\030\074\031\072\032\102\033\114\046\100\066\103" +
    "\067\113\070\110\071\073\072\106\073\111\074\067\075" +
    "\107\101\070\102\076\001\002\000\054\006\071\015\121" +
    "\016\115\017\075\020\104\021\101\030\074\031\072\032" +
    "\102\033\114\046\100\066\103\067\113\070\110\071\073" +
    "\072\106\073\111\074\067\075\107\101\070\102\076\001" +
    "\002\000\054\006\071\015\121\016\115\017\075\020\104" +
    "\021\101\030\074\031\072\032\102\033\114\046\100\066" +
    "\103\067\113\070\110\071\073\072\106\073\111\074\067" +
    "\075\107\101\070\102\076\001\002\000\054\006\071\015" +
    "\121\016\115\017\075\020\104\021\101\030\074\031\072" +
    "\032\102\033\114\046\100\066\103\067\113\070\110\071" +
    "\073\072\106\073\111\074\067\075\107\101\070\102\076" +
    "\001\002\000\054\006\071\015\121\016\115\017\075\020" +
    "\104\021\101\030\074\031\072\032\102\033\114\046\100" +
    "\066\103\067\113\070\110\071\073\072\106\073\111\074" +
    "\067\075\107\101\070\102\076\001\002\000\054\006\071" +
    "\015\121\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\066\103\067\113\070\110" +
    "\071\073\072\106\073\111\074\067\075\107\101\070\102" +
    "\076\001\002\000\054\006\071\015\121\016\115\017\075" +
    "\020\104\021\101\030\074\031\072\032\102\033\114\046" +
    "\100\066\103\067\113\070\110\071\073\072\106\073\111" +
    "\074\067\075\107\101\070\102\076\001\002\000\004\015" +
    "\161\001\002\000\054\006\071\015\121\016\115\017\075" +
    "\020\104\021\101\030\074\031\072\032\102\033\114\046" +
    "\100\066\103\067\113\070\110\071\073\072\106\073\111" +
    "\074\067\075\107\101\070\102\076\001\002\000\054\006" +
    "\071\015\121\016\115\017\075\020\104\021\101\030\074" +
    "\031\072\032\102\033\114\046\100\066\103\067\113\070" +
    "\110\071\073\072\106\073\111\074\067\075\107\101\070" +
    "\102\076\001\002\000\054\006\071\015\121\016\115\017" +
    "\075\020\104\021\101\030\074\031\072\032\102\033\114" +
    "\046\100\066\103\067\113\070\110\071\073\072\106\073" +
    "\111\074\067\075\107\101\070\102\076\001\002\000\054" +
    "\006\071\015\121\016\115\017\075\020\104\021\101\030" +
    "\074\031\072\032\102\033\114\046\100\066\103\067\113" +
    "\070\110\071\073\072\106\073\111\074\067\075\107\101" +
    "\070\102\076\001\002\000\054\006\071\015\121\016\115" +
    "\017\075\020\104\021\101\030\074\031\072\032\102\033" +
    "\114\046\100\066\103\067\113\070\110\071\073\072\106" +
    "\073\111\074\067\075\107\101\070\102\076\001\002\000" +
    "\054\006\071\015\121\016\115\017\075\020\104\021\101" +
    "\030\074\031\072\032\102\033\114\046\100\066\103\067" +
    "\113\070\110\071\073\072\106\073\111\074\067\075\107" +
    "\101\070\102\076\001\002\000\054\006\071\015\121\016" +
    "\115\017\075\020\104\021\101\030\074\031\072\032\102" +
    "\033\114\046\100\066\103\067\113\070\110\071\073\072" +
    "\106\073\111\074\067\075\107\101\070\102\076\001\002" +
    "\000\070\005\140\006\134\007\136\010\137\011\146\012" +
    "\133\013\142\022\uffb9\023\uffb9\024\uffb9\025\uffb9\027\uffb9" +
    "\034\143\035\135\036\141\037\132\040\144\041\150\042" +
    "\131\043\uffb9\044\145\045\147\077\uffb9\105\uffb9\112\uffb9" +
    "\116\uffb9\117\uffb9\001\002\000\070\005\140\006\134\007" +
    "\136\010\137\011\146\012\133\013\142\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\027\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\077\uffbb\105\uffbb\112\uffbb\116\uffbb\117\uffbb\001\002\000" +
    "\070\005\140\006\134\007\136\010\137\011\146\012\133" +
    "\013\142\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\034" +
    "\143\035\135\036\141\037\132\040\144\041\150\042\131" +
    "\043\uffb7\044\uffb7\045\uffb7\077\uffb7\105\uffb7\112\uffb7\116" +
    "\uffb7\117\uffb7\001\002\000\070\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\133\013\142\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\027\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\077" +
    "\uffc2\105\uffc2\112\uffc2\116\uffc2\117\uffc2\001\002\000\070" +
    "\005\140\006\134\007\136\010\137\011\146\012\133\013" +
    "\142\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\034\143" +
    "\035\135\036\141\037\132\040\144\041\150\042\131\043" +
    "\uffb8\044\uffb8\045\uffb8\077\uffb8\105\uffb8\112\uffb8\116\uffb8" +
    "\117\uffb8\001\002\000\070\005\140\006\134\007\136\010" +
    "\137\011\146\012\133\013\142\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\027\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\077\uffbc" +
    "\105\uffbc\112\uffbc\116\uffbc\117\uffbc\001\002\000\070\005" +
    "\140\006\134\007\136\010\137\011\146\012\133\013\142" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\027\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\077\uffc0\105\uffc0\112\uffc0\116\uffc0\117" +
    "\uffc0\001\002\000\070\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\022\uff9e\023\uff9e\024\uff9e\025" +
    "\uff9e\027\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\077\uff9e\105" +
    "\uff9e\112\uff9e\116\uff9e\117\uff9e\001\002\000\070\005\140" +
    "\006\134\007\136\010\137\011\146\012\133\013\142\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\027\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\077\uffbe\105\uffbe\112\uffbe\116\uffbe\117\uffbe" +
    "\001\002\000\070\005\uffc6\006\uffc6\007\136\010\137\011" +
    "\146\012\133\013\142\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\027\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\077\uffc6\105\uffc6" +
    "\112\uffc6\116\uffc6\117\uffc6\001\002\000\070\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\133\013\142\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\027\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\077\uffc3\105\uffc3\112\uffc3\116\uffc3\117\uffc3\001" +
    "\002\000\070\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\012\133\013\142\022\uffc4\023\uffc4\024\uffc4\025\uffc4\027" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\077\uffc4\105\uffc4\112" +
    "\uffc4\116\uffc4\117\uffc4\001\002\000\070\005\140\006\134" +
    "\007\136\010\137\011\146\012\133\013\142\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\027\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\077\uffbf\105\uffbf\112\uffbf\116\uffbf\117\uffbf\001\002" +
    "\000\070\005\uffc5\006\uffc5\007\136\010\137\011\146\012" +
    "\133\013\142\022\uffc5\023\uffc5\024\uffc5\025\uffc5\027\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\077\uffc5\105\uffc5\112\uffc5" +
    "\116\uffc5\117\uffc5\001\002\000\070\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\142\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\027\uffc1\034\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\077\uffc1\105\uffc1\112\uffc1\116\uffc1\117\uffc1\001\002\000" +
    "\070\005\140\006\134\007\136\010\137\011\146\012\133" +
    "\013\142\022\uffbd\023\uffbd\024\uffbd\025\uffbd\027\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\044\uffbd\045\uffbd\077\uffbd\105\uffbd\112\uffbd\116" +
    "\uffbd\117\uffbd\001\002\000\070\005\140\006\134\007\136" +
    "\010\137\011\146\012\133\013\142\022\uffba\023\uffba\024" +
    "\uffba\025\uffba\027\uffba\034\143\035\135\036\141\037\132" +
    "\040\144\041\150\042\uffba\043\uffba\044\uffba\045\uffba\077" +
    "\uffba\105\uffba\112\uffba\116\uffba\117\uffba\001\002\000\070" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\027\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\077\uffb1\105\uffb1\112\uffb1\116\uffb1" +
    "\117\uffb1\001\002\000\006\022\175\025\126\001\002\000" +
    "\070\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\027\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\077\uffb2\105\uffb2\112\uffb2\116" +
    "\uffb2\117\uffb2\001\002\000\070\005\uffae\006\uffae\007\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\022\uffae\023\uffae\024" +
    "\uffae\025\uffae\027\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\077" +
    "\uffae\105\uffae\112\uffae\116\uffae\117\uffae\001\002\000\054" +
    "\006\071\015\105\016\115\017\075\020\104\021\101\030" +
    "\074\031\072\032\102\033\114\046\100\066\103\067\113" +
    "\070\110\071\073\072\106\073\111\074\067\075\107\101" +
    "\070\102\076\001\002\000\004\077\201\001\002\000\024" +
    "\015\047\030\051\056\040\057\042\060\050\061\044\062" +
    "\052\076\041\100\043\001\002\000\012\022\uffd1\023\uffd1" +
    "\025\uffd1\040\uffd1\001\002\000\006\025\uffd0\027\uffd0\001" +
    "\002\000\054\006\071\015\121\016\115\017\075\020\104" +
    "\021\101\030\074\031\072\032\102\033\114\046\100\066" +
    "\103\067\113\070\110\071\073\072\106\073\111\074\067" +
    "\075\107\101\070\102\076\001\002\000\046\005\140\006" +
    "\134\007\136\010\137\011\146\012\133\013\142\025\206" +
    "\034\143\035\135\036\141\037\132\040\144\041\150\042" +
    "\131\043\151\044\145\045\147\001\002\000\054\006\071" +
    "\015\121\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\066\103\067\113\070\110" +
    "\071\073\072\106\073\111\074\067\075\107\101\070\102" +
    "\076\001\002\000\046\005\140\006\134\007\136\010\137" +
    "\011\146\012\133\013\142\022\210\034\143\035\135\036" +
    "\141\037\132\040\144\041\150\042\131\043\151\044\145" +
    "\045\147\001\002\000\070\005\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\027\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\077\uffa8" +
    "\105\uffa8\112\uffa8\116\uffa8\117\uffa8\001\002\000\054\006" +
    "\071\015\121\016\115\017\075\020\104\021\101\030\074" +
    "\031\072\032\102\033\114\046\100\066\103\067\113\070" +
    "\110\071\073\072\106\073\111\074\067\075\107\101\070" +
    "\102\076\001\002\000\046\005\140\006\134\007\136\010" +
    "\137\011\146\012\133\013\142\025\213\034\143\035\135" +
    "\036\141\037\132\040\144\041\150\042\131\043\151\044" +
    "\145\045\147\001\002\000\054\006\071\015\121\016\115" +
    "\017\075\020\104\021\101\030\074\031\072\032\102\033" +
    "\114\046\100\066\103\067\113\070\110\071\073\072\106" +
    "\073\111\074\067\075\107\101\070\102\076\001\002\000" +
    "\046\005\140\006\134\007\136\010\137\011\146\012\133" +
    "\013\142\022\215\034\143\035\135\036\141\037\132\040" +
    "\144\041\150\042\131\043\151\044\145\045\147\001\002" +
    "\000\070\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\027\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\077\uffa9\105\uffa9\112\uffa9" +
    "\116\uffa9\117\uffa9\001\002\000\054\006\071\015\121\016" +
    "\115\017\075\020\104\021\101\030\074\031\072\032\102" +
    "\033\114\046\100\066\103\067\113\070\110\071\073\072" +
    "\106\073\111\074\067\075\107\101\070\102\076\001\002" +
    "\000\046\005\140\006\134\007\136\010\137\011\146\012" +
    "\133\013\142\022\220\034\143\035\135\036\141\037\132" +
    "\040\144\041\150\042\131\043\151\044\145\045\147\001" +
    "\002\000\070\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\027" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\043\uffaa\044\uffaa\045\uffaa\077\uffaa\105\uffaa\112" +
    "\uffaa\116\uffaa\117\uffaa\001\002\000\054\006\071\015\121" +
    "\016\115\017\075\020\104\021\101\030\074\031\072\032" +
    "\102\033\114\046\100\066\103\067\113\070\110\071\073" +
    "\072\106\073\111\074\067\075\107\101\070\102\076\001" +
    "\002\000\046\005\140\006\134\007\136\010\137\011\146" +
    "\012\133\013\142\022\223\034\143\035\135\036\141\037" +
    "\132\040\144\041\150\042\131\043\151\044\145\045\147" +
    "\001\002\000\070\005\uffac\006\uffac\007\uffac\010\uffac\011" +
    "\uffac\012\uffac\013\uffac\022\uffac\023\uffac\024\uffac\025\uffac" +
    "\027\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\077\uffac\105\uffac" +
    "\112\uffac\116\uffac\117\uffac\001\002\000\054\006\071\015" +
    "\121\016\115\017\075\020\104\021\101\030\074\031\072" +
    "\032\102\033\114\046\100\066\103\067\113\070\110\071" +
    "\073\072\106\073\111\074\067\075\107\101\070\102\076" +
    "\001\002\000\046\005\140\006\134\007\136\010\137\011" +
    "\146\012\133\013\142\025\226\034\143\035\135\036\141" +
    "\037\132\040\144\041\150\042\131\043\151\044\145\045" +
    "\147\001\002\000\054\006\071\015\121\016\115\017\075" +
    "\020\104\021\101\030\074\031\072\032\102\033\114\046" +
    "\100\066\103\067\113\070\110\071\073\072\106\073\111" +
    "\074\067\075\107\101\070\102\076\001\002\000\046\005" +
    "\140\006\134\007\136\010\137\011\146\012\133\013\142" +
    "\022\230\034\143\035\135\036\141\037\132\040\144\041" +
    "\150\042\131\043\151\044\145\045\147\001\002\000\070" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\027\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\077\uff9f\105\uff9f\112\uff9f\116\uff9f" +
    "\117\uff9f\001\002\000\046\005\140\006\134\007\136\010" +
    "\137\011\146\012\133\013\142\022\232\034\143\035\135" +
    "\036\141\037\132\040\144\041\150\042\131\043\151\044" +
    "\145\045\147\001\002\000\070\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\013\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\027\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\077" +
    "\uffb4\105\uffb4\112\uffb4\116\uffb4\117\uffb4\001\002\000\070" +
    "\005\140\006\134\007\136\010\137\011\146\012\133\013" +
    "\142\022\uffb6\023\uffb6\024\uffb6\025\uffb6\027\uffb6\034\143" +
    "\035\135\036\141\037\132\040\144\041\150\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\077\uffb6\105\uffb6\112\uffb6\116\uffb6" +
    "\117\uffb6\001\002\000\006\013\235\015\161\001\002\000" +
    "\054\006\071\015\121\016\115\017\075\020\104\021\101" +
    "\030\074\031\072\032\102\033\114\046\100\066\103\067" +
    "\113\070\110\071\073\072\106\073\111\074\067\075\107" +
    "\101\070\102\076\001\002\000\050\005\140\006\134\007" +
    "\136\010\137\011\146\012\133\013\142\025\uffce\027\uffce" +
    "\034\143\035\135\036\141\037\132\040\144\041\150\042" +
    "\131\043\151\044\145\045\147\001\002\000\054\006\071" +
    "\015\121\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\066\103\067\113\070\110" +
    "\071\073\072\106\073\111\074\067\075\107\101\070\102" +
    "\076\001\002\000\046\005\140\006\134\007\136\010\137" +
    "\011\146\012\133\013\142\022\241\034\143\035\135\036" +
    "\141\037\132\040\144\041\150\042\131\043\151\044\145" +
    "\045\147\001\002\000\070\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\027\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\077\uffaf" +
    "\105\uffaf\112\uffaf\116\uffaf\117\uffaf\001\002\000\054\006" +
    "\071\015\121\016\115\017\075\020\104\021\101\030\074" +
    "\031\072\032\102\033\114\046\100\066\103\067\113\070" +
    "\110\071\073\072\106\073\111\074\067\075\107\101\070" +
    "\102\076\001\002\000\046\005\140\006\134\007\136\010" +
    "\137\011\146\012\133\013\142\022\244\034\143\035\135" +
    "\036\141\037\132\040\144\041\150\042\131\043\151\044" +
    "\145\045\147\001\002\000\070\005\uffad\006\uffad\007\uffad" +
    "\010\uffad\011\uffad\012\uffad\013\uffad\022\uffad\023\uffad\024" +
    "\uffad\025\uffad\027\uffad\034\uffad\035\uffad\036\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\077" +
    "\uffad\105\uffad\112\uffad\116\uffad\117\uffad\001\002\000\070" +
    "\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\077\uffb5\105\uffb5\112\uffb5\116\uffb5" +
    "\117\uffb5\001\002\000\004\015\247\001\002\000\004\022" +
    "\250\001\002\000\070\005\uffb0\006\uffb0\007\uffb0\010\uffb0" +
    "\011\uffb0\012\uffb0\013\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\027\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\077\uffb0\105" +
    "\uffb0\112\uffb0\116\uffb0\117\uffb0\001\002\000\054\006\071" +
    "\015\121\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\066\103\067\113\070\110" +
    "\071\073\072\106\073\111\074\067\075\107\101\070\102" +
    "\076\001\002\000\046\005\140\006\134\007\136\010\137" +
    "\011\146\012\133\013\142\022\253\034\143\035\135\036" +
    "\141\037\132\040\144\041\150\042\131\043\151\044\145" +
    "\045\147\001\002\000\070\005\uffab\006\uffab\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\013\uffab\022\uffab\023\uffab\024\uffab" +
    "\025\uffab\027\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\077\uffab" +
    "\105\uffab\112\uffab\116\uffab\117\uffab\001\002\000\054\006" +
    "\071\015\121\016\115\017\075\020\104\021\101\030\074" +
    "\031\072\032\102\033\114\046\100\066\103\067\113\070" +
    "\110\071\073\072\106\073\111\074\067\075\107\101\070" +
    "\102\076\001\002\000\012\015\ufff7\053\ufff7\054\ufff7\121" +
    "\ufff7\001\002\000\046\005\140\006\134\007\136\010\137" +
    "\011\146\012\133\013\142\023\257\034\143\035\135\036" +
    "\141\037\132\040\144\041\150\042\131\043\151\044\145" +
    "\045\147\001\002\000\012\015\ufff8\053\ufff8\054\ufff8\121" +
    "\ufff8\001\002\000\014\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\040\uffc8\001\002\000\004\021\262\001\002\000\004\015" +
    "\263\001\002\000\014\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\040\uffc7\001\002\000\006\022\265\025\035\001\002\000" +
    "\004\023\266\001\002\000\012\015\ufff6\053\ufff6\054\ufff6" +
    "\121\ufff6\001\002\000\004\023\u0131\001\002\000\054\006" +
    "\071\015\121\016\115\017\075\020\104\021\101\030\074" +
    "\031\072\032\102\033\114\046\100\066\103\067\113\070" +
    "\110\071\073\072\106\073\111\074\067\075\107\101\070" +
    "\102\076\001\002\000\004\023\u0120\001\002\000\076\006" +
    "\071\015\303\016\115\017\075\020\104\021\101\030\074" +
    "\031\072\032\102\033\114\046\100\064\301\065\274\066" +
    "\103\067\113\070\110\071\073\072\106\073\111\074\067" +
    "\075\107\101\070\102\076\103\315\104\302\107\270\111" +
    "\312\113\272\115\273\120\307\001\002\000\004\015\u010d" +
    "\001\002\000\004\021\u010a\001\002\000\004\023\u0109\001" +
    "\002\000\100\006\071\015\303\016\115\017\075\020\104" +
    "\021\101\030\074\031\072\032\102\033\114\046\100\055" +
    "\u0107\064\301\065\274\066\103\067\113\070\110\071\073" +
    "\072\106\073\111\074\067\075\107\101\070\102\076\103" +
    "\315\104\302\107\270\111\312\113\272\115\273\120\307" +
    "\001\002\000\004\023\u0106\001\002\000\104\006\uff97\015" +
    "\uff97\016\uff97\017\uff97\020\uff97\021\uff97\023\uff97\030\uff97" +
    "\031\uff97\032\uff97\033\uff97\046\uff97\055\uff97\064\uff97\065" +
    "\uff97\066\uff97\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97" +
    "\074\uff97\075\uff97\101\uff97\102\uff97\103\uff97\104\uff97\107" +
    "\uff97\111\uff97\113\uff97\114\uff97\115\uff97\120\uff97\001\002" +
    "\000\004\021\u0100\001\002\000\054\006\071\015\121\016" +
    "\115\017\075\020\104\021\101\030\074\031\072\032\102" +
    "\033\114\046\100\066\103\067\113\070\110\071\073\072" +
    "\106\073\111\074\067\075\107\101\070\102\076\001\002" +
    "\000\052\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012" +
    "\uffa1\013\uffa1\021\122\024\344\026\345\034\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\001\002\000\104\006\uff9a\015\uff9a\016\uff9a" +
    "\017\uff9a\020\uff9a\021\uff9a\023\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\046\uff9a\055\uff9a\064\uff9a\065\uff9a\066\uff9a" +
    "\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075" +
    "\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\107\uff9a\111\uff9a" +
    "\113\uff9a\114\uff9a\115\uff9a\120\uff9a\001\002\000\044\005" +
    "\140\006\134\007\136\010\137\011\146\012\133\013\337" +
    "\034\143\035\135\036\141\037\132\040\144\041\150\042" +
    "\131\043\151\044\145\045\147\001\002\000\004\023\336" +
    "\001\002\000\004\021\333\001\002\000\004\023\332\001" +
    "\002\000\004\023\331\001\002\000\054\006\071\015\121" +
    "\016\115\017\075\020\104\021\101\030\074\031\072\032" +
    "\102\033\114\046\100\066\103\067\113\070\110\071\073" +
    "\072\106\073\111\074\067\075\107\101\070\102\076\001" +
    "\002\000\004\023\322\001\002\000\004\013\321\001\002" +
    "\000\004\021\316\001\002\000\004\015\317\001\002\000" +
    "\004\022\320\001\002\000\004\023\uffc9\001\002\000\004" +
    "\002\uff9c\001\002\000\104\006\uff92\015\uff92\016\uff92\017" +
    "\uff92\020\uff92\021\uff92\023\uff92\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\046\uff92\055\uff92\064\uff92\065\uff92\066\uff92\067" +
    "\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92" +
    "\101\uff92\102\uff92\103\uff92\104\uff92\107\uff92\111\uff92\113" +
    "\uff92\114\uff92\115\uff92\120\uff92\001\002\000\046\005\140" +
    "\006\134\007\136\010\137\011\146\012\133\013\142\034" +
    "\143\035\135\036\141\037\132\040\144\041\150\042\131" +
    "\043\151\044\145\045\147\112\324\001\002\000\004\054" +
    "\325\001\002\000\076\006\071\015\303\016\115\017\075" +
    "\020\104\021\101\030\074\031\072\032\102\033\114\046" +
    "\100\064\301\065\274\066\103\067\113\070\110\071\073" +
    "\072\106\073\111\074\067\075\107\101\070\102\076\103" +
    "\315\104\302\107\270\111\312\113\272\115\273\120\307" +
    "\001\002\000\100\006\071\015\303\016\115\017\075\020" +
    "\104\021\101\030\074\031\072\032\102\033\114\046\100" +
    "\055\330\064\301\065\274\066\103\067\113\070\110\071" +
    "\073\072\106\073\111\074\067\075\107\101\070\102\076" +
    "\103\315\104\302\107\270\111\312\113\272\115\273\120" +
    "\307\001\002\000\104\006\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\023\uff9b\030\uff9b\031\uff9b\032\uff9b\033" +
    "\uff9b\046\uff9b\055\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b" +
    "\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\101" +
    "\uff9b\102\uff9b\103\uff9b\104\uff9b\107\uff9b\111\uff9b\113\uff9b" +
    "\114\uff9b\115\uff9b\120\uff9b\001\002\000\004\023\uff78\001" +
    "\002\000\104\006\uff93\015\uff93\016\uff93\017\uff93\020\uff93" +
    "\021\uff93\023\uff93\030\uff93\031\uff93\032\uff93\033\uff93\046" +
    "\uff93\055\uff93\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93" +
    "\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\101\uff93\102" +
    "\uff93\103\uff93\104\uff93\107\uff93\111\uff93\113\uff93\114\uff93" +
    "\115\uff93\120\uff93\001\002\000\104\006\uff99\015\uff99\016" +
    "\uff99\017\uff99\020\uff99\021\uff99\023\uff99\030\uff99\031\uff99" +
    "\032\uff99\033\uff99\046\uff99\055\uff99\064\uff99\065\uff99\066" +
    "\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99" +
    "\075\uff99\101\uff99\102\uff99\103\uff99\104\uff99\107\uff99\111" +
    "\uff99\113\uff99\114\uff99\115\uff99\120\uff99\001\002\000\004" +
    "\015\334\001\002\000\004\022\335\001\002\000\004\023" +
    "\uff74\001\002\000\104\006\uff94\015\uff94\016\uff94\017\uff94" +
    "\020\uff94\021\uff94\023\uff94\030\uff94\031\uff94\032\uff94\033" +
    "\uff94\046\uff94\055\uff94\064\uff94\065\uff94\066\uff94\067\uff94" +
    "\070\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\101" +
    "\uff94\102\uff94\103\uff94\104\uff94\107\uff94\111\uff94\113\uff94" +
    "\114\uff94\115\uff94\120\uff94\001\002\000\004\015\340\001" +
    "\002\000\046\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\013\uff9e\024\341\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\001\002\000\004\040\342\001\002\000\054\006\071\015" +
    "\121\016\115\017\075\020\104\021\101\030\074\031\072" +
    "\032\102\033\114\046\100\066\103\067\113\070\110\071" +
    "\073\072\106\073\111\074\067\075\107\101\070\102\076" +
    "\001\002\000\046\005\140\006\134\007\136\010\137\011" +
    "\146\012\133\013\142\023\uff86\034\143\035\135\036\141" +
    "\037\132\040\144\041\150\042\131\043\151\044\145\045" +
    "\147\001\002\000\004\040\353\001\002\000\054\006\071" +
    "\015\121\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\066\103\067\113\070\110" +
    "\071\073\072\106\073\111\074\067\075\107\101\070\102" +
    "\076\001\002\000\006\025\126\027\347\001\002\000\046" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\024\350\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\001\002\000" +
    "\004\040\351\001\002\000\054\006\071\015\121\016\115" +
    "\017\075\020\104\021\101\030\074\031\072\032\102\033" +
    "\114\046\100\066\103\067\113\070\110\071\073\072\106" +
    "\073\111\074\067\075\107\101\070\102\076\001\002\000" +
    "\046\005\140\006\134\007\136\010\137\011\146\012\133" +
    "\013\142\023\uff87\034\143\035\135\036\141\037\132\040" +
    "\144\041\150\042\131\043\151\044\145\045\147\001\002" +
    "\000\054\006\071\015\121\016\115\017\075\020\104\021" +
    "\101\030\074\031\072\032\102\033\114\046\100\066\103" +
    "\067\113\070\110\071\073\072\106\073\111\074\067\075" +
    "\107\101\070\102\076\001\002\000\046\005\140\006\134" +
    "\007\136\010\137\011\146\012\133\013\142\023\uff88\034" +
    "\143\035\135\036\141\037\132\040\144\041\150\042\131" +
    "\043\151\044\145\045\147\001\002\000\046\005\140\006" +
    "\134\007\136\010\137\011\146\012\133\013\142\034\143" +
    "\035\135\036\141\037\132\040\144\041\150\042\131\043" +
    "\151\044\145\045\147\105\356\001\002\000\066\006\071" +
    "\015\303\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\054\362\064\301\065\274" +
    "\066\103\067\113\070\110\071\073\072\106\073\111\074" +
    "\067\075\107\101\070\102\076\103\315\120\307\001\002" +
    "\000\004\023\377\001\002\000\004\023\376\001\002\000" +
    "\106\006\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f" +
    "\023\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\046\uff7f\055" +
    "\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f" +
    "\072\uff7f\073\uff7f\074\uff7f\075\uff7f\101\uff7f\102\uff7f\103" +
    "\uff7f\104\uff7f\106\uff7f\107\uff7f\111\uff7f\113\uff7f\114\uff7f" +
    "\115\uff7f\120\uff7f\001\002\000\076\006\071\015\303\016" +
    "\115\017\075\020\104\021\101\030\074\031\072\032\102" +
    "\033\114\046\100\064\301\065\274\066\103\067\113\070" +
    "\110\071\073\072\106\073\111\074\067\075\107\101\070" +
    "\102\076\103\315\104\302\107\270\111\312\113\272\115" +
    "\273\120\307\001\002\000\106\006\uff83\015\uff83\016\uff83" +
    "\017\uff83\020\uff83\021\uff83\023\uff83\030\uff83\031\uff83\032" +
    "\uff83\033\uff83\046\uff83\055\uff83\064\uff83\065\uff83\066\uff83" +
    "\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075" +
    "\uff83\101\uff83\102\uff83\103\uff83\104\uff83\106\370\107\uff83" +
    "\111\uff83\113\uff83\114\uff83\115\uff83\120\uff83\001\002\000" +
    "\004\023\367\001\002\000\004\023\366\001\002\000\106" +
    "\006\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\023" +
    "\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\046\uff8d\055\uff8d" +
    "\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072" +
    "\uff8d\073\uff8d\074\uff8d\075\uff8d\101\uff8d\102\uff8d\103\uff8d" +
    "\104\uff8d\106\uff8d\107\uff8d\111\uff8d\113\uff8d\114\uff8d\115" +
    "\uff8d\120\uff8d\001\002\000\106\006\uff90\015\uff90\016\uff90" +
    "\017\uff90\020\uff90\021\uff90\023\uff90\030\uff90\031\uff90\032" +
    "\uff90\033\uff90\046\uff90\055\uff90\064\uff90\065\uff90\066\uff90" +
    "\067\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075" +
    "\uff90\101\uff90\102\uff90\103\uff90\104\uff90\106\uff90\107\uff90" +
    "\111\uff90\113\uff90\114\uff90\115\uff90\120\uff90\001\002\000" +
    "\070\006\071\015\303\016\115\017\075\020\104\021\101" +
    "\030\074\031\072\032\102\033\114\046\100\054\362\064" +
    "\301\065\274\066\103\067\113\070\110\071\073\072\106" +
    "\073\111\074\067\075\107\101\070\102\076\103\315\104" +
    "\302\120\307\001\002\000\104\006\uff82\015\uff82\016\uff82" +
    "\017\uff82\020\uff82\021\uff82\023\uff82\030\uff82\031\uff82\032" +
    "\uff82\033\uff82\046\uff82\055\uff82\064\uff82\065\uff82\066\uff82" +
    "\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075" +
    "\uff82\101\uff82\102\uff82\103\uff82\104\uff82\107\uff82\111\uff82" +
    "\113\uff82\114\uff82\115\uff82\120\uff82\001\002\000\104\006" +
    "\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\023\uff81" +
    "\030\uff81\031\uff81\032\uff81\033\uff81\046\uff81\055\uff81\064" +
    "\uff81\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81" +
    "\073\uff81\074\uff81\075\uff81\101\uff81\102\uff81\103\uff81\104" +
    "\uff81\107\uff81\111\uff81\113\uff81\114\uff81\115\uff81\120\uff81" +
    "\001\002\000\100\006\071\015\303\016\115\017\075\020" +
    "\104\021\101\030\074\031\072\032\102\033\114\046\100" +
    "\055\374\064\301\065\274\066\103\067\113\070\110\071" +
    "\073\072\106\073\111\074\067\075\107\101\070\102\076" +
    "\103\315\104\302\107\270\111\312\113\272\115\273\120" +
    "\307\001\002\000\004\023\375\001\002\000\106\006\uff80" +
    "\015\uff80\016\uff80\017\uff80\020\uff80\021\uff80\023\uff80\030" +
    "\uff80\031\uff80\032\uff80\033\uff80\046\uff80\055\uff80\064\uff80" +
    "\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80\073" +
    "\uff80\074\uff80\075\uff80\101\uff80\102\uff80\103\uff80\104\uff80" +
    "\106\uff80\107\uff80\111\uff80\113\uff80\114\uff80\115\uff80\120" +
    "\uff80\001\002\000\106\006\uff8f\015\uff8f\016\uff8f\017\uff8f" +
    "\020\uff8f\021\uff8f\023\uff8f\030\uff8f\031\uff8f\032\uff8f\033" +
    "\uff8f\046\uff8f\055\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f" +
    "\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\101" +
    "\uff8f\102\uff8f\103\uff8f\104\uff8f\106\uff8f\107\uff8f\111\uff8f" +
    "\113\uff8f\114\uff8f\115\uff8f\120\uff8f\001\002\000\106\006" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\023\uff8e" +
    "\030\uff8e\031\uff8e\032\uff8e\033\uff8e\046\uff8e\055\uff8e\064" +
    "\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e" +
    "\073\uff8e\074\uff8e\075\uff8e\101\uff8e\102\uff8e\103\uff8e\104" +
    "\uff8e\106\uff8e\107\uff8e\111\uff8e\113\uff8e\114\uff8e\115\uff8e" +
    "\120\uff8e\001\002\000\054\006\071\015\121\016\115\017" +
    "\075\020\104\021\101\030\074\031\072\032\102\033\114" +
    "\046\100\066\103\067\113\070\110\071\073\072\106\073" +
    "\111\074\067\075\107\101\070\102\076\001\002\000\050" +
    "\005\140\006\134\007\136\010\137\011\146\012\133\013" +
    "\142\022\uff89\025\uff89\034\143\035\135\036\141\037\132" +
    "\040\144\041\150\042\131\043\151\044\145\045\147\001" +
    "\002\000\006\022\u0104\025\u0103\001\002\000\054\006\071" +
    "\015\121\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\066\103\067\113\070\110" +
    "\071\073\072\106\073\111\074\067\075\107\101\070\102" +
    "\076\001\002\000\004\023\uff8c\001\002\000\050\005\140" +
    "\006\134\007\136\010\137\011\146\012\133\013\142\022" +
    "\uff8a\025\uff8a\034\143\035\135\036\141\037\132\040\144" +
    "\041\150\042\131\043\151\044\145\045\147\001\002\000" +
    "\104\006\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98" +
    "\023\uff98\030\uff98\031\uff98\032\uff98\033\uff98\046\uff98\055" +
    "\uff98\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98" +
    "\072\uff98\073\uff98\074\uff98\075\uff98\101\uff98\102\uff98\103" +
    "\uff98\104\uff98\107\uff98\111\uff98\113\uff98\114\uff98\115\uff98" +
    "\120\uff98\001\002\000\004\013\u0108\001\002\000\004\002" +
    "\uff9d\001\002\000\104\006\uff95\015\uff95\016\uff95\017\uff95" +
    "\020\uff95\021\uff95\023\uff95\030\uff95\031\uff95\032\uff95\033" +
    "\uff95\046\uff95\055\uff95\064\uff95\065\uff95\066\uff95\067\uff95" +
    "\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\101" +
    "\uff95\102\uff95\103\uff95\104\uff95\107\uff95\111\uff95\113\uff95" +
    "\114\uff95\115\uff95\120\uff95\001\002\000\054\006\071\015" +
    "\121\016\115\017\075\020\104\021\101\030\074\031\072" +
    "\032\102\033\114\046\100\066\103\067\113\070\110\071" +
    "\073\072\106\073\111\074\067\075\107\101\070\102\076" +
    "\001\002\000\006\022\u010c\025\u0103\001\002\000\004\023" +
    "\uff8b\001\002\000\004\024\u010e\001\002\000\004\040\u010f" +
    "\001\002\000\054\006\071\015\121\016\115\017\075\020" +
    "\104\021\101\030\074\031\072\032\102\033\114\046\100" +
    "\066\103\067\113\070\110\071\073\072\106\073\111\074" +
    "\067\075\107\101\070\102\076\001\002\000\050\005\140" +
    "\006\134\007\136\010\137\011\146\012\133\013\142\034" +
    "\143\035\135\036\141\037\132\040\144\041\150\042\131" +
    "\043\151\044\145\045\147\116\u0112\117\u0111\001\002\000" +
    "\054\006\071\015\121\016\115\017\075\020\104\021\101" +
    "\030\074\031\072\032\102\033\114\046\100\066\103\067" +
    "\113\070\110\071\073\072\106\073\111\074\067\075\107" +
    "\101\070\102\076\001\002\000\054\006\071\015\121\016" +
    "\115\017\075\020\104\021\101\030\074\031\072\032\102" +
    "\033\114\046\100\066\103\067\113\070\110\071\073\072" +
    "\106\073\111\074\067\075\107\101\070\102\076\001\002" +
    "\000\046\005\140\006\134\007\136\010\137\011\146\012" +
    "\133\013\142\034\143\035\135\036\141\037\132\040\144" +
    "\041\150\042\131\043\151\044\145\045\147\112\u0114\001" +
    "\002\000\004\054\u0115\001\002\000\076\006\071\015\303" +
    "\016\115\017\075\020\104\021\101\030\074\031\072\032" +
    "\102\033\114\046\100\064\301\065\274\066\103\067\113" +
    "\070\110\071\073\072\106\073\111\074\067\075\107\101" +
    "\070\102\076\103\315\104\302\107\270\111\312\113\272" +
    "\115\273\120\307\001\002\000\100\006\071\015\303\016" +
    "\115\017\075\020\104\021\101\030\074\031\072\032\102" +
    "\033\114\046\100\055\u0117\064\301\065\274\066\103\067" +
    "\113\070\110\071\073\072\106\073\111\074\067\075\107" +
    "\101\070\102\076\103\315\104\302\107\270\111\312\113" +
    "\272\115\273\120\307\001\002\000\004\023\uff76\001\002" +
    "\000\046\005\140\006\134\007\136\010\137\011\146\012" +
    "\133\013\142\034\143\035\135\036\141\037\132\040\144" +
    "\041\150\042\131\043\151\044\145\045\147\112\u0119\001" +
    "\002\000\004\054\u011a\001\002\000\076\006\071\015\303" +
    "\016\115\017\075\020\104\021\101\030\074\031\072\032" +
    "\102\033\114\046\100\064\301\065\274\066\103\067\113" +
    "\070\110\071\073\072\106\073\111\074\067\075\107\101" +
    "\070\102\076\103\315\104\302\107\270\111\312\113\272" +
    "\115\273\120\307\001\002\000\100\006\071\015\303\016" +
    "\115\017\075\020\104\021\101\030\074\031\072\032\102" +
    "\033\114\046\100\055\u011c\064\301\065\274\066\103\067" +
    "\113\070\110\071\073\072\106\073\111\074\067\075\107" +
    "\101\070\102\076\103\315\104\302\107\270\111\312\113" +
    "\272\115\273\120\307\001\002\000\004\023\uff75\001\002" +
    "\000\100\006\071\015\303\016\115\017\075\020\104\021" +
    "\101\030\074\031\072\032\102\033\114\046\100\064\301" +
    "\065\274\066\103\067\113\070\110\071\073\072\106\073" +
    "\111\074\067\075\107\101\070\102\076\103\315\104\302" +
    "\107\270\111\312\113\272\114\u011e\115\273\120\307\001" +
    "\002\000\054\006\071\015\121\016\115\017\075\020\104" +
    "\021\101\030\074\031\072\032\102\033\114\046\100\066" +
    "\103\067\113\070\110\071\073\072\106\073\111\074\067" +
    "\075\107\101\070\102\076\001\002\000\046\005\140\006" +
    "\134\007\136\010\137\011\146\012\133\013\142\023\uff77" +
    "\034\143\035\135\036\141\037\132\040\144\041\150\042" +
    "\131\043\151\044\145\045\147\001\002\000\104\006\uff96" +
    "\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\023\uff96\030" +
    "\uff96\031\uff96\032\uff96\033\uff96\046\uff96\055\uff96\064\uff96" +
    "\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073" +
    "\uff96\074\uff96\075\uff96\101\uff96\102\uff96\103\uff96\104\uff96" +
    "\107\uff96\111\uff96\113\uff96\114\uff96\115\uff96\120\uff96\001" +
    "\002\000\046\005\140\006\134\007\136\010\137\011\146" +
    "\012\133\013\142\034\143\035\135\036\141\037\132\040" +
    "\144\041\150\042\131\043\151\044\145\045\147\077\u0122" +
    "\001\002\000\054\006\071\015\121\016\115\017\075\020" +
    "\104\021\101\030\074\031\072\032\102\033\114\046\100" +
    "\066\103\067\113\070\110\071\073\072\106\073\111\074" +
    "\067\075\107\101\070\102\076\001\002\000\060\006\071" +
    "\015\121\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\055\u0129\066\103\067\113" +
    "\070\110\071\073\072\106\073\111\074\067\075\107\101" +
    "\070\102\076\110\u012c\001\002\000\060\006\uff7b\015\uff7b" +
    "\016\uff7b\017\uff7b\020\uff7b\021\uff7b\030\uff7b\031\uff7b\032" +
    "\uff7b\033\uff7b\046\uff7b\055\uff7b\066\uff7b\067\uff7b\070\uff7b" +
    "\071\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\101\uff7b\102" +
    "\uff7b\110\uff7b\001\002\000\006\024\u0126\025\126\001\002" +
    "\000\076\006\071\015\303\016\115\017\075\020\104\021" +
    "\101\030\074\031\072\032\102\033\114\046\100\064\301" +
    "\065\274\066\103\067\113\070\110\071\073\072\106\073" +
    "\111\074\067\075\107\101\070\102\076\103\315\104\302" +
    "\107\270\111\312\113\272\115\273\120\307\001\002\000" +
    "\100\006\071\015\303\016\115\017\075\020\104\021\101" +
    "\023\u0128\030\074\031\072\032\102\033\114\046\100\064" +
    "\301\065\274\066\103\067\113\070\110\071\073\072\106" +
    "\073\111\074\067\075\107\101\070\102\076\103\315\104" +
    "\302\107\270\111\312\113\272\115\273\120\307\001\002" +
    "\000\060\006\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021" +
    "\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a\046\uff7a\055\uff7a" +
    "\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\074" +
    "\uff7a\075\uff7a\101\uff7a\102\uff7a\110\uff7a\001\002\000\004" +
    "\023\uff7d\001\002\000\004\055\u0130\001\002\000\060\006" +
    "\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\030\uff7c" +
    "\031\uff7c\032\uff7c\033\uff7c\046\uff7c\055\uff7c\066\uff7c\067" +
    "\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c\075\uff7c" +
    "\101\uff7c\102\uff7c\110\uff7c\001\002\000\004\024\u012d\001" +
    "\002\000\076\006\071\015\303\016\115\017\075\020\104" +
    "\021\101\030\074\031\072\032\102\033\114\046\100\064" +
    "\301\065\274\066\103\067\113\070\110\071\073\072\106" +
    "\073\111\074\067\075\107\101\070\102\076\103\315\104" +
    "\302\107\270\111\312\113\272\115\273\120\307\001\002" +
    "\000\100\006\071\015\303\016\115\017\075\020\104\021" +
    "\101\023\u012f\030\074\031\072\032\102\033\114\046\100" +
    "\064\301\065\274\066\103\067\113\070\110\071\073\072" +
    "\106\073\111\074\067\075\107\101\070\102\076\103\315" +
    "\104\302\107\270\111\312\113\272\115\273\120\307\001" +
    "\002\000\004\055\uff79\001\002\000\004\023\uff7e\001\002" +
    "\000\104\006\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021" +
    "\uff91\023\uff91\030\uff91\031\uff91\032\uff91\033\uff91\046\uff91" +
    "\055\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071" +
    "\uff91\072\uff91\073\uff91\074\uff91\075\uff91\101\uff91\102\uff91" +
    "\103\uff91\104\uff91\107\uff91\111\uff91\113\uff91\114\uff91\115" +
    "\uff91\120\uff91\001\002\000\006\021\u0134\024\u0133\001\002" +
    "\000\024\015\047\030\051\056\040\057\042\060\050\061" +
    "\044\062\052\076\041\100\043\001\002\000\006\015\263" +
    "\053\u0135\001\002\000\004\015\263\001\002\000\006\022" +
    "\u013c\025\u013b\001\002\000\006\024\u0139\025\035\001\002" +
    "\000\006\022\uffe5\025\uffe5\001\002\000\024\015\047\030" +
    "\051\056\040\057\042\060\050\061\044\062\052\076\041" +
    "\100\043\001\002\000\006\022\uffe4\025\uffe4\001\002\000" +
    "\006\015\263\053\u0135\001\002\000\004\024\u013d\001\002" +
    "\000\024\015\047\030\051\056\040\057\042\060\050\061" +
    "\044\062\052\076\041\100\043\001\002\000\004\023\u013f" +
    "\001\002\000\010\053\015\054\u0141\121\023\001\002\000" +
    "\004\054\u0145\001\002\000\076\006\071\015\303\016\115" +
    "\017\075\020\104\021\101\030\074\031\072\032\102\033" +
    "\114\046\100\064\301\065\274\066\103\067\113\070\110" +
    "\071\073\072\106\073\111\074\067\075\107\101\070\102" +
    "\076\103\315\104\302\107\270\111\312\113\272\115\273" +
    "\120\307\001\002\000\100\006\071\015\303\016\115\017" +
    "\075\020\104\021\101\030\074\031\072\032\102\033\114" +
    "\046\100\055\u0143\064\301\065\274\066\103\067\113\070" +
    "\110\071\073\072\106\073\111\074\067\075\107\101\070" +
    "\102\076\103\315\104\302\107\270\111\312\113\272\115" +
    "\273\120\307\001\002\000\004\023\u0144\001\002\000\006" +
    "\054\uffe8\121\uffe8\001\002\000\076\006\071\015\303\016" +
    "\115\017\075\020\104\021\101\030\074\031\072\032\102" +
    "\033\114\046\100\064\301\065\274\066\103\067\113\070" +
    "\110\071\073\072\106\073\111\074\067\075\107\101\070" +
    "\102\076\103\315\104\302\107\270\111\312\113\272\115" +
    "\273\120\307\001\002\000\100\006\071\015\303\016\115" +
    "\017\075\020\104\021\101\030\074\031\072\032\102\033" +
    "\114\046\100\055\u0147\064\301\065\274\066\103\067\113" +
    "\070\110\071\073\072\106\073\111\074\067\075\107\101" +
    "\070\102\076\103\315\104\302\107\270\111\312\113\272" +
    "\115\273\120\307\001\002\000\004\023\u0148\001\002\000" +
    "\006\054\uffea\121\uffea\001\002\000\006\022\uffe6\025\uffe6" +
    "\001\002\000\006\024\u014b\025\035\001\002\000\024\015" +
    "\047\030\051\056\040\057\042\060\050\061\044\062\052" +
    "\076\041\100\043\001\002\000\006\022\uffe3\025\uffe3\001" +
    "\002\000\004\023\u014e\001\002\000\010\053\015\054\u0150" +
    "\121\023\001\002\000\004\054\u0154\001\002\000\076\006" +
    "\071\015\303\016\115\017\075\020\104\021\101\030\074" +
    "\031\072\032\102\033\114\046\100\064\301\065\274\066" +
    "\103\067\113\070\110\071\073\072\106\073\111\074\067" +
    "\075\107\101\070\102\076\103\315\104\302\107\270\111" +
    "\312\113\272\115\273\120\307\001\002\000\100\006\071" +
    "\015\303\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\055\u0152\064\301\065\274" +
    "\066\103\067\113\070\110\071\073\072\106\073\111\074" +
    "\067\075\107\101\070\102\076\103\315\104\302\107\270" +
    "\111\312\113\272\115\273\120\307\001\002\000\004\023" +
    "\u0153\001\002\000\006\054\uffe7\121\uffe7\001\002\000\076" +
    "\006\071\015\303\016\115\017\075\020\104\021\101\030" +
    "\074\031\072\032\102\033\114\046\100\064\301\065\274" +
    "\066\103\067\113\070\110\071\073\072\106\073\111\074" +
    "\067\075\107\101\070\102\076\103\315\104\302\107\270" +
    "\111\312\113\272\115\273\120\307\001\002\000\100\006" +
    "\071\015\303\016\115\017\075\020\104\021\101\030\074" +
    "\031\072\032\102\033\114\046\100\055\u0156\064\301\065" +
    "\274\066\103\067\113\070\110\071\073\072\106\073\111" +
    "\074\067\075\107\101\070\102\076\103\315\104\302\107" +
    "\270\111\312\113\272\115\273\120\307\001\002\000\004" +
    "\023\u0157\001\002\000\006\054\uffe9\121\uffe9\001\002\000" +
    "\006\054\uffec\121\uffec\001\002\000\004\054\uffdf\001\002" +
    "\000\004\002\000\001\002\000\014\015\263\051\026\053" +
    "\015\054\uffe2\121\023\001\002\000\010\023\u015f\025\035" +
    "\040\u015e\001\002\000\014\015\uffdd\051\uffdd\053\uffdd\054" +
    "\uffdd\121\uffdd\001\002\000\024\015\047\030\051\056\040" +
    "\057\042\060\050\061\044\062\052\076\041\100\043\001" +
    "\002\000\014\015\uffdb\051\uffdb\053\uffdb\054\uffdb\121\uffdb" +
    "\001\002\000\004\023\u0161\001\002\000\014\015\uffdc\051" +
    "\uffdc\053\uffdc\054\uffdc\121\uffdc\001\002\000\014\015\uffde" +
    "\051\uffde\053\uffde\054\uffde\121\uffde\001\002\000\004\054" +
    "\uffe1\001\002\000\010\015\ufff1\054\ufff1\121\ufff1\001\002" +
    "\000\010\024\uffc7\025\uffc7\040\u0170\001\002\000\006\024" +
    "\u016a\025\035\001\002\000\010\015\u0165\054\ufff5\121\023" +
    "\001\002\000\010\015\ufff2\054\ufff2\121\ufff2\001\002\000" +
    "\004\054\ufff4\001\002\000\024\015\047\030\051\056\040" +
    "\057\042\060\050\061\044\062\052\076\041\100\043\001" +
    "\002\000\006\023\u016d\040\u016c\001\002\000\054\006\071" +
    "\015\121\016\115\017\075\020\104\021\101\030\074\031" +
    "\072\032\102\033\114\046\100\066\103\067\113\070\110" +
    "\071\073\072\106\073\111\074\067\075\107\101\070\102" +
    "\076\001\002\000\010\015\uffef\054\uffef\121\uffef\001\002" +
    "\000\046\005\140\006\134\007\136\010\137\011\146\012" +
    "\133\013\142\023\u016f\034\143\035\135\036\141\037\132" +
    "\040\144\041\150\042\131\043\151\044\145\045\147\001" +
    "\002\000\010\015\ufff0\054\ufff0\121\ufff0\001\002\000\004" +
    "\021\u0171\001\002\000\004\015\263\001\002\000\006\022" +
    "\u0173\025\035\001\002\000\004\023\u0174\001\002\000\010" +
    "\015\uffee\054\uffee\121\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0172\000\006\002\004\004\003\001\001\000\020\011" +
    "\012\012\017\015\016\023\013\051\011\052\021\053\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\u0165\016" +
    "\u0166\017\u0163\001\001\000\010\006\u015b\013\u015c\014\u015a" +
    "\001\001\000\002\001\001\000\004\023\u0159\001\001\000" +
    "\002\001\001\000\004\053\u0157\001\001\000\002\001\001" +
    "\000\032\003\304\020\275\021\303\024\307\026\276\035" +
    "\266\036\277\041\270\045\274\046\305\047\310\050\312" +
    "\001\001\000\002\001\001\000\010\006\027\007\031\010" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\027\010\032\015\033\051\011\052" +
    "\021\053\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\036\027\044\033\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\060\027\044\033" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\063\027\044\033\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\076\030\111\031\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\232\001\001\000\004\003\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\123\032\173\001\001\000\006\003\123\032\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\171\001\001\000\004\003\170\001\001\000\004\003" +
    "\167\001\001\000\004\003\166\001\001\000\004\003\165" +
    "\001\001\000\004\003\164\001\001\000\004\003\163\001" +
    "\001\000\004\003\162\001\001\000\004\003\161\001\001" +
    "\000\002\001\001\000\004\003\157\001\001\000\004\003" +
    "\156\001\001\000\004\003\155\001\001\000\004\003\154" +
    "\001\001\000\004\003\153\001\001\000\004\003\152\001" +
    "\001\000\004\003\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\076\031\202\001\001\000\002\001\001\000" +
    "\010\005\201\027\044\033\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\204\001\001\000\002\001" +
    "\001\000\004\003\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\211\001\001\000\002\001\001\000" +
    "\004\003\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\224\001\001\000\002\001\001\000" +
    "\004\003\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\235\001\001\000\002\001\001" +
    "\000\004\003\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\255\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\u0120\001\001\000" +
    "\002\001\001\000\032\003\304\020\u011c\021\303\024\307" +
    "\026\276\035\266\036\277\041\270\045\274\046\305\047" +
    "\310\050\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\304\021\326\024\307\026" +
    "\276\035\266\036\277\041\270\045\274\046\305\047\310" +
    "\050\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\304\020\325\021\303" +
    "\024\307\026\276\035\266\036\277\041\270\045\274\046" +
    "\305\047\310\050\312\001\001\000\030\003\304\021\326" +
    "\024\307\026\276\035\266\036\277\041\270\045\274\046" +
    "\305\047\310\050\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\123\032\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\351\001\001" +
    "\000\002\001\001\000\004\003\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\304\022\360\024\363" +
    "\026\357\035\364\037\362\050\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\304" +
    "\020\372\021\303\024\307\026\276\035\266\036\277\041" +
    "\270\045\274\046\305\047\310\050\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\304\022\360\024\363" +
    "\026\357\035\364\036\371\037\370\050\356\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\304\021\326" +
    "\024\307\026\276\035\266\036\277\041\270\045\274\046" +
    "\305\047\310\050\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\u0100\025\u0101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\u0100\025\u010a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\u010f\001\001\000\002\001\001\000" +
    "\004\003\u0117\001\001\000\004\003\u0112\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\304\020\u0115\021" +
    "\303\024\307\026\276\035\266\036\277\041\270\045\274" +
    "\046\305\047\310\050\312\001\001\000\030\003\304\021" +
    "\326\024\307\026\276\035\266\036\277\041\270\045\274" +
    "\046\305\047\310\050\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\304\020\u011a" +
    "\021\303\024\307\026\276\035\266\036\277\041\270\045" +
    "\274\046\305\047\310\050\312\001\001\000\030\003\304" +
    "\021\326\024\307\026\276\035\266\036\277\041\270\045" +
    "\274\046\305\047\310\050\312\001\001\000\002\001\001" +
    "\000\030\003\304\021\326\024\307\026\276\035\266\036" +
    "\277\041\270\045\274\046\305\047\310\050\312\001\001" +
    "\000\004\003\u011e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\123\032\u0124\042\u0122" +
    "\043\u0123\001\001\000\012\003\123\032\u0124\043\u012a\044" +
    "\u0129\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\304\020\u0126\021\303\024\307\026\276\035\266\036" +
    "\277\041\270\045\274\046\305\047\310\050\312\001\001" +
    "\000\030\003\304\021\326\024\307\026\276\035\266\036" +
    "\277\041\270\045\274\046\305\047\310\050\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\304\020\u012d" +
    "\021\303\024\307\026\276\035\266\036\277\041\270\045" +
    "\274\046\305\047\310\050\312\001\001\000\030\003\304" +
    "\021\326\024\307\026\276\035\266\036\277\041\270\045" +
    "\274\046\305\047\310\050\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\u014c\027\044\033\045\001\001\000\010\006\u0136" +
    "\054\u0135\055\u0137\001\001\000\004\006\u0149\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\u0139\027\044\033\045\001\001\000\002\001\001\000" +
    "\006\006\u0136\055\u0148\001\001\000\002\001\001\000\010" +
    "\005\u013d\027\044\033\045\001\001\000\002\001\001\000" +
    "\012\015\u013f\051\011\052\021\053\024\001\001\000\002" +
    "\001\001\000\032\003\304\020\u0141\021\303\024\307\026" +
    "\276\035\266\036\277\041\270\045\274\046\305\047\310" +
    "\050\312\001\001\000\030\003\304\021\326\024\307\026" +
    "\276\035\266\036\277\041\270\045\274\046\305\047\310" +
    "\050\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\304\020\u0145\021\303\024\307\026\276\035\266" +
    "\036\277\041\270\045\274\046\305\047\310\050\312\001" +
    "\001\000\030\003\304\021\326\024\307\026\276\035\266" +
    "\036\277\041\270\045\274\046\305\047\310\050\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\u014b\027\044\033\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\u014e" +
    "\051\011\052\021\053\024\001\001\000\002\001\001\000" +
    "\032\003\304\020\u0150\021\303\024\307\026\276\035\266" +
    "\036\277\041\270\045\274\046\305\047\310\050\312\001" +
    "\001\000\030\003\304\021\326\024\307\026\276\035\266" +
    "\036\277\041\270\045\274\046\305\047\310\050\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\304" +
    "\020\u0154\021\303\024\307\026\276\035\266\036\277\041" +
    "\270\045\274\046\305\047\310\050\312\001\001\000\030" +
    "\003\304\021\326\024\307\026\276\035\266\036\277\041" +
    "\270\045\274\046\305\047\310\050\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\u015b\011\u0162\013\u0161" +
    "\015\016\051\011\052\021\053\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\u015f\027\044\033\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\u0165\017" +
    "\u0167\051\u0168\052\021\053\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\u016a\027\044\033\045\001" +
    "\001\000\002\001\001\000\004\003\u016d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static LinkedList<Instruccion> lista;

	

	public  void setLista(LinkedList<Instruccion> listaG){
		lista = listaG;
	}

	public  LinkedList<Instruccion> getLista(){
		return lista;
	}
	
	public static int cont=0;
	public void syntax_error(Symbol s){
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
	}

	 public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= insNombrePrograma insType cuerpoPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addAll(a); RESULT.addAll(b); setLista(RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= insNombrePrograma cuerpoPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addAll(a); setLista(RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // insNombrePrograma ::= PROGRAM ID PNTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insNombrePrograma",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // insConstantes ::= CONST listaDeclaracionConstantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insConstantes",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // insConstantes ::= CONST listaDeclaracionConstantes insVar 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insConstantes",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // insConstantes ::= insVar 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insConstantes",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listaDeclaracionConstantes ::= listaDeclaracionConstantes declaracionConstante 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionConstantes",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaDeclaracionConstantes ::= declaracionConstante 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addLast(a);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionConstantes",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionConstante ::= listaID DSPUNTOS tipoDato IGUAL expresion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(c,bleft,bright,true,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionConstante ::= listaID DSPUNTOS tipoDato PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(null,bleft,bright,true,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionConstante ::= ID IGUAL PARIZQ listaID PARDER PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Enumerador(a.toString(),b,aleft,aright,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // insVar ::= VAR listaDeclaracionVariables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insVar",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // insVar ::= VAR listaDeclaracionVariables insFunciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insVar",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // insVar ::= insFunciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insVar",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaDeclaracionVariables ::= listaDeclaracionVariables declaracionVariable 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVariables",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listaDeclaracionVariables ::= declaracionVariable 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addLast(a);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVariables",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionVariable ::= listaID DSPUNTOS tipoDato IGUAL expresion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(c,bleft,bright,false,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionVariable ::= listaID DSPUNTOS tipoDato PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(null,bleft,bright,false,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionVariable ::= ID IGUAL PARIZQ listaID PARDER PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Enumerador(a.toString(),b,aleft,aright,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // insFunciones ::= listaFunciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFunciones",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaFunciones ::= listaFunciones insFuncion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Funcion b = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaFunciones",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listaFunciones ::= insFuncion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaFunciones",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // insFuncion ::= FUNCTION ID PARIZQ listaParametros PARDER DSPUNTOS tipoDato PNTCOMA insVar BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		LinkedList<Parametro> b = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 d.addAll(e); RESULT = new Funcion(b,a.toString(),c,d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFuncion",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // insFuncion ::= FUNCTION ID DSPUNTOS tipoDato PNTCOMA insVar BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 c.addAll(d); RESULT = new Funcion(new LinkedList<>(),a.toString(),b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFuncion",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // insFuncion ::= FUNCTION ID PARIZQ listaParametros PARDER DSPUNTOS tipoDato PNTCOMA BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Parametro> b = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Funcion(b,a.toString(),c,d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFuncion",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // insFuncion ::= FUNCTION ID DSPUNTOS tipoDato PNTCOMA BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Funcion(new LinkedList<>(),a.toString(),b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFuncion",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listaParametros ::= listaParametros COMA parametro 
            {
              LinkedList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Parametro> a = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro b = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listaParametros ::= parametro 
            {
              LinkedList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro a = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametro ::= listaID DSPUNTOS tipoDato 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Parametro(a,false,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametro ::= VAR listaID DSPUNTOS tipoDato 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Parametro(a,true,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // insType ::= TYPE listaType 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // insType ::= TYPE listaType insConstantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // insType ::= insConstantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // insType ::= error PNTCOMA 
            {
              LinkedList<Instruccion> RESULT =null;
		 RESULT = new LinkedList<Instruccion>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listaType ::= listaType equivalencia 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		TypeDeclaration b = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaType",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listaType ::= equivalencia 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		TypeDeclaration a = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaType",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // equivalencia ::= listaID IGUAL tipoDato PNTCOMA 
            {
              TypeDeclaration RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new TypeDeclaration(a,aleft,aright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencia",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // equivalencia ::= listaID PNTCOMA 
            {
              TypeDeclaration RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new TypeDeclaration(a,aleft,aright,null); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencia",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipoDato ::= INTEGER 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.INT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipoDato ::= BOOLEAN 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.BOOLEAN); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipoDato ::= REAL 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.DOUBLE); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoDato ::= CHAR 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.CHAR); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipoDato ::= WORD 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.WORD); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipoDato ::= STRING 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.STRING); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoDato ::= ID 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.ID); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoDato ::= insArray 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoDato ::= insRegistro 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // insArray ::= ARRAY LLAVEIZQ dimensionList LLAVEDER OF tipoDato 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Dimension> a = (LinkedList<Dimension>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

				if(b.getTipo() == Tipo.ARRAY){
					Arreglo temp = (Arreglo)b.getValor();
					LinkedList<Dimension> lista = temp.getDimensiones();
					a.addAll(lista);
					
					Type type = new Type(Tipo.ARRAY,b.getTipoArray());
					type.setValor(new Arreglo(a,aleft,aright,b.getTipoArray())); 
					RESULT = type;
				}
				else {
					Type type = new Type(Tipo.ARRAY,b.getTipo());
					type.setValor(new Arreglo(a,aleft,aright,b.getTipo())); 
					RESULT = type;
				}

			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insArray",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dimensionList ::= dimensionList COMA dimension 
            {
              LinkedList<Dimension> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Dimension> a = (LinkedList<Dimension>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Dimension b = (Dimension)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensionList",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dimensionList ::= dimension 
            {
              LinkedList<Dimension> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Dimension a = (Dimension)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a);	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensionList",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dimension ::= expresion PNT PNT expresion 
            {
              Dimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Dimension(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dimension ::= ID 
            {
              Dimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Dimension(a.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // insRegistro ::= RECORD listaAtributos END PNTCOMA 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Type("",Tipo.REGISTRO); RESULT.setValor(new Registro(a,aleft,aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insRegistro",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listaAtributos ::= listaAtributos ID DSPUNTOS tipoDato PNTCOMA 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; RESULT.addLast(new Atributo(b.toString(),c)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAtributos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listaAtributos ::= ID DSPUNTOS tipoDato PNTCOMA 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(new Atributo(a.toString(),b)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAtributos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // insFree ::= FREE PARIZQ ID PARDER 
            {
              Free RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Free(a.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFree",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listaID ::= listaID COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b.toString().toLowerCase()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaID",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // listaID ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<String>(); RESULT.addLast(a.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaID",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.SUMA,aleft,aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.RESTA,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MULTIPLICACION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresion DIVIDIDO expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.DIVISION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion MODULO expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MODULO,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion POTENCIA expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.POTENCIA,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MAYOR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MENOR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MAYORIGUAL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion MENORIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MENORIGUAL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.IGUAL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion DIFERENTE expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.DIFERENTE,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.AND,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.OR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion NAND expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.NAND,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion NOR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.NOR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,null,Operacion.NOT,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,null,Operacion.NEGATIVO,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= ID LLAVEIZQ listaAcceso LLAVEDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(Operacion.ACCESOARRAY,aleft,aright,a.toString(),b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= ID PARIZQ listaAcceso PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(Operacion.LLAMADA,aleft,aright,a.toString(),b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= ID PARIZQ PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Expresion(Operacion.LLAMADA,aleft,aright,a.toString(),new LinkedList<>()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= SIZEOF PARIZQ ID PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(Operacion.SIZEOF,aleft,aright,a.toString(),null); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= MALLOC PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.MALLOC,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= LENGTH PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.LENGTH,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= TOLOWERCASE PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TOLOWERCASE,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= TOUPPERCASE PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TOUPPERCASE,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= TRUNK PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TRUNK,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= ROUND PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.ROUND,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= REPLACE PARIZQ expresion COMA expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,b,Operacion.REPLACE,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= EQUALS PARIZQ expresion COMA expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,b,Operacion.EQUALS,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.INT,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= DECIMAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.DOUBLE,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= CHAR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.CHAR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= CADENA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.STRING,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= TRUE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= FALSE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.ID,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= NIL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.NULL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= CHARAT PARIZQ expresion COMA expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,b,Operacion.CHARAT,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= expresion PNT ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,null,Operacion.ACCESOID,aleft,aright,b.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // cuerpoPrincipal ::= BEGIN instruccionesPrincipal END PNT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoPrincipal",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // cuerpoPrincipal ::= BEGIN END PNT 
            {
              LinkedList<Instruccion> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoPrincipal",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // instruccionesPrincipal ::= instruccionesPrincipal instruccionPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesPrincipal",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // instruccionesPrincipal ::= instruccionPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesPrincipal",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // instruccionPrincipal ::= insWrite PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Writeln a = (Writeln)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // instruccionPrincipal ::= insAsignacion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // instruccionPrincipal ::= ifSuperior 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		IfSuperior a = (IfSuperior)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // instruccionPrincipal ::= insSwitch PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		SWITCH a = (SWITCH)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // instruccionPrincipal ::= insWhile PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		WHILE a = (WHILE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // instruccionPrincipal ::= insRepeat PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		REPEAT a = (REPEAT)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // instruccionPrincipal ::= insFor PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		FOR a = (FOR)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // instruccionPrincipal ::= insRead PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Read a = (Read)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // instruccionPrincipal ::= insFree PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Free a = (Free)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // instruccionOneLine ::= insWrite PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Writeln a = (Writeln)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // instruccionOneLine ::= insAsignacion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // instruccionOneLine ::= insRead PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Read a = (Read)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // instruccionOneLine ::= insFree PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Free a = (Free)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // insWrite ::= WRITELN PARIZQ listaExpresiones PARDER 
            {
              Writeln RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Writeln(a,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insWrite",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // insWrite ::= WRITE PARIZQ listaExpresiones PARDER 
            {
              Writeln RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Writeln(a,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insWrite",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // listaExpresiones ::= listaExpresiones COMA expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.SUMA,aleft,aright);	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaExpresiones",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // listaExpresiones ::= expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaExpresiones",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // insAsignacion ::= ID DSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a.toString(),b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insAsignacion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // insAsignacion ::= ID LLAVEIZQ listaAcceso LLAVEDER DSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoArreglo(a.toString(),c,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insAsignacion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // insAsignacion ::= expresion PNT ID DSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoRegistro(a,c,b.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insAsignacion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // listaAcceso ::= listaAcceso COMA expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAcceso",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // listaAcceso ::= expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAcceso",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ifSuperior ::= IF expresion THEN insIf 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(new IF(a,aleft,aright,b)); RESULT = new IfSuperior(lista,aleft,aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ifSuperior ::= IF expresion THEN insIf ELSE insIf 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(new IF(a,aleft,aright,b)); lista.addLast(new IF(null,bleft,bright,c));  RESULT = new IfSuperior(lista,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ifSuperior ::= IF expresion THEN insIf ELSE ifSuperior 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		IfSuperior c = (IfSuperior)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(new IF(a,aleft,aright,b)); lista.addAll(c.getListado()); RESULT = new IfSuperior(lista,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // insIf ::= BEGIN instruccionesPrincipal END PNTCOMA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new LinkedList<>(); RESULT.addAll(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insIf",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // insIf ::= instruccionOneLine 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insIf",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // insSwitch ::= CASE expresion OF listaCase insDefault END 
            {
              SWITCH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<CASE> b = (LinkedList<CASE>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		CASE c = (CASE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 b.addLast(c); RESULT = new SWITCH(b,aleft,aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insSwitch",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // insSwitch ::= CASE expresion OF listaCase END 
            {
              SWITCH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<CASE> b = (LinkedList<CASE>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SWITCH(b,aleft,aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insSwitch",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // listaCase ::= listaCase insCase 
            {
              LinkedList<CASE> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<CASE> a = (LinkedList<CASE>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		CASE b = (CASE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaCase",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // listaCase ::= insCase 
            {
              LinkedList<CASE> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		CASE a = (CASE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaCase",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // insCase ::= listaAcceso DSPUNTOS instruccionesPrincipal PNTCOMA 
            {
              CASE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new CASE(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insCase",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // insDefault ::= DEFAULT DSPUNTOS instruccionesPrincipal PNTCOMA 
            {
              CASE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new CASE(null,a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insDefault",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // insWhile ::= WHILE expresion DO BEGIN instruccionesPrincipal END 
            {
              WHILE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new WHILE(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insWhile",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // insRepeat ::= REPEAT instruccionesPrincipal UNTIL expresion 
            {
              REPEAT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new REPEAT(b,a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insRepeat",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // insFor ::= FOR ID DSPUNTOS IGUAL expresion TO expresion DO BEGIN instruccionesPrincipal END 
            {
              FOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new FOR(a.toString(),b,c,d,aleft,aright,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFor",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // insFor ::= FOR ID DSPUNTOS IGUAL expresion DOWNTO expresion DO BEGIN instruccionesPrincipal END 
            {
              FOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new FOR(a.toString(),b,c,d,aleft,aright,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFor",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // insRead ::= READ PARIZQ ID PARDER 
            {
              Read RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Read(a.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insRead",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
