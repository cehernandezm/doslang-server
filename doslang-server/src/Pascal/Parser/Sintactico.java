
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Pascal.Parser;

import java_cup.runtime.*;
import Pascal.Analisis.*;
import Pascal.Analisis.TipoDato.*;
import Pascal.Componentes.*;
import Pascal.Componentes.UserTypes.*;
import Pascal.Componentes.Arreglos.*;
import Pascal.Componentes.Registros.*;
import Pascal.Componentes.SentenciaIf.*;
import Pascal.Componentes.Funciones.*;
import java.util.LinkedList;
import Pascal.Componentes.SentenciaSwitch.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\004\005\000\002\011\004\000\002\011\005" +
    "\000\002\011\003\000\002\007\004\000\002\007\003\000" +
    "\002\010\010\000\002\010\006\000\002\010\010\000\002" +
    "\015\004\000\002\015\005\000\002\015\003\000\002\016" +
    "\004\000\002\016\003\000\002\017\010\000\002\017\006" +
    "\000\002\017\010\000\002\051\003\000\002\052\004\000" +
    "\002\052\004\000\002\052\003\000\002\052\003\000\002" +
    "\053\017\000\002\053\014\000\002\053\016\000\002\053" +
    "\013\000\002\056\015\000\002\056\012\000\002\056\014" +
    "\000\002\056\011\000\002\054\005\000\002\054\003\000" +
    "\002\055\005\000\002\055\006\000\002\012\004\000\002" +
    "\012\005\000\002\012\003\000\002\012\004\000\002\014" +
    "\004\000\002\014\003\000\002\013\006\000\002\013\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\027" +
    "\010\000\002\030\005\000\002\030\003\000\002\031\006" +
    "\000\002\031\003\000\002\033\005\000\002\034\007\000" +
    "\002\034\006\000\002\035\006\000\002\006\005\000\002" +
    "\006\003\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\006" +
    "\000\002\003\005\000\002\003\003\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\003" +
    "\010\000\002\003\010\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\010\000\002\003\005\000\002\057\006\000\002\057" +
    "\005\000\002\023\006\000\002\023\005\000\002\020\004" +
    "\000\002\020\003\000\002\021\004\000\002\021\004\000" +
    "\002\021\003\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\021\004\000\002\021\004" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\024\006\000\002\024\006\000\002\025" +
    "\005\000\002\025\003\000\002\026\006\000\002\026\011" +
    "\000\002\026\010\000\002\032\005\000\002\032\003\000" +
    "\002\036\006\000\002\036\010\000\002\036\010\000\002" +
    "\037\006\000\002\037\003\000\002\041\010\000\002\041" +
    "\007\000\002\042\004\000\002\042\003\000\002\043\005" +
    "\000\002\044\005\000\002\045\010\000\002\046\006\000" +
    "\002\047\015\000\002\047\015\000\002\050\006\000\002" +
    "\060\003\000\002\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0199\000\004\050\006\001\002\000\020\003\022\051" +
    "\030\052\017\053\016\054\026\121\025\122\014\001\002" +
    "\000\004\002\011\001\002\000\004\015\007\001\002\000" +
    "\004\023\010\001\002\000\020\003\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\121\ufffe\122\ufffe\001\002\000\004\002" +
    "\001\001\002\000\004\054\uffda\001\002\000\004\054\ufff3" +
    "\001\002\000\004\015\u0184\001\002\000\004\002\uffff\001" +
    "\002\000\004\015\u0174\001\002\000\004\015\265\001\002" +
    "\000\004\054\ufffb\001\002\000\004\054\026\001\002\000" +
    "\004\023\u0168\001\002\000\010\054\uffe9\121\uffe9\122\uffe9" +
    "\001\002\000\010\054\uffed\121\025\122\014\001\002\000" +
    "\004\015\u0140\001\002\000\104\006\071\015\311\016\117" +
    "\017\076\020\106\021\103\030\075\031\073\032\104\033" +
    "\116\046\102\055\323\064\307\065\301\066\105\067\115" +
    "\070\112\071\074\072\110\073\113\074\070\075\111\101" +
    "\072\102\077\103\324\104\310\107\273\111\321\113\276" +
    "\115\300\120\316\123\314\124\275\001\002\000\010\054" +
    "\uffea\121\uffea\122\uffea\001\002\000\004\015\031\001\002" +
    "\000\010\024\uffc1\025\uffc1\040\263\001\002\000\006\024" +
    "\040\025\037\001\002\000\014\015\ufff9\053\ufff9\054\ufff9" +
    "\121\ufff9\122\ufff9\001\002\000\014\015\031\053\016\054" +
    "\ufffd\121\025\122\014\001\002\000\014\015\ufffa\053\ufffa" +
    "\054\ufffa\121\ufffa\122\ufffa\001\002\000\004\054\ufffc\001" +
    "\002\000\004\015\262\001\002\000\024\015\051\030\054" +
    "\056\042\057\044\060\052\061\046\062\053\076\043\100" +
    "\045\001\002\000\006\023\257\040\256\001\002\000\012" +
    "\022\uffd4\023\uffd4\025\uffd4\040\uffd4\001\002\000\004\026" +
    "\067\001\002\000\012\022\uffd3\023\uffd3\025\uffd3\040\uffd3" +
    "\001\002\000\004\015\055\001\002\000\012\022\uffcf\023" +
    "\uffcf\025\uffcf\040\uffcf\001\002\000\012\022\uffcd\023\uffcd" +
    "\025\uffcd\040\uffcd\001\002\000\012\022\uffcc\023\uffcc\025" +
    "\uffcc\040\uffcc\001\002\000\012\022\uffce\023\uffce\025\uffce" +
    "\040\uffce\001\002\000\012\022\uffd2\023\uffd2\025\uffd2\040" +
    "\uffd2\001\002\000\012\022\uffd0\023\uffd0\025\uffd0\040\uffd0" +
    "\001\002\000\012\022\uffd1\023\uffd1\025\uffd1\040\uffd1\001" +
    "\002\000\004\024\064\001\002\000\006\015\057\055\060" +
    "\001\002\000\004\024\061\001\002\000\012\022\uffc6\023" +
    "\uffc6\025\uffc6\040\uffc6\001\002\000\024\015\051\030\054" +
    "\056\042\057\044\060\052\061\046\062\053\076\043\100" +
    "\045\001\002\000\004\023\063\001\002\000\006\015\uffc5" +
    "\055\uffc5\001\002\000\024\015\051\030\054\056\042\057" +
    "\044\060\052\061\046\062\053\076\043\100\045\001\002" +
    "\000\004\023\066\001\002\000\006\015\uffc4\055\uffc4\001" +
    "\002\000\054\006\071\015\107\016\117\017\076\020\106" +
    "\021\103\030\075\031\073\032\104\033\116\046\102\066" +
    "\105\067\115\070\112\071\074\072\110\073\113\074\070" +
    "\075\111\101\072\102\077\001\002\000\004\021\253\001" +
    "\002\000\054\006\071\015\123\016\117\017\076\020\106" +
    "\021\103\030\075\031\073\032\104\033\116\046\102\066" +
    "\105\067\115\070\112\071\074\072\110\073\113\074\070" +
    "\075\111\101\072\102\077\001\002\000\004\021\247\001" +
    "\002\000\072\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026" +
    "\uff9f\027\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\077\uff9f\105" +
    "\uff9f\112\uff9f\116\uff9f\117\uff9f\001\002\000\004\021\244" +
    "\001\002\000\072\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\012\uffa0\013\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\077\uffa0" +
    "\105\uffa0\112\uffa0\116\uffa0\117\uffa0\001\002\000\072\005" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1" +
    "\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\034" +
    "\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\077\uffa1\105\uffa1\112\uffa1\116" +
    "\uffa1\117\uffa1\001\002\000\004\021\241\001\002\000\072" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\077\uffac\105\uffac\112\uffac" +
    "\116\uffac\117\uffac\001\002\000\046\005\154\006\134\007" +
    "\146\010\142\011\145\012\143\013\236\026\147\034\150" +
    "\035\136\036\153\037\141\040\140\041\151\042\135\043" +
    "\137\044\152\045\144\001\002\000\054\006\071\015\123" +
    "\016\117\017\076\020\106\021\103\030\075\031\073\032" +
    "\104\033\116\046\102\066\105\067\115\070\112\071\074" +
    "\072\110\073\113\074\070\075\111\101\072\102\077\001" +
    "\002\000\054\006\071\015\123\016\117\017\076\020\106" +
    "\021\103\030\075\031\073\032\104\033\116\046\102\066" +
    "\105\067\115\070\112\071\074\072\110\073\113\074\070" +
    "\075\111\101\072\102\077\001\002\000\072\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\077\uff9e\105\uff9e\112\uff9e\116\uff9e\117" +
    "\uff9e\001\002\000\004\021\226\001\002\000\072\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\022" +
    "\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043" +
    "\uff9b\044\uff9b\045\uff9b\077\uff9b\105\uff9b\112\uff9b\116\uff9b" +
    "\117\uff9b\001\002\000\054\005\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\011\uff9c\012\uff9c\013\uff9c\021\124\025\uffc7\026\uff9c" +
    "\027\uffc7\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\001\002\000\004" +
    "\021\223\001\002\000\004\021\220\001\002\000\004\021" +
    "\213\001\002\000\004\021\206\001\002\000\006\025\201" +
    "\027\202\001\002\000\004\021\121\001\002\000\072\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\077\uff9d\105\uff9d\112\uff9d\116" +
    "\uff9d\117\uff9d\001\002\000\072\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\013\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\077\uffa2\105\uffa2\112\uffa2\116\uffa2\117\uffa2\001\002" +
    "\000\006\025\uffc9\027\uffc9\001\002\000\054\006\071\015" +
    "\123\016\117\017\076\020\106\021\103\030\075\031\073" +
    "\032\104\033\116\046\102\066\105\067\115\070\112\071" +
    "\074\072\110\073\113\074\070\075\111\101\072\102\077" +
    "\001\002\000\050\005\154\006\134\007\146\010\142\011" +
    "\145\012\143\013\133\022\200\026\147\034\150\035\136" +
    "\036\153\037\141\040\140\041\151\042\135\043\137\044" +
    "\152\045\144\001\002\000\074\005\uff9c\006\uff9c\007\uff9c" +
    "\010\uff9c\011\uff9c\012\uff9c\013\uff9c\021\124\022\uff9c\023" +
    "\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\034\uff9c\035\uff9c" +
    "\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\077\uff9c\105\uff9c\112\uff9c\116\uff9c\117\uff9c" +
    "\001\002\000\056\006\071\015\123\016\117\017\076\020" +
    "\106\021\103\022\126\030\075\031\073\032\104\033\116" +
    "\046\102\066\105\067\115\070\112\071\074\072\110\073" +
    "\113\074\070\075\111\101\072\102\077\001\002\000\056" +
    "\005\154\006\134\007\146\010\142\011\145\012\143\013" +
    "\133\022\uff77\024\uff77\025\uff77\026\147\027\uff77\034\150" +
    "\035\136\036\153\037\141\040\140\041\151\042\135\043" +
    "\137\044\152\045\144\001\002\000\072\005\uff97\006\uff97" +
    "\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\034\uff97\035\uff97" +
    "\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044" +
    "\uff97\045\uff97\077\uff97\105\uff97\112\uff97\116\uff97\117\uff97" +
    "\001\002\000\006\022\131\025\130\001\002\000\054\006" +
    "\071\015\123\016\117\017\076\020\106\021\103\030\075" +
    "\031\073\032\104\033\116\046\102\066\105\067\115\070" +
    "\112\071\074\072\110\073\113\074\070\075\111\101\072" +
    "\102\077\001\002\000\072\005\uff98\006\uff98\007\uff98\010" +
    "\uff98\011\uff98\012\uff98\013\uff98\022\uff98\023\uff98\024\uff98" +
    "\025\uff98\026\uff98\027\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98" +
    "\077\uff98\105\uff98\112\uff98\116\uff98\117\uff98\001\002\000" +
    "\056\005\154\006\134\007\146\010\142\011\145\012\143" +
    "\013\133\022\uff78\024\uff78\025\uff78\026\147\027\uff78\034" +
    "\150\035\136\036\153\037\141\040\140\041\151\042\135" +
    "\043\137\044\152\045\144\001\002\000\004\015\177\001" +
    "\002\000\054\006\071\015\123\016\117\017\076\020\106" +
    "\021\103\030\075\031\073\032\104\033\116\046\102\066" +
    "\105\067\115\070\112\071\074\072\110\073\113\074\070" +
    "\075\111\101\072\102\077\001\002\000\054\006\071\015" +
    "\123\016\117\017\076\020\106\021\103\030\075\031\073" +
    "\032\104\033\116\046\102\066\105\067\115\070\112\071" +
    "\074\072\110\073\113\074\070\075\111\101\072\102\077" +
    "\001\002\000\054\006\071\015\123\016\117\017\076\020" +
    "\106\021\103\030\075\031\073\032\104\033\116\046\102" +
    "\066\105\067\115\070\112\071\074\072\110\073\113\074" +
    "\070\075\111\101\072\102\077\001\002\000\054\006\071" +
    "\015\123\016\117\017\076\020\106\021\103\030\075\031" +
    "\073\032\104\033\116\046\102\066\105\067\115\070\112" +
    "\071\074\072\110\073\113\074\070\075\111\101\072\102" +
    "\077\001\002\000\054\006\071\015\123\016\117\017\076" +
    "\020\106\021\103\030\075\031\073\032\104\033\116\046" +
    "\102\066\105\067\115\070\112\071\074\072\110\073\113" +
    "\074\070\075\111\101\072\102\077\001\002\000\054\006" +
    "\071\015\123\016\117\017\076\020\106\021\103\030\075" +
    "\031\073\032\104\033\116\046\102\066\105\067\115\070" +
    "\112\071\074\072\110\073\113\074\070\075\111\101\072" +
    "\102\077\001\002\000\054\006\071\015\123\016\117\017" +
    "\076\020\106\021\103\030\075\031\073\032\104\033\116" +
    "\046\102\066\105\067\115\070\112\071\074\072\110\073" +
    "\113\074\070\075\111\101\072\102\077\001\002\000\054" +
    "\006\071\015\123\016\117\017\076\020\106\021\103\030" +
    "\075\031\073\032\104\033\116\046\102\066\105\067\115" +
    "\070\112\071\074\072\110\073\113\074\070\075\111\101" +
    "\072\102\077\001\002\000\054\006\071\015\123\016\117" +
    "\017\076\020\106\021\103\030\075\031\073\032\104\033" +
    "\116\046\102\066\105\067\115\070\112\071\074\072\110" +
    "\073\113\074\070\075\111\101\072\102\077\001\002\000" +
    "\054\006\071\015\123\016\117\017\076\020\106\021\103" +
    "\030\075\031\073\032\104\033\116\046\102\066\105\067" +
    "\115\070\112\071\074\072\110\073\113\074\070\075\111" +
    "\101\072\102\077\001\002\000\054\006\071\015\123\016" +
    "\117\017\076\020\106\021\103\030\075\031\073\032\104" +
    "\033\116\046\102\066\105\067\115\070\112\071\074\072" +
    "\110\073\113\074\070\075\111\101\072\102\077\001\002" +
    "\000\054\006\071\015\123\016\117\017\076\020\106\021" +
    "\103\030\075\031\073\032\104\033\116\046\102\066\105" +
    "\067\115\070\112\071\074\072\110\073\113\074\070\075" +
    "\111\101\072\102\077\001\002\000\054\006\071\015\123" +
    "\016\117\017\076\020\106\021\103\030\075\031\073\032" +
    "\104\033\116\046\102\066\105\067\115\070\112\071\074" +
    "\072\110\073\113\074\070\075\111\101\072\102\077\001" +
    "\002\000\054\006\071\015\123\016\117\017\076\020\106" +
    "\021\103\030\075\031\073\032\104\033\116\046\102\066" +
    "\105\067\115\070\112\071\074\072\110\073\113\074\070" +
    "\075\111\101\072\102\077\001\002\000\054\006\071\015" +
    "\123\016\117\017\076\020\106\021\103\030\075\031\073" +
    "\032\104\033\116\046\102\066\105\067\115\070\112\071" +
    "\074\072\110\073\113\074\070\075\111\101\072\102\077" +
    "\001\002\000\054\006\071\015\123\016\117\017\076\020" +
    "\106\021\103\030\075\031\073\032\104\033\116\046\102" +
    "\066\105\067\115\070\112\071\074\072\110\073\113\074" +
    "\070\075\111\101\072\102\077\001\002\000\054\006\071" +
    "\015\123\016\117\017\076\020\106\021\103\030\075\031" +
    "\073\032\104\033\116\046\102\066\105\067\115\070\112" +
    "\071\074\072\110\073\113\074\070\075\111\101\072\102" +
    "\077\001\002\000\072\005\uffc0\006\uffc0\007\146\010\142" +
    "\011\145\012\143\013\133\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\147\027\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\077" +
    "\uffc0\105\uffc0\112\uffc0\116\uffc0\117\uffc0\001\002\000\072" +
    "\005\154\006\134\007\146\010\142\011\145\012\143\013" +
    "\133\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\147\027\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\077\uffb8\105\uffb8\112\uffb8" +
    "\116\uffb8\117\uffb8\001\002\000\072\005\154\006\134\007" +
    "\146\010\142\011\145\012\143\013\133\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\147\027\uffb2\034\150\035\136\036" +
    "\153\037\141\040\140\041\151\042\135\043\uffb2\044\uffb2" +
    "\045\uffb2\077\uffb2\105\uffb2\112\uffb2\116\uffb2\117\uffb2\001" +
    "\002\000\072\005\154\006\134\007\146\010\142\011\145" +
    "\012\143\013\133\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\147\027\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\077\uffb5\105" +
    "\uffb5\112\uffb5\116\uffb5\117\uffb5\001\002\000\072\005\154" +
    "\006\134\007\146\010\142\011\145\012\143\013\133\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\147\027\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\045\uffba\077\uffba\105\uffba\112\uffba\116\uffba" +
    "\117\uffba\001\002\000\006\025\130\027\163\001\002\000" +
    "\072\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\013\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027" +
    "\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\077\uffae\105\uffae\112" +
    "\uffae\116\uffae\117\uffae\001\002\000\072\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\143\013\133\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\147\027\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\077\uffbe\105\uffbe\112\uffbe\116\uffbe\117\uffbe" +
    "\001\002\000\072\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\143\013\133\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\147\027\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\077\uffbc" +
    "\105\uffbc\112\uffbc\116\uffbc\117\uffbc\001\002\000\072\005" +
    "\154\006\134\007\146\010\142\011\145\012\143\013\133" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\147\027\uffb1\034" +
    "\150\035\136\036\153\037\141\040\140\041\151\042\135" +
    "\043\uffb1\044\uffb1\045\uffb1\077\uffb1\105\uffb1\112\uffb1\116" +
    "\uffb1\117\uffb1\001\002\000\072\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\013\133\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\147\027\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\077\uffbb\105\uffbb\112\uffbb\116\uffbb\117\uffbb\001\002" +
    "\000\072\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012" +
    "\143\013\133\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\147" +
    "\027\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\077\uffbd\105\uffbd" +
    "\112\uffbd\116\uffbd\117\uffbd\001\002\000\072\005\154\006" +
    "\134\007\146\010\142\011\145\012\143\013\133\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\147\027\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7" +
    "\044\uffb7\045\uffb7\077\uffb7\105\uffb7\112\uffb7\116\uffb7\117" +
    "\uffb7\001\002\000\072\005\154\006\134\007\146\010\142" +
    "\011\145\012\143\013\133\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\147\027\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\077" +
    "\uffb6\105\uffb6\112\uffb6\116\uffb6\117\uffb6\001\002\000\072" +
    "\005\154\006\134\007\146\010\142\011\145\012\143\013" +
    "\133\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\147\027\uffb3" +
    "\034\150\035\136\036\153\037\141\040\140\041\151\042" +
    "\135\043\uffb3\044\152\045\144\077\uffb3\105\uffb3\112\uffb3" +
    "\116\uffb3\117\uffb3\001\002\000\072\005\154\006\134\007" +
    "\146\010\142\011\145\012\143\013\133\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\147\027\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\077\uffb9\105\uffb9\112\uffb9\116\uffb9\117\uffb9\001" +
    "\002\000\072\005\154\006\134\007\146\010\142\011\145" +
    "\012\143\013\133\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\147\027\uffb4\034\150\035\136\036\153\037\141\040\140" +
    "\041\151\042\uffb4\043\uffb4\044\uffb4\045\uffb4\077\uffb4\105" +
    "\uffb4\112\uffb4\116\uffb4\117\uffb4\001\002\000\072\005\uffbf" +
    "\006\uffbf\007\146\010\142\011\145\012\143\013\133\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\147\027\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\077\uffbf\105\uffbf\112\uffbf\116\uffbf" +
    "\117\uffbf\001\002\000\072\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\uff99\013\uff99\022\uff99\023\uff99\024\uff99" +
    "\025\uff99\026\uff99\027\uff99\034\uff99\035\uff99\036\uff99\037" +
    "\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99" +
    "\077\uff99\105\uff99\112\uff99\116\uff99\117\uff99\001\002\000" +
    "\072\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9" +
    "\013\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027" +
    "\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\077\uffa9\105\uffa9\112" +
    "\uffa9\116\uffa9\117\uffa9\001\002\000\054\006\071\015\107" +
    "\016\117\017\076\020\106\021\103\030\075\031\073\032" +
    "\104\033\116\046\102\066\105\067\115\070\112\071\074" +
    "\072\110\073\113\074\070\075\111\101\072\102\077\001" +
    "\002\000\004\077\203\001\002\000\024\015\051\030\054" +
    "\056\042\057\044\060\052\061\046\062\053\076\043\100" +
    "\045\001\002\000\012\022\uffcb\023\uffcb\025\uffcb\040\uffcb" +
    "\001\002\000\006\025\uffca\027\uffca\001\002\000\054\006" +
    "\071\015\123\016\117\017\076\020\106\021\103\030\075" +
    "\031\073\032\104\033\116\046\102\066\105\067\115\070" +
    "\112\071\074\072\110\073\113\074\070\075\111\101\072" +
    "\102\077\001\002\000\050\005\154\006\134\007\146\010" +
    "\142\011\145\012\143\013\133\025\210\026\147\034\150" +
    "\035\136\036\153\037\141\040\140\041\151\042\135\043" +
    "\137\044\152\045\144\001\002\000\054\006\071\015\123" +
    "\016\117\017\076\020\106\021\103\030\075\031\073\032" +
    "\104\033\116\046\102\066\105\067\115\070\112\071\074" +
    "\072\110\073\113\074\070\075\111\101\072\102\077\001" +
    "\002\000\050\005\154\006\134\007\146\010\142\011\145" +
    "\012\143\013\133\022\212\026\147\034\150\035\136\036" +
    "\153\037\141\040\140\041\151\042\135\043\137\044\152" +
    "\045\144\001\002\000\072\005\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\011\uffa3\012\uffa3\013\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\025\uffa3\026\uffa3\027\uffa3\034\uffa3\035\uffa3\036\uffa3\037" +
    "\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3" +
    "\077\uffa3\105\uffa3\112\uffa3\116\uffa3\117\uffa3\001\002\000" +
    "\054\006\071\015\123\016\117\017\076\020\106\021\103" +
    "\030\075\031\073\032\104\033\116\046\102\066\105\067" +
    "\115\070\112\071\074\072\110\073\113\074\070\075\111" +
    "\101\072\102\077\001\002\000\050\005\154\006\134\007" +
    "\146\010\142\011\145\012\143\013\133\025\215\026\147" +
    "\034\150\035\136\036\153\037\141\040\140\041\151\042" +
    "\135\043\137\044\152\045\144\001\002\000\054\006\071" +
    "\015\123\016\117\017\076\020\106\021\103\030\075\031" +
    "\073\032\104\033\116\046\102\066\105\067\115\070\112" +
    "\071\074\072\110\073\113\074\070\075\111\101\072\102" +
    "\077\001\002\000\050\005\154\006\134\007\146\010\142" +
    "\011\145\012\143\013\133\022\217\026\147\034\150\035" +
    "\136\036\153\037\141\040\140\041\151\042\135\043\137" +
    "\044\152\045\144\001\002\000\072\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\022\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\077\uffa4\105\uffa4\112\uffa4\116\uffa4\117\uffa4\001" +
    "\002\000\054\006\071\015\123\016\117\017\076\020\106" +
    "\021\103\030\075\031\073\032\104\033\116\046\102\066" +
    "\105\067\115\070\112\071\074\072\110\073\113\074\070" +
    "\075\111\101\072\102\077\001\002\000\050\005\154\006" +
    "\134\007\146\010\142\011\145\012\143\013\133\022\222" +
    "\026\147\034\150\035\136\036\153\037\141\040\140\041" +
    "\151\042\135\043\137\044\152\045\144\001\002\000\072" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\077\uffa5\105\uffa5\112\uffa5" +
    "\116\uffa5\117\uffa5\001\002\000\054\006\071\015\123\016" +
    "\117\017\076\020\106\021\103\030\075\031\073\032\104" +
    "\033\116\046\102\066\105\067\115\070\112\071\074\072" +
    "\110\073\113\074\070\075\111\101\072\102\077\001\002" +
    "\000\050\005\154\006\134\007\146\010\142\011\145\012" +
    "\143\013\133\022\225\026\147\034\150\035\136\036\153" +
    "\037\141\040\140\041\151\042\135\043\137\044\152\045" +
    "\144\001\002\000\072\005\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\022\uffa7\023\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\077" +
    "\uffa7\105\uffa7\112\uffa7\116\uffa7\117\uffa7\001\002\000\054" +
    "\006\071\015\123\016\117\017\076\020\106\021\103\030" +
    "\075\031\073\032\104\033\116\046\102\066\105\067\115" +
    "\070\112\071\074\072\110\073\113\074\070\075\111\101" +
    "\072\102\077\001\002\000\050\005\154\006\134\007\146" +
    "\010\142\011\145\012\143\013\133\025\230\026\147\034" +
    "\150\035\136\036\153\037\141\040\140\041\151\042\135" +
    "\043\137\044\152\045\144\001\002\000\054\006\071\015" +
    "\123\016\117\017\076\020\106\021\103\030\075\031\073" +
    "\032\104\033\116\046\102\066\105\067\115\070\112\071" +
    "\074\072\110\073\113\074\070\075\111\101\072\102\077" +
    "\001\002\000\050\005\154\006\134\007\146\010\142\011" +
    "\145\012\143\013\133\022\232\026\147\034\150\035\136" +
    "\036\153\037\141\040\140\041\151\042\135\043\137\044" +
    "\152\045\144\001\002\000\072\005\uff9a\006\uff9a\007\uff9a" +
    "\010\uff9a\011\uff9a\012\uff9a\013\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\077\uff9a\105\uff9a\112\uff9a\116\uff9a\117\uff9a\001\002" +
    "\000\050\005\154\006\134\007\146\010\142\011\145\012" +
    "\143\013\133\022\234\026\147\034\150\035\136\036\153" +
    "\037\141\040\140\041\151\042\135\043\137\044\152\045" +
    "\144\001\002\000\072\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\034\uffad\035\uffad\036\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\077" +
    "\uffad\105\uffad\112\uffad\116\uffad\117\uffad\001\002\000\072" +
    "\005\154\006\134\007\146\010\142\011\145\012\143\013" +
    "\133\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\147\027\uffb0" +
    "\034\150\035\136\036\153\037\141\040\140\041\151\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\077\uffb0\105\uffb0\112\uffb0" +
    "\116\uffb0\117\uffb0\001\002\000\006\013\237\015\177\001" +
    "\002\000\054\006\071\015\123\016\117\017\076\020\106" +
    "\021\103\030\075\031\073\032\104\033\116\046\102\066" +
    "\105\067\115\070\112\071\074\072\110\073\113\074\070" +
    "\075\111\101\072\102\077\001\002\000\052\005\154\006" +
    "\134\007\146\010\142\011\145\012\143\013\133\025\uffc8" +
    "\026\147\027\uffc8\034\150\035\136\036\153\037\141\040" +
    "\140\041\151\042\135\043\137\044\152\045\144\001\002" +
    "\000\054\006\071\015\123\016\117\017\076\020\106\021" +
    "\103\030\075\031\073\032\104\033\116\046\102\066\105" +
    "\067\115\070\112\071\074\072\110\073\113\074\070\075" +
    "\111\101\072\102\077\001\002\000\050\005\154\006\134" +
    "\007\146\010\142\011\145\012\143\013\133\022\243\026" +
    "\147\034\150\035\136\036\153\037\141\040\140\041\151" +
    "\042\135\043\137\044\152\045\144\001\002\000\072\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\077\uffaa\105\uffaa\112\uffaa\116" +
    "\uffaa\117\uffaa\001\002\000\054\006\071\015\123\016\117" +
    "\017\076\020\106\021\103\030\075\031\073\032\104\033" +
    "\116\046\102\066\105\067\115\070\112\071\074\072\110" +
    "\073\113\074\070\075\111\101\072\102\077\001\002\000" +
    "\050\005\154\006\134\007\146\010\142\011\145\012\143" +
    "\013\133\022\246\026\147\034\150\035\136\036\153\037" +
    "\141\040\140\041\151\042\135\043\137\044\152\045\144" +
    "\001\002\000\072\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\077\uffa8" +
    "\105\uffa8\112\uffa8\116\uffa8\117\uffa8\001\002\000\004\015" +
    "\250\001\002\000\004\022\251\001\002\000\072\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\077\uffab\105\uffab\112\uffab\116\uffab" +
    "\117\uffab\001\002\000\072\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\034\uffaf\035\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\077\uffaf\105\uffaf\112\uffaf\116\uffaf\117\uffaf\001\002\000" +
    "\054\006\071\015\123\016\117\017\076\020\106\021\103" +
    "\030\075\031\073\032\104\033\116\046\102\066\105\067" +
    "\115\070\112\071\074\072\110\073\113\074\070\075\111" +
    "\101\072\102\077\001\002\000\050\005\154\006\134\007" +
    "\146\010\142\011\145\012\143\013\133\022\255\026\147" +
    "\034\150\035\136\036\153\037\141\040\140\041\151\042" +
    "\135\043\137\044\152\045\144\001\002\000\072\005\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\022" +
    "\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\077\uffa6\105\uffa6\112\uffa6\116\uffa6" +
    "\117\uffa6\001\002\000\054\006\071\015\123\016\117\017" +
    "\076\020\106\021\103\030\075\031\073\032\104\033\116" +
    "\046\102\066\105\067\115\070\112\071\074\072\110\073" +
    "\113\074\070\075\111\101\072\102\077\001\002\000\014" +
    "\015\ufff7\053\ufff7\054\ufff7\121\ufff7\122\ufff7\001\002\000" +
    "\050\005\154\006\134\007\146\010\142\011\145\012\143" +
    "\013\133\023\261\026\147\034\150\035\136\036\153\037" +
    "\141\040\140\041\151\042\135\043\137\044\152\045\144" +
    "\001\002\000\014\015\ufff8\053\ufff8\054\ufff8\121\ufff8\122" +
    "\ufff8\001\002\000\014\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\040\uffc2\001\002\000\004\021\264\001\002\000\004\015" +
    "\265\001\002\000\014\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\040\uffc1\001\002\000\006\022\267\025\037\001\002\000" +
    "\004\023\270\001\002\000\014\015\ufff6\053\ufff6\054\ufff6" +
    "\121\ufff6\122\ufff6\001\002\000\004\023\u013f\001\002\000" +
    "\004\023\u013e\001\002\000\054\006\071\015\123\016\117" +
    "\017\076\020\106\021\103\030\075\031\073\032\104\033" +
    "\116\046\102\066\105\067\115\070\112\071\074\072\110" +
    "\073\113\074\070\075\111\101\072\102\077\001\002\000" +
    "\004\023\u012f\001\002\000\004\023\uff65\001\002\000\102" +
    "\006\071\015\311\016\117\017\076\020\106\021\103\030" +
    "\075\031\073\032\104\033\116\046\102\064\307\065\301" +
    "\066\105\067\115\070\112\071\074\072\110\073\113\074" +
    "\070\075\111\101\072\102\077\103\324\104\310\107\273" +
    "\111\321\113\276\115\300\120\316\123\314\124\275\001" +
    "\002\000\050\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac" +
    "\012\uffac\013\uffac\023\u012b\026\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac" +
    "\045\uffac\001\002\000\004\015\u011b\001\002\000\004\021" +
    "\u0118\001\002\000\004\023\u0117\001\002\000\104\006\071" +
    "\015\311\016\117\017\076\020\106\021\103\030\075\031" +
    "\073\032\104\033\116\046\102\055\u0115\064\307\065\301" +
    "\066\105\067\115\070\112\071\074\072\110\073\113\074" +
    "\070\075\111\101\072\102\077\103\324\104\310\107\273" +
    "\111\321\113\276\115\300\120\316\123\314\124\275\001" +
    "\002\000\004\023\u0114\001\002\000\004\023\u0113\001\002" +
    "\000\110\006\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\030\uff90\031\uff90\032\uff90\033\uff90\046\uff90\055\uff90" +
    "\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072" +
    "\uff90\073\uff90\074\uff90\075\uff90\101\uff90\102\uff90\103\uff90" +
    "\104\uff90\107\uff90\110\uff90\111\uff90\113\uff90\114\uff90\115" +
    "\uff90\120\uff90\123\uff90\124\uff90\001\002\000\004\021\u010d" +
    "\001\002\000\054\006\071\015\123\016\117\017\076\020" +
    "\106\021\103\030\075\031\073\032\104\033\116\046\102" +
    "\066\105\067\115\070\112\071\074\072\110\073\113\074" +
    "\070\075\111\101\072\102\077\001\002\000\052\005\uff9c" +
    "\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\021" +
    "\124\024\361\026\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\001" +
    "\002\000\106\006\uff93\015\uff93\016\uff93\017\uff93\020\uff93" +
    "\021\uff93\030\uff93\031\uff93\032\uff93\033\uff93\046\uff93\055" +
    "\uff93\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93" +
    "\072\uff93\073\uff93\074\uff93\075\uff93\101\uff93\102\uff93\103" +
    "\uff93\104\uff93\107\uff93\111\uff93\113\uff93\114\uff93\115\uff93" +
    "\120\uff93\123\uff93\124\uff93\001\002\000\046\005\154\006" +
    "\134\007\146\010\142\011\145\012\143\013\346\026\347" +
    "\034\150\035\136\036\153\037\141\040\140\041\151\042" +
    "\135\043\137\044\152\045\144\001\002\000\004\023\uff66" +
    "\001\002\000\004\023\345\001\002\000\004\021\342\001" +
    "\002\000\004\023\341\001\002\000\004\023\340\001\002" +
    "\000\054\006\071\015\123\016\117\017\076\020\106\021" +
    "\103\030\075\031\073\032\104\033\116\046\102\066\105" +
    "\067\115\070\112\071\074\072\110\073\113\074\070\075" +
    "\111\101\072\102\077\001\002\000\004\023\331\001\002" +
    "\000\004\013\330\001\002\000\004\021\325\001\002\000" +
    "\004\015\326\001\002\000\004\022\327\001\002\000\004" +
    "\023\uffc3\001\002\000\004\002\uff95\001\002\000\110\006" +
    "\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b\030\uff8b" +
    "\031\uff8b\032\uff8b\033\uff8b\046\uff8b\055\uff8b\064\uff8b\065" +
    "\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b" +
    "\074\uff8b\075\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\107" +
    "\uff8b\110\uff8b\111\uff8b\113\uff8b\114\uff8b\115\uff8b\120\uff8b" +
    "\123\uff8b\124\uff8b\001\002\000\050\005\154\006\134\007" +
    "\146\010\142\011\145\012\143\013\133\026\147\034\150" +
    "\035\136\036\153\037\141\040\140\041\151\042\135\043" +
    "\137\044\152\045\144\112\333\001\002\000\004\054\334" +
    "\001\002\000\102\006\071\015\311\016\117\017\076\020" +
    "\106\021\103\030\075\031\073\032\104\033\116\046\102" +
    "\064\307\065\301\066\105\067\115\070\112\071\074\072" +
    "\110\073\113\074\070\075\111\101\072\102\077\103\324" +
    "\104\310\107\273\111\321\113\276\115\300\120\316\123" +
    "\314\124\275\001\002\000\104\006\071\015\311\016\117" +
    "\017\076\020\106\021\103\030\075\031\073\032\104\033" +
    "\116\046\102\055\337\064\307\065\301\066\105\067\115" +
    "\070\112\071\074\072\110\073\113\074\070\075\111\101" +
    "\072\102\077\103\324\104\310\107\273\111\321\113\276" +
    "\115\300\120\316\123\314\124\275\001\002\000\106\006" +
    "\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\046\uff94\055\uff94\064\uff94\065" +
    "\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94\073\uff94" +
    "\074\uff94\075\uff94\101\uff94\102\uff94\103\uff94\104\uff94\107" +
    "\uff94\111\uff94\113\uff94\114\uff94\115\uff94\120\uff94\123\uff94" +
    "\124\uff94\001\002\000\004\023\uff6b\001\002\000\110\006" +
    "\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\030\uff8c" +
    "\031\uff8c\032\uff8c\033\uff8c\046\uff8c\055\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c" +
    "\074\uff8c\075\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\107" +
    "\uff8c\110\uff8c\111\uff8c\113\uff8c\114\uff8c\115\uff8c\120\uff8c" +
    "\123\uff8c\124\uff8c\001\002\000\110\006\uff92\015\uff92\016" +
    "\uff92\017\uff92\020\uff92\021\uff92\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\046\uff92\055\uff92\064\uff92\065\uff92\066\uff92\067" +
    "\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92" +
    "\101\uff92\102\uff92\103\uff92\104\uff92\107\uff92\110\uff92\111" +
    "\uff92\113\uff92\114\uff92\115\uff92\120\uff92\123\uff92\124\uff92" +
    "\001\002\000\004\015\343\001\002\000\004\022\344\001" +
    "\002\000\004\023\uff67\001\002\000\110\006\uff8d\015\uff8d" +
    "\016\uff8d\017\uff8d\020\uff8d\021\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\046\uff8d\055\uff8d\064\uff8d\065\uff8d\066\uff8d" +
    "\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075" +
    "\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\107\uff8d\110\uff8d" +
    "\111\uff8d\113\uff8d\114\uff8d\115\uff8d\120\uff8d\123\uff8d\124" +
    "\uff8d\001\002\000\004\015\355\001\002\000\054\006\071" +
    "\015\123\016\117\017\076\020\106\021\103\030\075\031" +
    "\073\032\104\033\116\046\102\066\105\067\115\070\112" +
    "\071\074\072\110\073\113\074\070\075\111\101\072\102" +
    "\077\001\002\000\006\025\130\027\351\001\002\000\050" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013" +
    "\uffae\024\352\026\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\001" +
    "\002\000\004\040\353\001\002\000\054\006\071\015\123" +
    "\016\117\017\076\020\106\021\103\030\075\031\073\032" +
    "\104\033\116\046\102\066\105\067\115\070\112\071\074" +
    "\072\110\073\113\074\070\075\111\101\072\102\077\001" +
    "\002\000\050\005\154\006\134\007\146\010\142\011\145" +
    "\012\143\013\133\023\uff7a\026\147\034\150\035\136\036" +
    "\153\037\141\040\140\041\151\042\135\043\137\044\152" +
    "\045\144\001\002\000\050\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\uff99\013\uff99\024\356\026\uff99\034\uff99" +
    "\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\044\uff99\045\uff99\001\002\000\004\040\357\001\002" +
    "\000\054\006\071\015\123\016\117\017\076\020\106\021" +
    "\103\030\075\031\073\032\104\033\116\046\102\066\105" +
    "\067\115\070\112\071\074\072\110\073\113\074\070\075" +
    "\111\101\072\102\077\001\002\000\050\005\154\006\134" +
    "\007\146\010\142\011\145\012\143\013\133\023\uff79\026" +
    "\147\034\150\035\136\036\153\037\141\040\140\041\151" +
    "\042\135\043\137\044\152\045\144\001\002\000\004\040" +
    "\362\001\002\000\054\006\071\015\123\016\117\017\076" +
    "\020\106\021\103\030\075\031\073\032\104\033\116\046" +
    "\102\066\105\067\115\070\112\071\074\072\110\073\113" +
    "\074\070\075\111\101\072\102\077\001\002\000\050\005" +
    "\154\006\134\007\146\010\142\011\145\012\143\013\133" +
    "\023\uff7b\026\147\034\150\035\136\036\153\037\141\040" +
    "\140\041\151\042\135\043\137\044\152\045\144\001\002" +
    "\000\050\005\154\006\134\007\146\010\142\011\145\012" +
    "\143\013\133\026\147\034\150\035\136\036\153\037\141" +
    "\040\140\041\151\042\135\043\137\044\152\045\144\105" +
    "\365\001\002\000\072\006\071\015\311\016\117\017\076" +
    "\020\106\021\103\030\075\031\073\032\104\033\116\046" +
    "\102\054\375\064\307\065\301\066\105\067\115\070\112" +
    "\071\074\072\110\073\113\074\070\075\111\101\072\102" +
    "\077\103\324\120\316\123\314\124\275\001\002\000\112" +
    "\006\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021\uff72\030" +
    "\uff72\031\uff72\032\uff72\033\uff72\046\uff72\055\uff72\064\uff72" +
    "\065\uff72\066\uff72\067\uff72\070\uff72\071\uff72\072\uff72\073" +
    "\uff72\074\uff72\075\uff72\101\uff72\102\uff72\103\uff72\104\uff72" +
    "\106\uff72\107\uff72\110\uff72\111\uff72\113\uff72\114\uff72\115" +
    "\uff72\120\uff72\123\uff72\124\uff72\001\002\000\004\023\u010c" +
    "\001\002\000\004\023\u010b\001\002\000\112\006\uff76\015" +
    "\uff76\016\uff76\017\uff76\020\uff76\021\uff76\030\uff76\031\uff76" +
    "\032\uff76\033\uff76\046\uff76\055\uff76\064\uff76\065\uff76\066" +
    "\uff76\067\uff76\070\uff76\071\uff76\072\uff76\073\uff76\074\uff76" +
    "\075\uff76\101\uff76\102\uff76\103\uff76\104\uff76\106\u0108\107" +
    "\uff76\110\uff76\111\uff76\113\uff76\114\uff76\115\uff76\120\uff76" +
    "\123\uff76\124\uff76\001\002\000\050\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\013\uffac\023\u0107\026\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\001\002\000\004\023\u0106" +
    "\001\002\000\004\023\u0105\001\002\000\102\006\071\015" +
    "\311\016\117\017\076\020\106\021\103\030\075\031\073" +
    "\032\104\033\116\046\102\064\307\065\301\066\105\067" +
    "\115\070\112\071\074\072\110\073\113\074\070\075\111" +
    "\101\072\102\077\103\324\104\310\107\273\111\321\113" +
    "\276\115\300\120\316\123\314\124\275\001\002\000\004" +
    "\023\u0101\001\002\000\004\023\u0100\001\002\000\112\006" +
    "\uff84\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\046\uff84\055\uff84\064\uff84\065" +
    "\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84" +
    "\074\uff84\075\uff84\101\uff84\102\uff84\103\uff84\104\uff84\106" +
    "\uff84\107\uff84\110\uff84\111\uff84\113\uff84\114\uff84\115\uff84" +
    "\120\uff84\123\uff84\124\uff84\001\002\000\112\006\uff86\015" +
    "\uff86\016\uff86\017\uff86\020\uff86\021\uff86\030\uff86\031\uff86" +
    "\032\uff86\033\uff86\046\uff86\055\uff86\064\uff86\065\uff86\066" +
    "\uff86\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074\uff86" +
    "\075\uff86\101\uff86\102\uff86\103\uff86\104\uff86\106\uff86\107" +
    "\uff86\110\uff86\111\uff86\113\uff86\114\uff86\115\uff86\120\uff86" +
    "\123\uff86\124\uff86\001\002\000\104\006\071\015\311\016" +
    "\117\017\076\020\106\021\103\030\075\031\073\032\104" +
    "\033\116\046\102\055\u0103\064\307\065\301\066\105\067" +
    "\115\070\112\071\074\072\110\073\113\074\070\075\111" +
    "\101\072\102\077\103\324\104\310\107\273\111\321\113" +
    "\276\115\300\120\316\123\314\124\275\001\002\000\004" +
    "\023\u0104\001\002\000\112\006\uff73\015\uff73\016\uff73\017" +
    "\uff73\020\uff73\021\uff73\030\uff73\031\uff73\032\uff73\033\uff73" +
    "\046\uff73\055\uff73\064\uff73\065\uff73\066\uff73\067\uff73\070" +
    "\uff73\071\uff73\072\uff73\073\uff73\074\uff73\075\uff73\101\uff73" +
    "\102\uff73\103\uff73\104\uff73\106\uff73\107\uff73\110\uff73\111" +
    "\uff73\113\uff73\114\uff73\115\uff73\120\uff73\123\uff73\124\uff73" +
    "\001\002\000\112\006\uff85\015\uff85\016\uff85\017\uff85\020" +
    "\uff85\021\uff85\030\uff85\031\uff85\032\uff85\033\uff85\046\uff85" +
    "\055\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071" +
    "\uff85\072\uff85\073\uff85\074\uff85\075\uff85\101\uff85\102\uff85" +
    "\103\uff85\104\uff85\106\uff85\107\uff85\110\uff85\111\uff85\113" +
    "\uff85\114\uff85\115\uff85\120\uff85\123\uff85\124\uff85\001\002" +
    "\000\112\006\uff80\015\uff80\016\uff80\017\uff80\020\uff80\021" +
    "\uff80\030\uff80\031\uff80\032\uff80\033\uff80\046\uff80\055\uff80" +
    "\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072" +
    "\uff80\073\uff80\074\uff80\075\uff80\101\uff80\102\uff80\103\uff80" +
    "\104\uff80\106\uff80\107\uff80\110\uff80\111\uff80\113\uff80\114" +
    "\uff80\115\uff80\120\uff80\123\uff80\124\uff80\001\002\000\112" +
    "\006\uff82\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82\030" +
    "\uff82\031\uff82\032\uff82\033\uff82\046\uff82\055\uff82\064\uff82" +
    "\065\uff82\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073" +
    "\uff82\074\uff82\075\uff82\101\uff82\102\uff82\103\uff82\104\uff82" +
    "\106\uff82\107\uff82\110\uff82\111\uff82\113\uff82\114\uff82\115" +
    "\uff82\120\uff82\123\uff82\124\uff82\001\002\000\074\006\071" +
    "\015\311\016\117\017\076\020\106\021\103\030\075\031" +
    "\073\032\104\033\116\046\102\054\375\064\307\065\301" +
    "\066\105\067\115\070\112\071\074\072\110\073\113\074" +
    "\070\075\111\101\072\102\077\103\324\104\310\120\316" +
    "\123\314\124\275\001\002\000\110\006\uff75\015\uff75\016" +
    "\uff75\017\uff75\020\uff75\021\uff75\030\uff75\031\uff75\032\uff75" +
    "\033\uff75\046\uff75\055\uff75\064\uff75\065\uff75\066\uff75\067" +
    "\uff75\070\uff75\071\uff75\072\uff75\073\uff75\074\uff75\075\uff75" +
    "\101\uff75\102\uff75\103\uff75\104\uff75\107\uff75\110\uff75\111" +
    "\uff75\113\uff75\114\uff75\115\uff75\120\uff75\123\uff75\124\uff75" +
    "\001\002\000\110\006\uff74\015\uff74\016\uff74\017\uff74\020" +
    "\uff74\021\uff74\030\uff74\031\uff74\032\uff74\033\uff74\046\uff74" +
    "\055\uff74\064\uff74\065\uff74\066\uff74\067\uff74\070\uff74\071" +
    "\uff74\072\uff74\073\uff74\074\uff74\075\uff74\101\uff74\102\uff74" +
    "\103\uff74\104\uff74\107\uff74\110\uff74\111\uff74\113\uff74\114" +
    "\uff74\115\uff74\120\uff74\123\uff74\124\uff74\001\002\000\112" +
    "\006\uff81\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\030" +
    "\uff81\031\uff81\032\uff81\033\uff81\046\uff81\055\uff81\064\uff81" +
    "\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81\073" +
    "\uff81\074\uff81\075\uff81\101\uff81\102\uff81\103\uff81\104\uff81" +
    "\106\uff81\107\uff81\110\uff81\111\uff81\113\uff81\114\uff81\115" +
    "\uff81\120\uff81\123\uff81\124\uff81\001\002\000\112\006\uff83" +
    "\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83\030\uff83\031" +
    "\uff83\032\uff83\033\uff83\046\uff83\055\uff83\064\uff83\065\uff83" +
    "\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074" +
    "\uff83\075\uff83\101\uff83\102\uff83\103\uff83\104\uff83\106\uff83" +
    "\107\uff83\110\uff83\111\uff83\113\uff83\114\uff83\115\uff83\120" +
    "\uff83\123\uff83\124\uff83\001\002\000\054\006\071\015\123" +
    "\016\117\017\076\020\106\021\103\030\075\031\073\032" +
    "\104\033\116\046\102\066\105\067\115\070\112\071\074" +
    "\072\110\073\113\074\070\075\111\101\072\102\077\001" +
    "\002\000\052\005\154\006\134\007\146\010\142\011\145" +
    "\012\143\013\133\022\uff7c\025\uff7c\026\147\034\150\035" +
    "\136\036\153\037\141\040\140\041\151\042\135\043\137" +
    "\044\152\045\144\001\002\000\006\022\u0111\025\u0110\001" +
    "\002\000\054\006\071\015\123\016\117\017\076\020\106" +
    "\021\103\030\075\031\073\032\104\033\116\046\102\066" +
    "\105\067\115\070\112\071\074\072\110\073\113\074\070" +
    "\075\111\101\072\102\077\001\002\000\004\023\uff7f\001" +
    "\002\000\052\005\154\006\134\007\146\010\142\011\145" +
    "\012\143\013\133\022\uff7d\025\uff7d\026\147\034\150\035" +
    "\136\036\153\037\141\040\140\041\151\042\135\043\137" +
    "\044\152\045\144\001\002\000\110\006\uff87\015\uff87\016" +
    "\uff87\017\uff87\020\uff87\021\uff87\030\uff87\031\uff87\032\uff87" +
    "\033\uff87\046\uff87\055\uff87\064\uff87\065\uff87\066\uff87\067" +
    "\uff87\070\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87" +
    "\101\uff87\102\uff87\103\uff87\104\uff87\107\uff87\110\uff87\111" +
    "\uff87\113\uff87\114\uff87\115\uff87\120\uff87\123\uff87\124\uff87" +
    "\001\002\000\110\006\uff91\015\uff91\016\uff91\017\uff91\020" +
    "\uff91\021\uff91\030\uff91\031\uff91\032\uff91\033\uff91\046\uff91" +
    "\055\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071" +
    "\uff91\072\uff91\073\uff91\074\uff91\075\uff91\101\uff91\102\uff91" +
    "\103\uff91\104\uff91\107\uff91\110\uff91\111\uff91\113\uff91\114" +
    "\uff91\115\uff91\120\uff91\123\uff91\124\uff91\001\002\000\004" +
    "\013\u0116\001\002\000\004\002\uff96\001\002\000\110\006" +
    "\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\033\uff8e\046\uff8e\055\uff8e\064\uff8e\065" +
    "\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e" +
    "\074\uff8e\075\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e\107" +
    "\uff8e\110\uff8e\111\uff8e\113\uff8e\114\uff8e\115\uff8e\120\uff8e" +
    "\123\uff8e\124\uff8e\001\002\000\054\006\071\015\123\016" +
    "\117\017\076\020\106\021\103\030\075\031\073\032\104" +
    "\033\116\046\102\066\105\067\115\070\112\071\074\072" +
    "\110\073\113\074\070\075\111\101\072\102\077\001\002" +
    "\000\006\022\u011a\025\u0110\001\002\000\004\023\uff7e\001" +
    "\002\000\004\024\u011c\001\002\000\004\040\u011d\001\002" +
    "\000\054\006\071\015\123\016\117\017\076\020\106\021" +
    "\103\030\075\031\073\032\104\033\116\046\102\066\105" +
    "\067\115\070\112\071\074\072\110\073\113\074\070\075" +
    "\111\101\072\102\077\001\002\000\052\005\154\006\134" +
    "\007\146\010\142\011\145\012\143\013\133\026\147\034" +
    "\150\035\136\036\153\037\141\040\140\041\151\042\135" +
    "\043\137\044\152\045\144\116\u0120\117\u011f\001\002\000" +
    "\054\006\071\015\123\016\117\017\076\020\106\021\103" +
    "\030\075\031\073\032\104\033\116\046\102\066\105\067" +
    "\115\070\112\071\074\072\110\073\113\074\070\075\111" +
    "\101\072\102\077\001\002\000\054\006\071\015\123\016" +
    "\117\017\076\020\106\021\103\030\075\031\073\032\104" +
    "\033\116\046\102\066\105\067\115\070\112\071\074\072" +
    "\110\073\113\074\070\075\111\101\072\102\077\001\002" +
    "\000\050\005\154\006\134\007\146\010\142\011\145\012" +
    "\143\013\133\026\147\034\150\035\136\036\153\037\141" +
    "\040\140\041\151\042\135\043\137\044\152\045\144\112" +
    "\u0122\001\002\000\004\054\u0123\001\002\000\102\006\071" +
    "\015\311\016\117\017\076\020\106\021\103\030\075\031" +
    "\073\032\104\033\116\046\102\064\307\065\301\066\105" +
    "\067\115\070\112\071\074\072\110\073\113\074\070\075" +
    "\111\101\072\102\077\103\324\104\310\107\273\111\321" +
    "\113\276\115\300\120\316\123\314\124\275\001\002\000" +
    "\104\006\071\015\311\016\117\017\076\020\106\021\103" +
    "\030\075\031\073\032\104\033\116\046\102\055\u0125\064" +
    "\307\065\301\066\105\067\115\070\112\071\074\072\110" +
    "\073\113\074\070\075\111\101\072\102\077\103\324\104" +
    "\310\107\273\111\321\113\276\115\300\120\316\123\314" +
    "\124\275\001\002\000\004\023\uff69\001\002\000\050\005" +
    "\154\006\134\007\146\010\142\011\145\012\143\013\133" +
    "\026\147\034\150\035\136\036\153\037\141\040\140\041" +
    "\151\042\135\043\137\044\152\045\144\112\u0127\001\002" +
    "\000\004\054\u0128\001\002\000\102\006\071\015\311\016" +
    "\117\017\076\020\106\021\103\030\075\031\073\032\104" +
    "\033\116\046\102\064\307\065\301\066\105\067\115\070" +
    "\112\071\074\072\110\073\113\074\070\075\111\101\072" +
    "\102\077\103\324\104\310\107\273\111\321\113\276\115" +
    "\300\120\316\123\314\124\275\001\002\000\104\006\071" +
    "\015\311\016\117\017\076\020\106\021\103\030\075\031" +
    "\073\032\104\033\116\046\102\055\u012a\064\307\065\301" +
    "\066\105\067\115\070\112\071\074\072\110\073\113\074" +
    "\070\075\111\101\072\102\077\103\324\104\310\107\273" +
    "\111\321\113\276\115\300\120\316\123\314\124\275\001" +
    "\002\000\004\023\uff68\001\002\000\110\006\uff89\015\uff89" +
    "\016\uff89\017\uff89\020\uff89\021\uff89\030\uff89\031\uff89\032" +
    "\uff89\033\uff89\046\uff89\055\uff89\064\uff89\065\uff89\066\uff89" +
    "\067\uff89\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075" +
    "\uff89\101\uff89\102\uff89\103\uff89\104\uff89\107\uff89\110\uff89" +
    "\111\uff89\113\uff89\114\uff89\115\uff89\120\uff89\123\uff89\124" +
    "\uff89\001\002\000\104\006\071\015\311\016\117\017\076" +
    "\020\106\021\103\030\075\031\073\032\104\033\116\046" +
    "\102\064\307\065\301\066\105\067\115\070\112\071\074" +
    "\072\110\073\113\074\070\075\111\101\072\102\077\103" +
    "\324\104\310\107\273\111\321\113\276\114\u012d\115\300" +
    "\120\316\123\314\124\275\001\002\000\054\006\071\015" +
    "\123\016\117\017\076\020\106\021\103\030\075\031\073" +
    "\032\104\033\116\046\102\066\105\067\115\070\112\071" +
    "\074\072\110\073\113\074\070\075\111\101\072\102\077" +
    "\001\002\000\050\005\154\006\134\007\146\010\142\011" +
    "\145\012\143\013\133\023\uff6a\026\147\034\150\035\136" +
    "\036\153\037\141\040\140\041\151\042\135\043\137\044" +
    "\152\045\144\001\002\000\110\006\uff8f\015\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\021\uff8f\030\uff8f\031\uff8f\032\uff8f\033" +
    "\uff8f\046\uff8f\055\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f" +
    "\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\101" +
    "\uff8f\102\uff8f\103\uff8f\104\uff8f\107\uff8f\110\uff8f\111\uff8f" +
    "\113\uff8f\114\uff8f\115\uff8f\120\uff8f\123\uff8f\124\uff8f\001" +
    "\002\000\050\005\154\006\134\007\146\010\142\011\145" +
    "\012\143\013\133\026\147\034\150\035\136\036\153\037" +
    "\141\040\140\041\151\042\135\043\137\044\152\045\144" +
    "\077\u0131\001\002\000\054\006\071\015\123\016\117\017" +
    "\076\020\106\021\103\030\075\031\073\032\104\033\116" +
    "\046\102\066\105\067\115\070\112\071\074\072\110\073" +
    "\113\074\070\075\111\101\072\102\077\001\002\000\060" +
    "\006\071\015\123\016\117\017\076\020\106\021\103\030" +
    "\075\031\073\032\104\033\116\046\102\055\u0137\066\105" +
    "\067\115\070\112\071\074\072\110\073\113\074\070\075" +
    "\111\101\072\102\077\110\u013a\001\002\000\060\006\uff6e" +
    "\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e\030\uff6e\031" +
    "\uff6e\032\uff6e\033\uff6e\046\uff6e\055\uff6e\066\uff6e\067\uff6e" +
    "\070\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e\075\uff6e\101" +
    "\uff6e\102\uff6e\110\uff6e\001\002\000\006\024\u0135\025\130" +
    "\001\002\000\102\006\071\015\311\016\117\017\076\020" +
    "\106\021\103\030\075\031\073\032\104\033\116\046\102" +
    "\064\307\065\301\066\105\067\115\070\112\071\074\072" +
    "\110\073\113\074\070\075\111\101\072\102\077\103\324" +
    "\104\310\107\273\111\321\113\276\115\300\120\316\123" +
    "\314\124\275\001\002\000\060\006\uff6d\015\uff6d\016\uff6d" +
    "\017\uff6d\020\uff6d\021\uff6d\030\uff6d\031\uff6d\032\uff6d\033" +
    "\uff6d\046\uff6d\055\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d" +
    "\072\uff6d\073\uff6d\074\uff6d\075\uff6d\101\uff6d\102\uff6d\110" +
    "\uff6d\001\002\000\004\023\uff70\001\002\000\004\055\u013d" +
    "\001\002\000\060\006\uff6f\015\uff6f\016\uff6f\017\uff6f\020" +
    "\uff6f\021\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\046\uff6f" +
    "\055\uff6f\066\uff6f\067\uff6f\070\uff6f\071\uff6f\072\uff6f\073" +
    "\uff6f\074\uff6f\075\uff6f\101\uff6f\102\uff6f\110\uff6f\001\002" +
    "\000\004\024\u013b\001\002\000\102\006\071\015\311\016" +
    "\117\017\076\020\106\021\103\030\075\031\073\032\104" +
    "\033\116\046\102\064\307\065\301\066\105\067\115\070" +
    "\112\071\074\072\110\073\113\074\070\075\111\101\072" +
    "\102\077\103\324\104\310\107\273\111\321\113\276\115" +
    "\300\120\316\123\314\124\275\001\002\000\004\055\uff6c" +
    "\001\002\000\004\023\uff71\001\002\000\110\006\uff88\015" +
    "\uff88\016\uff88\017\uff88\020\uff88\021\uff88\030\uff88\031\uff88" +
    "\032\uff88\033\uff88\046\uff88\055\uff88\064\uff88\065\uff88\066" +
    "\uff88\067\uff88\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88" +
    "\075\uff88\101\uff88\102\uff88\103\uff88\104\uff88\107\uff88\110" +
    "\uff88\111\uff88\113\uff88\114\uff88\115\uff88\120\uff88\123\uff88" +
    "\124\uff88\001\002\000\110\006\uff8a\015\uff8a\016\uff8a\017" +
    "\uff8a\020\uff8a\021\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a" +
    "\046\uff8a\055\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070" +
    "\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\101\uff8a" +
    "\102\uff8a\103\uff8a\104\uff8a\107\uff8a\110\uff8a\111\uff8a\113" +
    "\uff8a\114\uff8a\115\uff8a\120\uff8a\123\uff8a\124\uff8a\001\002" +
    "\000\006\021\u0142\024\u0141\001\002\000\024\015\051\030" +
    "\054\056\042\057\044\060\052\061\046\062\053\076\043" +
    "\100\045\001\002\000\006\015\265\053\u0143\001\002\000" +
    "\004\015\265\001\002\000\006\022\u014a\025\u0149\001\002" +
    "\000\006\024\u0147\025\037\001\002\000\006\022\uffdf\025" +
    "\uffdf\001\002\000\024\015\051\030\054\056\042\057\044" +
    "\060\052\061\046\062\053\076\043\100\045\001\002\000" +
    "\006\022\uffde\025\uffde\001\002\000\006\015\265\053\u0143" +
    "\001\002\000\004\024\u014b\001\002\000\024\015\051\030" +
    "\054\056\042\057\044\060\052\061\046\062\053\076\043" +
    "\100\045\001\002\000\004\023\u014d\001\002\000\012\053" +
    "\016\054\u014f\121\025\122\014\001\002\000\004\054\u0153" +
    "\001\002\000\102\006\071\015\311\016\117\017\076\020" +
    "\106\021\103\030\075\031\073\032\104\033\116\046\102" +
    "\064\307\065\301\066\105\067\115\070\112\071\074\072" +
    "\110\073\113\074\070\075\111\101\072\102\077\103\324" +
    "\104\310\107\273\111\321\113\276\115\300\120\316\123" +
    "\314\124\275\001\002\000\104\006\071\015\311\016\117" +
    "\017\076\020\106\021\103\030\075\031\073\032\104\033" +
    "\116\046\102\055\u0151\064\307\065\301\066\105\067\115" +
    "\070\112\071\074\072\110\073\113\074\070\075\111\101" +
    "\072\102\077\103\324\104\310\107\273\111\321\113\276" +
    "\115\300\120\316\123\314\124\275\001\002\000\004\023" +
    "\u0152\001\002\000\010\054\uffe6\121\uffe6\122\uffe6\001\002" +
    "\000\102\006\071\015\311\016\117\017\076\020\106\021" +
    "\103\030\075\031\073\032\104\033\116\046\102\064\307" +
    "\065\301\066\105\067\115\070\112\071\074\072\110\073" +
    "\113\074\070\075\111\101\072\102\077\103\324\104\310" +
    "\107\273\111\321\113\276\115\300\120\316\123\314\124" +
    "\275\001\002\000\104\006\071\015\311\016\117\017\076" +
    "\020\106\021\103\030\075\031\073\032\104\033\116\046" +
    "\102\055\u0155\064\307\065\301\066\105\067\115\070\112" +
    "\071\074\072\110\073\113\074\070\075\111\101\072\102" +
    "\077\103\324\104\310\107\273\111\321\113\276\115\300" +
    "\120\316\123\314\124\275\001\002\000\004\023\u0156\001" +
    "\002\000\010\054\uffe8\121\uffe8\122\uffe8\001\002\000\006" +
    "\022\uffe0\025\uffe0\001\002\000\006\024\u0159\025\037\001" +
    "\002\000\024\015\051\030\054\056\042\057\044\060\052" +
    "\061\046\062\053\076\043\100\045\001\002\000\006\022" +
    "\uffdd\025\uffdd\001\002\000\004\023\u015c\001\002\000\012" +
    "\053\016\054\u015e\121\025\122\014\001\002\000\004\054" +
    "\u0162\001\002\000\102\006\071\015\311\016\117\017\076" +
    "\020\106\021\103\030\075\031\073\032\104\033\116\046" +
    "\102\064\307\065\301\066\105\067\115\070\112\071\074" +
    "\072\110\073\113\074\070\075\111\101\072\102\077\103" +
    "\324\104\310\107\273\111\321\113\276\115\300\120\316" +
    "\123\314\124\275\001\002\000\104\006\071\015\311\016" +
    "\117\017\076\020\106\021\103\030\075\031\073\032\104" +
    "\033\116\046\102\055\u0160\064\307\065\301\066\105\067" +
    "\115\070\112\071\074\072\110\073\113\074\070\075\111" +
    "\101\072\102\077\103\324\104\310\107\273\111\321\113" +
    "\276\115\300\120\316\123\314\124\275\001\002\000\004" +
    "\023\u0161\001\002\000\010\054\uffe5\121\uffe5\122\uffe5\001" +
    "\002\000\102\006\071\015\311\016\117\017\076\020\106" +
    "\021\103\030\075\031\073\032\104\033\116\046\102\064" +
    "\307\065\301\066\105\067\115\070\112\071\074\072\110" +
    "\073\113\074\070\075\111\101\072\102\077\103\324\104" +
    "\310\107\273\111\321\113\276\115\300\120\316\123\314" +
    "\124\275\001\002\000\104\006\071\015\311\016\117\017" +
    "\076\020\106\021\103\030\075\031\073\032\104\033\116" +
    "\046\102\055\u0164\064\307\065\301\066\105\067\115\070" +
    "\112\071\074\072\110\073\113\074\070\075\111\101\072" +
    "\102\077\103\324\104\310\107\273\111\321\113\276\115" +
    "\300\120\316\123\314\124\275\001\002\000\004\023\u0165" +
    "\001\002\000\010\054\uffe7\121\uffe7\122\uffe7\001\002\000" +
    "\010\054\uffec\121\uffec\122\uffec\001\002\000\010\054\uffeb" +
    "\121\uffeb\122\uffeb\001\002\000\004\054\uffd9\001\002\000" +
    "\004\002\000\001\002\000\016\015\265\051\030\053\016" +
    "\054\uffdc\121\025\122\014\001\002\000\010\023\u016e\025" +
    "\037\040\u016d\001\002\000\016\015\uffd7\051\uffd7\053\uffd7" +
    "\054\uffd7\121\uffd7\122\uffd7\001\002\000\024\015\051\030" +
    "\054\056\042\057\044\060\052\061\046\062\053\076\043" +
    "\100\045\001\002\000\016\015\uffd5\051\uffd5\053\uffd5\054" +
    "\uffd5\121\uffd5\122\uffd5\001\002\000\004\023\u0170\001\002" +
    "\000\016\015\uffd6\051\uffd6\053\uffd6\054\uffd6\121\uffd6\122" +
    "\uffd6\001\002\000\016\015\uffd8\051\uffd8\053\uffd8\054\uffd8" +
    "\121\uffd8\122\uffd8\001\002\000\004\054\uffdb\001\002\000" +
    "\012\015\ufff1\054\ufff1\121\ufff1\122\ufff1\001\002\000\010" +
    "\024\uffc1\025\uffc1\040\u017f\001\002\000\006\024\u0179\025" +
    "\037\001\002\000\012\015\u0174\054\ufff5\121\025\122\014" +
    "\001\002\000\012\015\ufff2\054\ufff2\121\ufff2\122\ufff2\001" +
    "\002\000\004\054\ufff4\001\002\000\024\015\051\030\054" +
    "\056\042\057\044\060\052\061\046\062\053\076\043\100" +
    "\045\001\002\000\006\023\u017c\040\u017b\001\002\000\054" +
    "\006\071\015\123\016\117\017\076\020\106\021\103\030" +
    "\075\031\073\032\104\033\116\046\102\066\105\067\115" +
    "\070\112\071\074\072\110\073\113\074\070\075\111\101" +
    "\072\102\077\001\002\000\012\015\uffef\054\uffef\121\uffef" +
    "\122\uffef\001\002\000\050\005\154\006\134\007\146\010" +
    "\142\011\145\012\143\013\133\023\u017e\026\147\034\150" +
    "\035\136\036\153\037\141\040\140\041\151\042\135\043" +
    "\137\044\152\045\144\001\002\000\012\015\ufff0\054\ufff0" +
    "\121\ufff0\122\ufff0\001\002\000\004\021\u0180\001\002\000" +
    "\004\015\265\001\002\000\006\022\u0182\025\037\001\002" +
    "\000\004\023\u0183\001\002\000\012\015\uffee\054\uffee\121" +
    "\uffee\122\uffee\001\002\000\006\021\u0185\023\u0186\001\002" +
    "\000\006\015\265\053\u0143\001\002\000\012\053\016\054" +
    "\u0188\121\025\122\014\001\002\000\004\054\u018c\001\002" +
    "\000\102\006\071\015\311\016\117\017\076\020\106\021" +
    "\103\030\075\031\073\032\104\033\116\046\102\064\307" +
    "\065\301\066\105\067\115\070\112\071\074\072\110\073" +
    "\113\074\070\075\111\101\072\102\077\103\324\104\310" +
    "\107\273\111\321\113\276\115\300\120\316\123\314\124" +
    "\275\001\002\000\104\006\071\015\311\016\117\017\076" +
    "\020\106\021\103\030\075\031\073\032\104\033\116\046" +
    "\102\055\u018a\064\307\065\301\066\105\067\115\070\112" +
    "\071\074\072\110\073\113\074\070\075\111\101\072\102" +
    "\077\103\324\104\310\107\273\111\321\113\276\115\300" +
    "\120\316\123\314\124\275\001\002\000\004\023\u018b\001" +
    "\002\000\010\054\uffe1\121\uffe1\122\uffe1\001\002\000\102" +
    "\006\071\015\311\016\117\017\076\020\106\021\103\030" +
    "\075\031\073\032\104\033\116\046\102\064\307\065\301" +
    "\066\105\067\115\070\112\071\074\072\110\073\113\074" +
    "\070\075\111\101\072\102\077\103\324\104\310\107\273" +
    "\111\321\113\276\115\300\120\316\123\314\124\275\001" +
    "\002\000\104\006\071\015\311\016\117\017\076\020\106" +
    "\021\103\030\075\031\073\032\104\033\116\046\102\055" +
    "\u018e\064\307\065\301\066\105\067\115\070\112\071\074" +
    "\072\110\073\113\074\070\075\111\101\072\102\077\103" +
    "\324\104\310\107\273\111\321\113\276\115\300\120\316" +
    "\123\314\124\275\001\002\000\004\023\u018f\001\002\000" +
    "\010\054\uffe3\121\uffe3\122\uffe3\001\002\000\006\022\u0191" +
    "\025\u0149\001\002\000\004\023\u0192\001\002\000\012\053" +
    "\016\054\u0194\121\025\122\014\001\002\000\004\054\u0198" +
    "\001\002\000\102\006\071\015\311\016\117\017\076\020" +
    "\106\021\103\030\075\031\073\032\104\033\116\046\102" +
    "\064\307\065\301\066\105\067\115\070\112\071\074\072" +
    "\110\073\113\074\070\075\111\101\072\102\077\103\324" +
    "\104\310\107\273\111\321\113\276\115\300\120\316\123" +
    "\314\124\275\001\002\000\104\006\071\015\311\016\117" +
    "\017\076\020\106\021\103\030\075\031\073\032\104\033" +
    "\116\046\102\055\u0196\064\307\065\301\066\105\067\115" +
    "\070\112\071\074\072\110\073\113\074\070\075\111\101" +
    "\072\102\077\103\324\104\310\107\273\111\321\113\276" +
    "\115\300\120\316\123\314\124\275\001\002\000\004\023" +
    "\u0197\001\002\000\010\054\uffe2\121\uffe2\122\uffe2\001\002" +
    "\000\102\006\071\015\311\016\117\017\076\020\106\021" +
    "\103\030\075\031\073\032\104\033\116\046\102\064\307" +
    "\065\301\066\105\067\115\070\112\071\074\072\110\073" +
    "\113\074\070\075\111\101\072\102\077\103\324\104\310" +
    "\107\273\111\321\113\276\115\300\120\316\123\314\124" +
    "\275\001\002\000\104\006\071\015\311\016\117\017\076" +
    "\020\106\021\103\030\075\031\073\032\104\033\116\046" +
    "\102\055\u019a\064\307\065\301\066\105\067\115\070\112" +
    "\071\074\072\110\073\113\074\070\075\111\101\072\102" +
    "\077\103\324\104\310\107\273\111\321\113\276\115\300" +
    "\120\316\123\314\124\275\001\002\000\004\023\u019b\001" +
    "\002\000\010\054\uffe4\121\uffe4\122\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0199\000\006\002\004\004\003\001\001\000\022\011" +
    "\011\012\020\015\017\023\014\051\012\052\023\053\026" +
    "\056\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\u0174\016\u0175\017\u0172\001\001\000\010" +
    "\006\u016a\013\u016b\014\u0169\001\001\000\002\001\001\000" +
    "\004\023\u0168\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\053\u0165\056\u0166\001\001\000\002\001\001\000" +
    "\040\003\312\020\302\021\311\024\316\026\303\035\270" +
    "\036\305\041\273\045\301\046\314\047\317\050\321\057" +
    "\276\060\271\061\304\001\001\000\002\001\001\000\010" +
    "\006\031\007\033\010\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\031\010\034" +
    "\015\035\051\012\052\023\053\026\056\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\040\027\046\033\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\061" +
    "\027\046\033\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\064\027\046\033\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\100\030\113\031" +
    "\117\057\077\001\001\000\002\001\001\000\006\003\251" +
    "\057\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\234\057\077\001\001\000\006\003\232\057\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\121\057\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\124\032\126\057\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\131\057\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\175\057\077\001" +
    "\001\000\006\003\174\057\077\001\001\000\006\003\173" +
    "\057\077\001\001\000\006\003\172\057\077\001\001\000" +
    "\006\003\171\057\077\001\001\000\006\003\170\057\077" +
    "\001\001\000\006\003\167\057\077\001\001\000\006\003" +
    "\166\057\077\001\001\000\006\003\165\057\077\001\001" +
    "\000\006\003\164\057\077\001\001\000\006\003\163\057" +
    "\077\001\001\000\010\003\124\032\161\057\077\001\001" +
    "\000\006\003\160\057\077\001\001\000\006\003\157\057" +
    "\077\001\001\000\006\003\156\057\077\001\001\000\006" +
    "\003\155\057\077\001\001\000\006\003\154\057\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\100\031\204\057\077\001\001" +
    "\000\002\001\001\000\010\005\203\027\046\033\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\206" +
    "\057\077\001\001\000\002\001\001\000\006\003\210\057" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\213\057\077\001\001\000\002\001\001\000\006\003" +
    "\215\057\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\220\057\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\223\057\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\226\057\077\001" +
    "\001\000\002\001\001\000\006\003\230\057\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\237\057\077\001\001\000\002\001\001\000\006\003" +
    "\241\057\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\244\057\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\253\057\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\257" +
    "\057\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\u012f\057\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\003\312\020\u012b\021\311" +
    "\024\316\026\303\035\270\036\305\041\273\045\301\046" +
    "\314\047\317\050\321\057\276\060\271\061\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\312\021\335\024\316\026\303" +
    "\035\270\036\305\041\273\045\301\046\314\047\317\050" +
    "\321\057\276\060\271\061\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\363\057\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\331\057\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\312" +
    "\020\334\021\311\024\316\026\303\035\270\036\305\041" +
    "\273\045\301\046\314\047\317\050\321\057\276\060\271" +
    "\061\304\001\001\000\036\003\312\021\335\024\316\026" +
    "\303\035\270\036\305\041\273\045\301\046\314\047\317" +
    "\050\321\057\276\060\271\061\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\124\032\347" +
    "\057\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\353\057\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\357\057\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\362\057\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\312\022\365\024\375\026\373" +
    "\035\366\037\370\050\376\057\371\060\367\061\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\312\020\u0101\021\311\024\316" +
    "\026\303\035\270\036\305\041\273\045\301\046\314\047" +
    "\317\050\321\057\276\060\271\061\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\312\021\335\024\316\026\303\035\270" +
    "\036\305\041\273\045\301\046\314\047\317\050\321\057" +
    "\276\060\271\061\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\312\022\365\024\375\026\373\035\366" +
    "\036\u0109\037\u0108\050\376\057\371\060\367\061\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\u010d\025\u010e\057\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\u0111" +
    "\057\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\u010d\025\u0118\057" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\u011d\057\077\001" +
    "\001\000\002\001\001\000\006\003\u0125\057\077\001\001" +
    "\000\006\003\u0120\057\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\312\020\u0123\021\311\024\316" +
    "\026\303\035\270\036\305\041\273\045\301\046\314\047" +
    "\317\050\321\057\276\060\271\061\304\001\001\000\036" +
    "\003\312\021\335\024\316\026\303\035\270\036\305\041" +
    "\273\045\301\046\314\047\317\050\321\057\276\060\271" +
    "\061\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\312\020\u0128\021\311\024\316" +
    "\026\303\035\270\036\305\041\273\045\301\046\314\047" +
    "\317\050\321\057\276\060\271\061\304\001\001\000\036" +
    "\003\312\021\335\024\316\026\303\035\270\036\305\041" +
    "\273\045\301\046\314\047\317\050\321\057\276\060\271" +
    "\061\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\312\021\335\024\316\026\303\035\270\036\305" +
    "\041\273\045\301\046\314\047\317\050\321\057\276\060" +
    "\271\061\304\001\001\000\006\003\u012d\057\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\124\032\u0133\042\u0131\043\u0132\057\077\001\001" +
    "\000\014\003\124\032\u0133\043\u0138\044\u0137\057\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\312" +
    "\021\u0135\024\316\026\303\035\270\036\305\041\273\045" +
    "\301\046\314\047\317\050\321\057\276\060\271\061\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\312" +
    "\021\u013b\024\316\026\303\035\270\036\305\041\273\045" +
    "\301\046\314\047\317\050\321\057\276\060\271\061\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\u015a" +
    "\027\046\033\047\001\001\000\010\006\u0144\054\u0143\055" +
    "\u0145\001\001\000\004\006\u0157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\u0147\027" +
    "\046\033\047\001\001\000\002\001\001\000\006\006\u0144" +
    "\055\u0156\001\001\000\002\001\001\000\010\005\u014b\027" +
    "\046\033\047\001\001\000\002\001\001\000\014\015\u014d" +
    "\051\012\052\023\053\026\056\022\001\001\000\002\001" +
    "\001\000\040\003\312\020\u014f\021\311\024\316\026\303" +
    "\035\270\036\305\041\273\045\301\046\314\047\317\050" +
    "\321\057\276\060\271\061\304\001\001\000\036\003\312" +
    "\021\335\024\316\026\303\035\270\036\305\041\273\045" +
    "\301\046\314\047\317\050\321\057\276\060\271\061\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\312\020\u0153\021\311\024\316\026\303\035\270\036\305" +
    "\041\273\045\301\046\314\047\317\050\321\057\276\060" +
    "\271\061\304\001\001\000\036\003\312\021\335\024\316" +
    "\026\303\035\270\036\305\041\273\045\301\046\314\047" +
    "\317\050\321\057\276\060\271\061\304\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\u0159\027\046\033\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\u015c\051\012\052" +
    "\023\053\026\056\022\001\001\000\002\001\001\000\040" +
    "\003\312\020\u015e\021\311\024\316\026\303\035\270\036" +
    "\305\041\273\045\301\046\314\047\317\050\321\057\276" +
    "\060\271\061\304\001\001\000\036\003\312\021\335\024" +
    "\316\026\303\035\270\036\305\041\273\045\301\046\314" +
    "\047\317\050\321\057\276\060\271\061\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\312\020\u0162" +
    "\021\311\024\316\026\303\035\270\036\305\041\273\045" +
    "\301\046\314\047\317\050\321\057\276\060\271\061\304" +
    "\001\001\000\036\003\312\021\335\024\316\026\303\035" +
    "\270\036\305\041\273\045\301\046\314\047\317\050\321" +
    "\057\276\060\271\061\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\u016a\011\u0171\013" +
    "\u0170\015\017\051\012\052\023\053\026\056\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\u016e\027" +
    "\046\033\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\u0174\017\u0176\051\u0177\052\023\053\026\056\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\u0179" +
    "\027\046\033\047\001\001\000\002\001\001\000\006\003" +
    "\u017c\057\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u0180\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\u0144\054\u018f\055\u0145\001" +
    "\001\000\014\015\u0186\051\012\052\023\053\026\056\022" +
    "\001\001\000\002\001\001\000\040\003\312\020\u0188\021" +
    "\311\024\316\026\303\035\270\036\305\041\273\045\301" +
    "\046\314\047\317\050\321\057\276\060\271\061\304\001" +
    "\001\000\036\003\312\021\335\024\316\026\303\035\270" +
    "\036\305\041\273\045\301\046\314\047\317\050\321\057" +
    "\276\060\271\061\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\312\020\u018c\021\311\024\316\026" +
    "\303\035\270\036\305\041\273\045\301\046\314\047\317" +
    "\050\321\057\276\060\271\061\304\001\001\000\036\003" +
    "\312\021\335\024\316\026\303\035\270\036\305\041\273" +
    "\045\301\046\314\047\317\050\321\057\276\060\271\061" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\015\u0192\051\012\052" +
    "\023\053\026\056\022\001\001\000\002\001\001\000\040" +
    "\003\312\020\u0194\021\311\024\316\026\303\035\270\036" +
    "\305\041\273\045\301\046\314\047\317\050\321\057\276" +
    "\060\271\061\304\001\001\000\036\003\312\021\335\024" +
    "\316\026\303\035\270\036\305\041\273\045\301\046\314" +
    "\047\317\050\321\057\276\060\271\061\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\312\020\u0198" +
    "\021\311\024\316\026\303\035\270\036\305\041\273\045" +
    "\301\046\314\047\317\050\321\057\276\060\271\061\304" +
    "\001\001\000\036\003\312\021\335\024\316\026\303\035" +
    "\270\036\305\041\273\045\301\046\314\047\317\050\321" +
    "\057\276\060\271\061\304\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static LinkedList<Instruccion> lista;

	

	public  void setLista(LinkedList<Instruccion> listaG){
		lista = listaG;
	}

	public  LinkedList<Instruccion> getLista(){
		return lista;
	}
	
	public static int cont=0;
	public void syntax_error(Symbol s){
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
	}

	 public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= insNombrePrograma insType cuerpoPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addAll(a); RESULT.addAll(b); setLista(RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= insNombrePrograma cuerpoPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addAll(a); setLista(RESULT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // insNombrePrograma ::= PROGRAM ID PNTCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insNombrePrograma",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // insConstantes ::= CONST listaDeclaracionConstantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insConstantes",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // insConstantes ::= CONST listaDeclaracionConstantes insVar 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insConstantes",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // insConstantes ::= insVar 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insConstantes",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // listaDeclaracionConstantes ::= listaDeclaracionConstantes declaracionConstante 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionConstantes",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaDeclaracionConstantes ::= declaracionConstante 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addLast(a);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionConstantes",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionConstante ::= listaID DSPUNTOS tipoDato IGUAL expresion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(c,bleft,bright,true,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionConstante ::= listaID DSPUNTOS tipoDato PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(null,bleft,bright,true,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionConstante ::= ID IGUAL PARIZQ listaID PARDER PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Enumerador(a.toString(),b,aleft,aright,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionConstante",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // insVar ::= VAR listaDeclaracionVariables 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insVar",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // insVar ::= VAR listaDeclaracionVariables insFunciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insVar",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // insVar ::= insFunciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insVar",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaDeclaracionVariables ::= listaDeclaracionVariables declaracionVariable 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVariables",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listaDeclaracionVariables ::= declaracionVariable 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.addLast(a);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaracionVariables",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionVariable ::= listaID DSPUNTOS tipoDato IGUAL expresion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(c,bleft,bright,false,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionVariable ::= listaID DSPUNTOS tipoDato PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Declaracion(null,bleft,bright,false,b,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionVariable ::= ID IGUAL PARIZQ listaID PARDER PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Enumerador(a.toString(),b,aleft,aright,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // insFunciones ::= listaFunciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFunciones",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaFunciones ::= listaFunciones insFuncion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Funcion b = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaFunciones",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listaFunciones ::= listaFunciones insProcedure 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Funcion b = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaFunciones",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listaFunciones ::= insFuncion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaFunciones",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listaFunciones ::= insProcedure 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Funcion a = (Funcion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaFunciones",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // insFuncion ::= FUNCTION ID PARIZQ listaParametros PARDER DSPUNTOS tipoDato PNTCOMA insVar BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		LinkedList<Parametro> b = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 d.addAll(e); RESULT = new Funcion(b,a.toString(),c,d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFuncion",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // insFuncion ::= FUNCTION ID DSPUNTOS tipoDato PNTCOMA insVar BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 c.addAll(d); RESULT = new Funcion(new LinkedList<>(),a.toString(),b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFuncion",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // insFuncion ::= FUNCTION ID PARIZQ listaParametros PARDER DSPUNTOS tipoDato PNTCOMA BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<Parametro> b = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Funcion(b,a.toString(),c,d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFuncion",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // insFuncion ::= FUNCTION ID DSPUNTOS tipoDato PNTCOMA BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Funcion(new LinkedList<>(),a.toString(),b,c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFuncion",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // insProcedure ::= PROCEDURE ID PARIZQ listaParametros PARDER PNTCOMA insVar BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		LinkedList<Parametro> b = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> e = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 d.addAll(e); RESULT = new Funcion(b,a.toString(),new Type("",Tipo.VOID),d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insProcedure",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // insProcedure ::= PROCEDURE ID PNTCOMA insVar BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 c.addAll(d); RESULT = new Funcion(new LinkedList<>(),a.toString(),new Type("",Tipo.VOID),c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insProcedure",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // insProcedure ::= PROCEDURE ID PARIZQ listaParametros PARDER PNTCOMA BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Parametro> b = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Funcion(b,a.toString(),new Type("",Tipo.VOID),d,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insProcedure",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // insProcedure ::= PROCEDURE ID PNTCOMA BEGIN instruccionesPrincipal END PNTCOMA 
            {
              Funcion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Funcion(new LinkedList<>(),a.toString(),new Type("",Tipo.VOID),c,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insProcedure",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaParametros ::= listaParametros COMA parametro 
            {
              LinkedList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Parametro> a = (LinkedList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro b = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listaParametros ::= parametro 
            {
              LinkedList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro a = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaParametros",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametro ::= listaID DSPUNTOS tipoDato 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Parametro(a,false,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametro ::= VAR listaID DSPUNTOS tipoDato 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Parametro(a,true,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // insType ::= TYPE listaType 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // insType ::= TYPE listaType insConstantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addAll(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // insType ::= insConstantes 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // insType ::= error PNTCOMA 
            {
              LinkedList<Instruccion> RESULT =null;
		 RESULT = new LinkedList<Instruccion>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insType",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listaType ::= listaType equivalencia 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		TypeDeclaration b = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaType",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listaType ::= equivalencia 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		TypeDeclaration a = (TypeDeclaration)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaType",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // equivalencia ::= listaID IGUAL tipoDato PNTCOMA 
            {
              TypeDeclaration RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new TypeDeclaration(a,aleft,aright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencia",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // equivalencia ::= listaID PNTCOMA 
            {
              TypeDeclaration RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new TypeDeclaration(a,aleft,aright,null); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("equivalencia",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoDato ::= INTEGER 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.INT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoDato ::= BOOLEAN 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.BOOLEAN); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoDato ::= REAL 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.DOUBLE); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoDato ::= CHAR 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.CHAR); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoDato ::= WORD 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.WORD); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoDato ::= STRING 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.STRING); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoDato ::= ID 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Type(a.toString(),Tipo.ID); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoDato ::= insArray 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipoDato ::= insRegistro 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipoDato",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // insArray ::= ARRAY LLAVEIZQ dimensionList LLAVEDER OF tipoDato 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Dimension> a = (LinkedList<Dimension>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

				if(b.getTipo() == Tipo.ARRAY){
					Arreglo temp = (Arreglo)b.getValor();
					LinkedList<Dimension> lista = temp.getDimensiones();
					a.addAll(lista);
					
					Type type = new Type(Tipo.ARRAY,b.getTipoArray());
					type.setValor(new Arreglo(a,aleft,aright,b.getTipoArray())); 
					RESULT = type;
				}
				else {
					Type type = new Type(Tipo.ARRAY,b.getTipo());
					type.setValor(new Arreglo(a,aleft,aright,b.getTipo())); 
					RESULT = type;
				}

			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insArray",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dimensionList ::= dimensionList COMA dimension 
            {
              LinkedList<Dimension> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Dimension> a = (LinkedList<Dimension>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Dimension b = (Dimension)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensionList",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dimensionList ::= dimension 
            {
              LinkedList<Dimension> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Dimension a = (Dimension)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a);	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimensionList",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dimension ::= expresion PNT PNT expresion 
            {
              Dimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Dimension(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dimension ::= ID 
            {
              Dimension RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Dimension(a.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("dimension",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // insRegistro ::= RECORD listaAtributos END 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Type("",Tipo.REGISTRO); RESULT.setValor(new Registro(a,aleft,aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insRegistro",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listaAtributos ::= listaAtributos ID DSPUNTOS tipoDato PNTCOMA 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type c = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; RESULT.addLast(new Atributo(b.toString(),c)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAtributos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listaAtributos ::= ID DSPUNTOS tipoDato PNTCOMA 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Type b = (Type)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(new Atributo(a.toString(),b)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAtributos",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // insFree ::= FREE PARIZQ ID PARDER 
            {
              Free RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Free(a.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFree",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listaID ::= listaID COMA ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b.toString().toLowerCase()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaID",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // listaID ::= ID 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<String>(); RESULT.addLast(a.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaID",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion MAS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.SUMA,aleft,aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.RESTA,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion POR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MULTIPLICACION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion DIVIDIDO expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.DIVISION,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion MODULO expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MODULO,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion POTENCIA expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.POTENCIA,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MAYOR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MENOR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MAYORIGUAL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion MENORIGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.MENORIGUAL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.IGUAL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= expresion DIFERENTE expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.DIFERENTE,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.AND,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.OR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= expresion NAND expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.NAND,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion NOR expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.NOR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= NOT expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,null,Operacion.NOT,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= MENOS expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,null,Operacion.NEGATIVO,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion LLAVEIZQ listaAcceso LLAVEDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,Operacion.ACCESOARRAY,aleft,aright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= llamadaFuncion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= SIZEOF PARIZQ ID PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(Operacion.SIZEOF,aleft,aright,a.toString(),null); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= MALLOC PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.MALLOC,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= LENGTH PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.LENGTH,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= TOLOWERCASE PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TOLOWERCASE,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= TOUPPERCASE PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TOUPPERCASE,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= TRUNK PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.TRUNK,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= ROUND PARIZQ expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 LinkedList<Expresion> lista = new LinkedList<Expresion>(); lista.addLast(a); RESULT = new Expresion(Operacion.ROUND,aleft,aright,"",lista); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= REPLACE PARIZQ expresion COMA expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,b,Operacion.REPLACE,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= EQUALS PARIZQ expresion COMA expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,b,Operacion.EQUALS,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= ENTERO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.INT,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= DECIMAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.DOUBLE,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= CHAR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.CHAR,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= CADENA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.STRING,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= TRUE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion ::= FALSE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.BOOLEAN,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.ID,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= NIL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,Tipo.NULL,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= CHARAT PARIZQ expresion COMA expresion PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(a,b,Operacion.CHARAT,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= expresion PNT ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,null,Operacion.ACCESOID,aleft,aright,b.toString()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // llamadaFuncion ::= ID PARIZQ listaAcceso PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Expresion(Operacion.LLAMADA,aleft,aright,a.toString(),b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // llamadaFuncion ::= ID PARIZQ PARDER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Expresion(Operacion.LLAMADA,aleft,aright,a.toString(),new LinkedList<>()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // cuerpoPrincipal ::= BEGIN instruccionesPrincipal END PNT 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoPrincipal",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // cuerpoPrincipal ::= BEGIN END PNT 
            {
              LinkedList<Instruccion> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoPrincipal",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // instruccionesPrincipal ::= instruccionesPrincipal instruccionPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesPrincipal",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // instruccionesPrincipal ::= instruccionPrincipal 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionesPrincipal",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // instruccionPrincipal ::= insWrite PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Writeln a = (Writeln)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // instruccionPrincipal ::= insAsignacion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // instruccionPrincipal ::= ifSuperior 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		IfSuperior a = (IfSuperior)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // instruccionPrincipal ::= insSwitch PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		SWITCH a = (SWITCH)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // instruccionPrincipal ::= insWhile PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		WHILE a = (WHILE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // instruccionPrincipal ::= insRepeat PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		REPEAT a = (REPEAT)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // instruccionPrincipal ::= insFor PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		FOR a = (FOR)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // instruccionPrincipal ::= insRead PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Read a = (Read)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // instruccionPrincipal ::= insFree PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Free a = (Free)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // instruccionPrincipal ::= llamadaFuncion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // instruccionPrincipal ::= insBreak PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Break a = (Break)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // instruccionPrincipal ::= insContinue PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Continue a = (Continue)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionPrincipal",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // instruccionOneLine ::= insWrite PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Writeln a = (Writeln)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // instruccionOneLine ::= insAsignacion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // instruccionOneLine ::= insRead PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Read a = (Read)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // instruccionOneLine ::= insFree PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Free a = (Free)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // instruccionOneLine ::= llamadaFuncion PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // instruccionOneLine ::= insBreak PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Break a = (Break)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // instruccionOneLine ::= insContinue PNTCOMA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Continue a = (Continue)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccionOneLine",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // insWrite ::= WRITELN PARIZQ listaExpresiones PARDER 
            {
              Writeln RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Writeln(a,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insWrite",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // insWrite ::= WRITE PARIZQ listaExpresiones PARDER 
            {
              Writeln RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Writeln(a,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insWrite",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // listaExpresiones ::= listaExpresiones COMA expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Expresion(a,b,Operacion.SUMA,aleft,aright);	
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaExpresiones",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // listaExpresiones ::= expresion 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaExpresiones",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // insAsignacion ::= ID DSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asignacion(a.toString(),b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insAsignacion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // insAsignacion ::= expresion LLAVEIZQ listaAcceso LLAVEDER DSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoArreglo(a,c,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insAsignacion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // insAsignacion ::= expresion PNT ID DSPUNTOS IGUAL expresion 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AccesoRegistro(a,c,b.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insAsignacion",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // listaAcceso ::= listaAcceso COMA expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAcceso",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // listaAcceso ::= expresion 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaAcceso",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ifSuperior ::= IF expresion THEN insIf 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(new IF(a,aleft,aright,b)); RESULT = new IfSuperior(lista,aleft,aright);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ifSuperior ::= IF expresion THEN insIf ELSE insIf 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(new IF(a,aleft,aright,b)); lista.addLast(new IF(null,bleft,bright,c));  RESULT = new IfSuperior(lista,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ifSuperior ::= IF expresion THEN insIf ELSE ifSuperior 
            {
              IfSuperior RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		IfSuperior c = (IfSuperior)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<IF> lista = new LinkedList<>(); lista.addLast(new IF(a,aleft,aright,b)); lista.addAll(c.getListado()); RESULT = new IfSuperior(lista,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifSuperior",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // insIf ::= BEGIN instruccionesPrincipal END PNTCOMA 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new LinkedList<>(); RESULT.addAll(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insIf",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // insIf ::= instruccionOneLine 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insIf",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // insSwitch ::= CASE expresion OF listaCase insDefault END 
            {
              SWITCH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<CASE> b = (LinkedList<CASE>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		CASE c = (CASE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 b.addLast(c); RESULT = new SWITCH(b,aleft,aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insSwitch",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // insSwitch ::= CASE expresion OF listaCase END 
            {
              SWITCH RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<CASE> b = (LinkedList<CASE>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SWITCH(b,aleft,aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insSwitch",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // listaCase ::= listaCase insCase 
            {
              LinkedList<CASE> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<CASE> a = (LinkedList<CASE>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		CASE b = (CASE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.addLast(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaCase",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // listaCase ::= insCase 
            {
              LinkedList<CASE> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		CASE a = (CASE)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.addLast(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaCase",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // insCase ::= listaAcceso DSPUNTOS instruccionPrincipal 
            {
              CASE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> lista = new LinkedList<>(); lista.addLast(b); RESULT = new CASE(a,lista,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insCase",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // insDefault ::= DEFAULT DSPUNTOS instruccionPrincipal 
            {
              CASE RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 LinkedList<Instruccion> lista = new LinkedList<>(); lista.addLast(b); RESULT = new CASE(null,lista,bleft,bright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insDefault",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // insWhile ::= WHILE expresion DO BEGIN instruccionesPrincipal END 
            {
              WHILE RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new WHILE(a,b,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insWhile",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // insRepeat ::= REPEAT instruccionesPrincipal UNTIL expresion 
            {
              REPEAT RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new REPEAT(b,a,aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insRepeat",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // insFor ::= FOR ID DSPUNTOS IGUAL expresion TO expresion DO BEGIN instruccionesPrincipal END 
            {
              FOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new FOR(a.toString(),b,c,d,aleft,aright,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFor",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // insFor ::= FOR ID DSPUNTOS IGUAL expresion DOWNTO expresion DO BEGIN instruccionesPrincipal END 
            {
              FOR RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new FOR(a.toString(),b,c,d,aleft,aright,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insFor",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // insRead ::= READ PARIZQ ID PARDER 
            {
              Read RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Read(a.toString(),aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insRead",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // insBreak ::= BREAK 
            {
              Break RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Break(aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insBreak",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // insContinue ::= CONTINUE 
            {
              Continue RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Continue(aleft,aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("insContinue",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
